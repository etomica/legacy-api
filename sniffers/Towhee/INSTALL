Installation Instructions
*************************

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005 Free
Software Foundation, Inc.

This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Basic Installation
==================

These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

--------------------------------------
-- Building the Java Towhee Sniffer --
--------------------------------------

  The API include files must be installed  before the Towhee
  Sniffer library can be built.  Simply download the specification
  files found on the website.

  1. `cd' to the directory containing the package's source code and run SWIG.
     
    EXAMPLE (where source code is contained in
             /usr/home/me/sniffers/Towhee/src/Glue) :

    1. cd /usr/home/me/sniffers/Towhee/src/Glue
    2. swig -Wall -I/usr/home/me/api/C++ -java -c++ -package
       towhee.sniffer.wrapper
       -outdir /usr/home/me/sniffers/Towhee/src/java
       /usr/home/me/sniffers/Towhee/src/Glue/towhee.i

      WHERE :  
       -I/usr/home/me/api/C++ : Specifies the location of the API include files
       -package towhee.sniffer.wrapper : Naming the package of new java files
       -outdir /usr/home/me/sniffers/Towhee/src/java : Location where new
              java files are written to.  Already contains pre-built java
              files required for Towhee sniffer.
       /usr/home/me/sniffers/Towhee/src/Glue/towhee.i : Name of SWIG
              input file (which is provided).

  2. Run the post_swig_parser program with the following options :
     -dn : C++ Towhee Sniffer source code directory
     -da : C++ API include file directory
     -pa : Prefix of Interface class names (use IAPI)
     -pn : Prefix of Native class names (use Towhee)
     -i  : SWIG input file (name of file, not full path) (use towhee.i)
     -jp : package name of java sniffer classes (same as -package when running
           SWIG)
     -nn : Native code namespace (use towheesnifferwrappers))
     -na : Include code namespace (use molesimAPI)

  3. Build the C++ Towhee Sniffer (as defined later in this document)

  4. Run the api_parser program with the following options:
     -dn : C++ Towhee Sniffer source code directory
     -da : C++ include file directory
     -pa : Prefix of Interface class names (use IAPI)
     -pn : Prefix of Native class names (use Towhee)
     -i  : SWIG input file (name of file, not full path) (use towhee.i)

  5. If you want to add documentation to the java sniffer code, run the
     comment_generator program with the following options :
     -dn : C++ Towhee Sniffer source code directory
     -da : C++ include file directory
     -pa : Prefix of Interface class names (use IAPI)
     -pn : Prefix of Native class names (use Towhee)

  6. Use the java compiler to compile the java sniffer

    EXAMPLE :
       javac /usr/home/me/sniffers/Towhee/src/java/*.java

  7. Create a jar file containing the code for the Java sniffer

    EXAMPLE :
       jar cf towhee_sniffer.jar -C/usr/home/me/sniffer/Towhee/src/java/ .

-------------------------------------
-- Building the C++ Towhee Sniffer --
-------------------------------------

  The Towhee simulation engine software must be installed and built
into a shared object library (libtowhee.so) before the Towhee
Sniffer library can be built.  It is beyond the scope of this
install to detail how Towhee itself is built.

  The API include files must be installed  before the Towhee Sniffer
library can be built.  Simply download the specification files found on the
website.

The simplest way to compile this package is (after Towhee is built):

  1. `cd' to the directory containing the package's source code and type
     `./configure' (with the options listed below) to configure the package
     for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' (with the options listed below) instead to prevent
     `csh' from trying to execute `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

     OPTIONS : 
     --with-jni-install   (optional)  Some compilers will inherently know where
                                      to find the java header files and
                                      libraries.  This option is not requried
                                      for such compilers.  If the compiler
                                      cannot find the required files, use this
                                      option to specify where java is insalled.
     --with-api-include   (required)  The direcory where the C++ interface
                                      header files reside.
     --with-towhee-install (required) The directory where Towhee is
                                      installed.  This should be the directory
                                      where the make command would be issued
                                      to build Towhee.
     --with-towhee-lib-dir (required) The directory where the Towhee shared
                                      object library is installed.
     --with-install-dir (optional)    The directory where the Towhee sniffer
                                      library should be installed.  The default
                                      is the directory where the sniffer source
                                      code resides.

  2. Type `make' to compile the package.

  3. Type `make install' to install the programs and any data files and
     documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that the
`configure' script does not know about.  Run `./configure --help' for
details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Optional Features
=================

Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

There may be some features `configure' cannot figure out automatically,
but needs to determine by the type of machine the package will run on.
Usually, assuming the package is built to be run on the _same_
architectures, `configure' can figure that out, but if it prints a
message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).  Here is a another example:

     /bin/bash ./configure CONFIG_SHELL=/bin/bash

Here the `CONFIG_SHELL=/bin/bash' operand causes subsequent
configuration-related scripts to be executed by `/bin/bash'.

`configure' Invocation
======================

`configure' recognizes the following options to control how it operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

