/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include "glotzmd.h"
#include "IAPIFunction.h"
#include "IAPIRandom.h"
#include "IAPIVector.h"
#include "IAPIVectorMutable.h"
#include "IAPIBoundaryEvent.h"
#include "IAPIBoundaryListener.h"
#include "IAPIBoundaryEventManager.h"
#include "IAPIBoundary.h"
#include "IAPIAtomList.h"
#include "IAPIMoleculeList.h"
#include "IAPIElement.h"
#include "IAPIAtomType.h"
#include "IAPIAtomTypeSphere.h"
#include "IAPISimulationEvent.h"
#include "IAPISimulationAtomTypeEvent.h"
#include "IAPISimulationSpeciesEvent.h"
#include "IAPISimulationAtomTypeIndexEvent.h"
#include "IAPISimulationSpeciesIndexEvent.h"
#include "IAPISimulationBoxEvent.h"
#include "IAPISimulationIndexEvent.h"
#include "IAPISimulationListener.h"
#include "IAPISimulationEventManager.h"
#include "IAPIAtom.h"
#include "IAPIAtomKinetic.h"
#include "IAPIMolecule.h"
#include "IAPISpecies.h"
#include "IAPIIntegrator.h"
#include "IAPIIntegratorEvent.h"
#include "IAPIIntegratorListener.h"
#include "IAPIIntegratorEventManager.h"
#include "IAPIBoxEvent.h"
#include "IAPIBoxAtomEvent.h"
#include "IAPIBoxAtomIndexEvent.h"
#include "IAPIBoxIndexEvent.h"
#include "IAPIBoxMoleculeEvent.h"
#include "IAPIBoxMoleculeIndexEvent.h"
#include "IAPIBoxMoleculeCountEvent.h"
#include "IAPIBoxListener.h"
#include "IAPIBoxEventManager.h"
#include "IAPIBox.h"
#include "IAPIPotential.h"
#include "IAPIPotentialAtomic.h"
#include "IAPIPotentialMaster.h"
#include "IAPISimulation.h"
#include "GlotzillaInterfaceConformation.h"
#include "GlotzillaInterfaceAtomPositionDefinition.h"
#include "PotentialGroup.h"
#include "GlotzillaAtomType.h"
#include "GlotzillaAtomPositionDefinition.h"
#include "GlotzillaAtomPositionDefinitionSimple.h"
#include "GlotzillaNativeAtomPositionDefinition.h"
#include "GlotzillaAtomTypeSphere.h"
#include "GlotzillaSimulationEvent.h"
#include "GlotzillaSimulationBoxEvent.h"
#include "GlotzillaSimulationSpeciesEvent.h"
#include "GlotzillaSimulationSpeciesIndexEvent.h"
#include "GlotzillaSimulationIndexEvent.h"
#include "GlotzillaSimulationAtomTypeEvent.h"
#include "GlotzillaSimulationAtomTypeIndexEvent.h"
#include "GlotzillaSimulationListenerNative.h"
#include "GlotzillaSimulationEventManager.h"
#include "GlotzillaRandom.h"
#include "GlotzillaVector.h"
#include "GlotzillaVector2D.h"
#include "GlotzillaVector3D.h"
#include "GlotzillaBoundary.h"
#include "GlotzillaBoundaryPeriodic.h"
#include "GlotzillaAtomList.h"
#include "GlotzillaMoleculeList.h"
#include "GlotzillaConformationNative.h"
#include "GlotzillaPotential.h"
#include "GlotzillaPotentialTwelveSixLj.h"
#include "GlotzillaPotentialWCA.h"
#include "GlotzillaPotentialLJ.h"
#include "GlotzillaPotentialDzugutov.h"
#include "GlotzillaSpring.h"
#include "GlotzillaBondHarmonic.h"
#include "GlotzillaBondFene.h"
#include "GlotzillaPotentialMaster.h"
#include "GlotzillaBoundaryEventManager.h"
#include "GlotzillaSpecies.h"
#include "GlotzillaSpeciesSpheresMono.h"
#include "GlotzillaSpeciesSpheresPolymer.h"
#include "GlotzillaAtom.h"
#include "GlotzillaMolecule.h"
#include "GlotzillaMonatomicMolecule.h"
#include "GlotzillaPolymer.h"
#include "GlotzillaIntegrator.h"
#include "GlotzillaIntegratorVelocityVerlet.h"
#include "GlotzillaIntegratorEuler.h"
#include "GlotzillaIntegratorLeapFrog.h"
#include "GlotzillaIntegratorListener.h"
#include "GlotzillaIntegratorListenerNative.h"
#include "GlotzillaIntegratorEventManager.h"
#include "GlotzillaBox.h"
#include "GlotzillaBoxListenerNative.h"
#include "GlotzillaBoxEventManager.h"
#include "GlotzillaBoxEvent.h"
#include "GlotzillaBoxAtomEvent.h"
#include "GlotzillaBoxMoleculeEvent.h"
#include "GlotzillaBoxMoleculeIndexEvent.h"
#include "GlotzillaBoxMoleculeCountEvent.h"
#include "GlotzillaBoxIndexEvent.h"
#include "GlotzillaBoxAtomIndexEvent.h"
#include "GlotzillaSpeciesManager.h"
#include "GlotzillaSpace.h"
#include "GlotzillaSimulation.h"
#include "GlotzillaPotentialMasterBruteForce.h"
#include "GlotzillaPotentialMasterBruteForceShifted.h"
#include "GlotzillaPotentialMasterCellForce.h"
#include "GlotzillaPotentialMasterCellForceMulti.h"
#include "GlotzillaPotentialMasterCellForceShifted.h"
#include "GlotzillaPotentialMasterVerletForce.h"
#include "GlotzillaPotentialMasterVerletForceMulti.h"
#include "GlotzillaPotentialMasterVerletForceMultiShifted.h"
#include "GlotzillaPotentialMasterVerletForceShifted.h"
#include "GlotzillaPotentialMasterVerletCellForce.h"
#include "GlotzillaPotentialMasterVerletCellForceMulti.h"
#include "GlotzillaPotentialMasterVerletCellForceMultiShifted.h"
#include "GlotzillaPotentialMasterVerletCellForceShifted.h"

using namespace glotzwrappers;
using namespace molesimAPI;


#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIFunction_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIFunction *arg1 = (molesimAPI::IAPIFunction *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIFunction **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->f(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIFunction *arg1 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIFunction **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIRandom_1nextDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  result = (double)(arg1)->nextDouble();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIRandom_1nextInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->nextInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIRandom_1nextGaussian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  result = (double)(arg1)->nextGaussian();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIVector_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIVectorMutable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIVectorMutable_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoundaryEvent_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundaryEvent *arg1 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEvent **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoundaryEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryEvent *arg1 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoundaryListener_1boundaryInflate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryListener *arg1 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  molesimAPI::IAPIBoundaryEvent *arg2 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryEvent **)&jarg2; 
  (arg1)->boundaryInflate(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoundaryListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryListener *arg1 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoundaryEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundaryListener *arg2 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoundaryEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundaryListener *arg2 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoundaryEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1getBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getBoxSize();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1setBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setBoxSize(arg2);
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (double)(arg1)->volume();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getCenter();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoundary_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBoundaryEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBoundaryEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoundaryEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIAtomList_1getAtomCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  result = (int)(arg1)->getAtomCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIAtomList_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  int arg2 ;
  IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (IAPIAtom *)(arg1)->getAtom(arg2);
  *(IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIAtomList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIMoleculeList_1getMoleculeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  result = (int)(arg1)->getMoleculeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIMoleculeList_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  int arg2 ;
  IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (IAPIMolecule *)(arg1)->getMolecule(arg2);
  *(IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIMoleculeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIElement_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIElement_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_glotz_wrapper_testJNI_IAPIElement_1getSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (char *)(arg1)->getSymbol();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1setSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->setSpecies(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1setChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChildIndex(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1getChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (int)(arg1)->getChildIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIAtomType_1getElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (molesimAPI::IAPIElement *)(arg1)->getElement();
  *(molesimAPI::IAPIElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIAtomTypeSphere_1setDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDiameter(arg2);
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIAtomTypeSphere_1getDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  result = (double)(arg1)->getDiameter();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIAtomTypeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulationEvent_1getSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationEvent *arg1 = (molesimAPI::IAPISimulationEvent *) 0 ;
  molesimAPI::IAPISimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEvent **)&jarg1; 
  result = (molesimAPI::IAPISimulation *)(arg1)->getSimulation();
  *(molesimAPI::IAPISimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationEvent *arg1 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulationAtomTypeEvent_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationAtomTypeEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeEvent *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationAtomTypeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationAtomTypeEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulationSpeciesEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationSpeciesEvent *arg1 = (molesimAPI::IAPISimulationSpeciesEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationSpeciesEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationSpeciesEvent *arg1 = (molesimAPI::IAPISimulationSpeciesEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPISimulationAtomTypeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationAtomTypeIndexEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationAtomTypeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationAtomTypeIndexEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPISimulationSpeciesIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationSpeciesIndexEvent *arg1 = (molesimAPI::IAPISimulationSpeciesIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationSpeciesIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationSpeciesIndexEvent *arg1 = (molesimAPI::IAPISimulationSpeciesIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulationBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationBoxEvent *arg1 = (molesimAPI::IAPISimulationBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationBoxEvent *arg1 = (molesimAPI::IAPISimulationBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPISimulationIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationIndexEvent *arg1 = (molesimAPI::IAPISimulationIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationIndexEvent *arg1 = (molesimAPI::IAPISimulationIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationListener_1simulationBoxAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxAdded(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationListener_1simulationBoxRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxRemoved(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationListener_1simulationSpeciesAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesAdded(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationListener_1simulationSpeciesRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesRemoved(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationListener_1simulationSpeciesIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesIndexChanged(dynamic_cast<IAPISimulationSpeciesIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationListener_1simulationSpeciesMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationListener_1simulationAtomTypeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeIndexChanged(dynamic_cast<IAPISimulationAtomTypeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationListener_1simulationAtomTypeMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulationEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulationEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIAtom_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIAtom_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIAtom_1setLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeafIndex(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIAtom_1getLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (int)(arg1)->getLeafIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIAtom_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->setParent(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIAtom_1getParentGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getParentGroup();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIAtom_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIAtom_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getPosition();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIAtomKinetic_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomKinetic *arg1 = (molesimAPI::IAPIAtomKinetic *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomKinetic **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getVelocity();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIAtomKinetic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomKinetic *arg1 = (molesimAPI::IAPIAtomKinetic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomKinetic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIMolecule_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIMolecule_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIMolecule_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIMolecule_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIMolecule_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIMolecule_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getType();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPISpecies_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISpecies_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISpecies_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPISpecies_1getAtomTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (int)(arg1)->getAtomTypeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISpecies_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType(arg2);
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISpecies_1initializeConformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->initializeConformation(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIIntegrator_1doStep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->doStep();
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIIntegrator_1getStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  result = (long long)(arg1)->getStepCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIIntegrator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIIntegrator_1resetStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->resetStepCount();
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIIntegrator_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  IAPIIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  result = (IAPIIntegratorEventManager *)(arg1)->getEventManager();
  *(IAPIIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIIntegratorEvent_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegratorEvent *arg1 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEvent **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIIntegratorEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorEvent *arg1 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIIntegratorListener_1integratorInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorInitialized(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIIntegratorListener_1integratorStepStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepStarted(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIIntegratorListener_1integratorStepFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepFinished(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIIntegratorListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIIntegratorEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIIntegratorEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIIntegratorEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxEvent *arg1 = (molesimAPI::IAPIBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxEvent *arg1 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoxAtomEvent_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxAtomEvent *arg1 = (molesimAPI::IAPIBoxAtomEvent *) 0 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom();
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxAtomEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxAtomEvent *arg1 = (molesimAPI::IAPIBoxAtomEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIBoxAtomIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxAtomIndexEvent *arg1 = (molesimAPI::IAPIBoxAtomIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxAtomIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxAtomIndexEvent *arg1 = (molesimAPI::IAPIBoxAtomIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIBoxIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxIndexEvent *arg1 = (molesimAPI::IAPIBoxIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxIndexEvent *arg1 = (molesimAPI::IAPIBoxIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoxMoleculeEvent_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeEvent *arg1 = (molesimAPI::IAPIBoxMoleculeEvent *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxMoleculeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeEvent *arg1 = (molesimAPI::IAPIBoxMoleculeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIBoxMoleculeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeIndexEvent *arg1 = (molesimAPI::IAPIBoxMoleculeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxMoleculeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeIndexEvent *arg1 = (molesimAPI::IAPIBoxMoleculeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBoxMoleculeCountEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIBoxMoleculeCountEvent_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  result = (int)(arg1)->getCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxMoleculeCountEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxAtomAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomAdded(dynamic_cast<IAPIBoxAtomEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxAtomRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomRemoved(dynamic_cast<IAPIBoxAtomEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxMoleculeAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeAdded(dynamic_cast<IAPIBoxMoleculeEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxMoleculeRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeRemoved(dynamic_cast<IAPIBoxMoleculeEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxGlobalAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxGlobalAtomLeafIndexChanged(dynamic_cast<IAPIBoxIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxGlobalAtomIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxGlobalAtomIndexChanged(dynamic_cast<IAPIBoxIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomLeafIndexChanged(dynamic_cast<IAPIBoxAtomIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxMoleculeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeIndexChanged(dynamic_cast<IAPIBoxMoleculeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxListener_1boxNumberMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxNumberMolecules(dynamic_cast<IAPIBoxMoleculeCountEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBoxEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBoxEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1setNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setNMolecules(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1getNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (int)(arg1)->getNMolecules(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1getMoleculeList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList(arg2);
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1getMoleculeList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList();
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1getLeafList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getLeafList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1setBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoundary *arg2 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundary **)&jarg2; 
  (arg1)->setBoundary(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIBoxEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1addSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIBox_1removeSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIPotential_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIPotential_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPIPotential_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_IAPIPotentialAtomic_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIPotentialAtomic *arg1 = (molesimAPI::IAPIPotentialAtomic *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialAtomic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIPotentialAtomic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotentialAtomic *arg1 = (molesimAPI::IAPIPotentialAtomic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialAtomic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPIPotentialMaster_1addPotential(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  molesimAPI::IAPIPotentialMaster *arg1 = (molesimAPI::IAPIPotentialMaster *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPIAtomType *arg3 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIAtomType *arg4 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotentialAtomic **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtomType **)&jarg3; 
  arg4 = *(molesimAPI::IAPIAtomType **)&jarg4; 
  (arg1)->addPotential(dynamic_cast<IAPIPotentialAtomic *>(arg2),arg3,arg4);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPIPotentialMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotentialMaster *arg1 = (molesimAPI::IAPIPotentialMaster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialMaster **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1addBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->addBox(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1removeBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->removeBox(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1getBoxCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (int)(arg1)->getBoxCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox(arg2);
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1getRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPIRandom *)(arg1)->getRandom();
  *(molesimAPI::IAPIRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_IAPISimulation_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPISimulationEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPISimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1IAPISimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaInterfaceConformation_1initializePositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaInterfaceConformation *arg1 = (glotzwrappers::GlotzillaInterfaceConformation *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaInterfaceConformation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  (arg1)->initializePositions(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaInterfaceConformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaInterfaceConformation *arg1 = (glotzwrappers::GlotzillaInterfaceConformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaInterfaceConformation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaInterfaceAtomPositionDefinition_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaInterfaceAtomPositionDefinition *arg1 = (glotzwrappers::GlotzillaInterfaceAtomPositionDefinition *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaInterfaceAtomPositionDefinition **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaInterfaceAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaInterfaceAtomPositionDefinition *arg1 = (glotzwrappers::GlotzillaInterfaceAtomPositionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaInterfaceAtomPositionDefinition **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1PotentialGroup(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  glotzwrappers::PotentialGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (glotzwrappers::PotentialGroup *)new glotzwrappers::PotentialGroup(arg1);
  *(glotzwrappers::PotentialGroup **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1addPotential_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3, jintArray jarg4, jint jarg5) {
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  int *arg3 ;
  int *arg4 ;
  int arg5 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotential **)&jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (int)jarg5; 
  (arg1)->addPotential(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1addPotential_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotential **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addPotential(arg2,arg3,arg4);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1getPotentialCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  result = (int)(arg1)->getPotentialCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1getPotential(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  int arg2 ;
  molesimAPI::IAPIPotential *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIPotential *)(arg1)->getPotential(arg2);
  *(molesimAPI::IAPIPotential **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1getPairCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getPairCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1getAtomIndex1(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getAtomIndex1(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_PotentialGroup_1getAtomIndex2(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getAtomIndex2(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1PotentialGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::PotentialGroup *arg1 = (glotzwrappers::PotentialGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::PotentialGroup **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomPositionDefinition_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomPositionDefinition *arg1 = (glotzwrappers::GlotzillaAtomPositionDefinition *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomPositionDefinition **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomPositionDefinition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomPositionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaAtomPositionDefinition *)new glotzwrappers::GlotzillaAtomPositionDefinition();
  *(glotzwrappers::GlotzillaAtomPositionDefinition **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaAtomPositionDefinition *arg1 = (glotzwrappers::GlotzillaAtomPositionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomPositionDefinition **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomPositionDefinitionSimple(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomPositionDefinitionSimple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaAtomPositionDefinitionSimple *)new glotzwrappers::GlotzillaAtomPositionDefinitionSimple();
  *(glotzwrappers::GlotzillaAtomPositionDefinitionSimple **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomPositionDefinitionSimple_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomPositionDefinitionSimple *arg1 = (glotzwrappers::GlotzillaAtomPositionDefinitionSimple *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomPositionDefinitionSimple **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaAtomPositionDefinitionSimple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaAtomPositionDefinitionSimple *arg1 = (glotzwrappers::GlotzillaAtomPositionDefinitionSimple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomPositionDefinitionSimple **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaNativeAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  molesimAPI::IAPISimulation *arg3 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaNativeAtomPositionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(molesimAPI::IAPISimulation **)&jarg3; 
  result = (glotzwrappers::GlotzillaNativeAtomPositionDefinition *)new glotzwrappers::GlotzillaNativeAtomPositionDefinition(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaNativeAtomPositionDefinition **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaNativeAtomPositionDefinition_1position_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaNativeAtomPositionDefinition *arg1 = (glotzwrappers::GlotzillaNativeAtomPositionDefinition *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaNativeAtomPositionDefinition **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaNativeAtomPositionDefinition_1position_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaNativeAtomPositionDefinition *arg1 = (glotzwrappers::GlotzillaNativeAtomPositionDefinition *) 0 ;
  jobject arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaNativeAtomPositionDefinition **)&jarg1; 
  arg2 = jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaNativeAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaNativeAtomPositionDefinition *arg1 = (glotzwrappers::GlotzillaNativeAtomPositionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaNativeAtomPositionDefinition **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaAtomType *)new glotzwrappers::GlotzillaAtomType();
  *(glotzwrappers::GlotzillaAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  glotzwrappers::GlotzillaAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (glotzwrappers::GlotzillaAtomType *)new glotzwrappers::GlotzillaAtomType(arg1);
  *(glotzwrappers::GlotzillaAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  glotzwrappers::GlotzillaAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (glotzwrappers::GlotzillaAtomType *)new glotzwrappers::GlotzillaAtomType(arg1,arg2);
  *(glotzwrappers::GlotzillaAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1setSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->setSpecies(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1setChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChildIndex(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1getChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  result = (int)(arg1)->getChildIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1getElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  molesimAPI::IAPIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  result = (molesimAPI::IAPIElement *)(arg1)->getElement();
  *(molesimAPI::IAPIElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaAtomType *arg1 = (glotzwrappers::GlotzillaAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomType **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomTypeSphere_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomTypeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaAtomTypeSphere *)new glotzwrappers::GlotzillaAtomTypeSphere();
  *(glotzwrappers::GlotzillaAtomTypeSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomTypeSphere_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  glotzwrappers::GlotzillaAtomTypeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (glotzwrappers::GlotzillaAtomTypeSphere *)new glotzwrappers::GlotzillaAtomTypeSphere(arg1);
  *(glotzwrappers::GlotzillaAtomTypeSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomTypeSphere_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  glotzwrappers::GlotzillaAtomTypeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (glotzwrappers::GlotzillaAtomTypeSphere *)new glotzwrappers::GlotzillaAtomTypeSphere(arg1,arg2);
  *(glotzwrappers::GlotzillaAtomTypeSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomTypeSphere_1setDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaAtomTypeSphere *arg1 = (glotzwrappers::GlotzillaAtomTypeSphere *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomTypeSphere **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDiameter(arg2);
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomTypeSphere_1getDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaAtomTypeSphere *arg1 = (glotzwrappers::GlotzillaAtomTypeSphere *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomTypeSphere **)&jarg1; 
  result = (double)(arg1)->getDiameter();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaAtomTypeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaAtomTypeSphere *arg1 = (glotzwrappers::GlotzillaAtomTypeSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomTypeSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaSimulationEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaSimulationEvent *)new glotzwrappers::GlotzillaSimulationEvent(arg1);
  *(glotzwrappers::GlotzillaSimulationEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationEvent_1getSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulationEvent *arg1 = (glotzwrappers::GlotzillaSimulationEvent *) 0 ;
  molesimAPI::IAPISimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationEvent **)&jarg1; 
  result = (molesimAPI::IAPISimulation *)(arg1)->getSimulation();
  *(molesimAPI::IAPISimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationEvent *arg1 = (glotzwrappers::GlotzillaSimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  glotzwrappers::GlotzillaSimulationBoxEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  result = (glotzwrappers::GlotzillaSimulationBoxEvent *)new glotzwrappers::GlotzillaSimulationBoxEvent(arg1,arg2);
  *(glotzwrappers::GlotzillaSimulationBoxEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulationBoxEvent *arg1 = (glotzwrappers::GlotzillaSimulationBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationBoxEvent *arg1 = (glotzwrappers::GlotzillaSimulationBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationSpeciesEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  glotzwrappers::GlotzillaSimulationSpeciesEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (glotzwrappers::GlotzillaSimulationSpeciesEvent *)new glotzwrappers::GlotzillaSimulationSpeciesEvent(arg1,arg2);
  *(glotzwrappers::GlotzillaSimulationSpeciesEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationSpeciesEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulationSpeciesEvent *arg1 = (glotzwrappers::GlotzillaSimulationSpeciesEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationSpeciesEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationSpeciesEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationSpeciesEvent *arg1 = (glotzwrappers::GlotzillaSimulationSpeciesEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationSpeciesEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationSpeciesIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int arg3 ;
  glotzwrappers::GlotzillaSimulationSpeciesIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (glotzwrappers::GlotzillaSimulationSpeciesIndexEvent *)new glotzwrappers::GlotzillaSimulationSpeciesIndexEvent(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaSimulationSpeciesIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationSpeciesIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSimulationSpeciesIndexEvent *arg1 = (glotzwrappers::GlotzillaSimulationSpeciesIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationSpeciesIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationSpeciesIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationSpeciesIndexEvent *arg1 = (glotzwrappers::GlotzillaSimulationSpeciesIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationSpeciesIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  glotzwrappers::GlotzillaSimulationIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (glotzwrappers::GlotzillaSimulationIndexEvent *)new glotzwrappers::GlotzillaSimulationIndexEvent(arg1,arg2);
  *(glotzwrappers::GlotzillaSimulationIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSimulationIndexEvent *arg1 = (glotzwrappers::GlotzillaSimulationIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationIndexEvent *arg1 = (glotzwrappers::GlotzillaSimulationIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationAtomTypeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  glotzwrappers::GlotzillaSimulationAtomTypeEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  result = (glotzwrappers::GlotzillaSimulationAtomTypeEvent *)new glotzwrappers::GlotzillaSimulationAtomTypeEvent(arg1,arg2);
  *(glotzwrappers::GlotzillaSimulationAtomTypeEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationAtomTypeEvent_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulationAtomTypeEvent *arg1 = (glotzwrappers::GlotzillaSimulationAtomTypeEvent *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationAtomTypeEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationAtomTypeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationAtomTypeEvent *arg1 = (glotzwrappers::GlotzillaSimulationAtomTypeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationAtomTypeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationAtomTypeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg3 ;
  glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent *)new glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationAtomTypeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent *arg1 = (glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationAtomTypeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent *arg1 = (glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  glotzwrappers::GlotzillaSimulationListenerNative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  result = (glotzwrappers::GlotzillaSimulationListenerNative *)new glotzwrappers::GlotzillaSimulationListenerNative(arg1,arg2);
  *(glotzwrappers::GlotzillaSimulationListenerNative **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationListenerNative_1simulationBoxAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxAdded(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationListenerNative_1simulationBoxRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxRemoved(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationListenerNative_1simulationSpeciesAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesAdded(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationListenerNative_1simulationSpeciesRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesRemoved(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationListenerNative_1simulationSpeciesIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesIndexChanged(dynamic_cast<IAPISimulationSpeciesIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationListenerNative_1simulationSpeciesMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationListenerNative_1simulationAtomTypeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeIndexChanged(dynamic_cast<IAPISimulationAtomTypeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationListenerNative_1simulationAtomTypeMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationListenerNative *arg1 = (glotzwrappers::GlotzillaSimulationListenerNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationEventManager *arg1 = (glotzwrappers::GlotzillaSimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulationEventManager *arg1 = (glotzwrappers::GlotzillaSimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulationEventManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaSimulationEventManager *)new glotzwrappers::GlotzillaSimulationEventManager();
  *(glotzwrappers::GlotzillaSimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulationEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulationEventManager *arg1 = (glotzwrappers::GlotzillaSimulationEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulationEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaRandom(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaRandom *)new glotzwrappers::GlotzillaRandom();
  *(glotzwrappers::GlotzillaRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaRandom_1nextDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaRandom *arg1 = (glotzwrappers::GlotzillaRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaRandom **)&jarg1; 
  result = (double)(arg1)->nextDouble();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaRandom_1nextInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaRandom *arg1 = (glotzwrappers::GlotzillaRandom *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaRandom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->nextInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaRandom_1nextGaussian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaRandom *arg1 = (glotzwrappers::GlotzillaRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaRandom **)&jarg1; 
  result = (double)(arg1)->nextGaussian();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaRandom *arg1 = (glotzwrappers::GlotzillaRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaRandom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1getGlotzVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  glotzmath::glotz_vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  result = (glotzmath::glotz_vec *)(arg1)->getGlotzVector();
  *(glotzmath::glotz_vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaVector *arg1 = (glotzwrappers::GlotzillaVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaVector2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaVector2D *)new glotzwrappers::GlotzillaVector2D();
  *(glotzwrappers::GlotzillaVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaVector2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  glotzwrappers::GlotzillaVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (glotzwrappers::GlotzillaVector2D *)new glotzwrappers::GlotzillaVector2D(arg1,arg2);
  *(glotzwrappers::GlotzillaVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaVector2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzmath::glotz_vec *arg1 = (glotzmath::glotz_vec *) 0 ;
  glotzwrappers::GlotzillaVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzmath::glotz_vec **)&jarg1; 
  result = (glotzwrappers::GlotzillaVector2D *)new glotzwrappers::GlotzillaVector2D(arg1);
  *(glotzwrappers::GlotzillaVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaVector2D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  glotzwrappers::GlotzillaVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  result = (glotzwrappers::GlotzillaVector2D *)new glotzwrappers::GlotzillaVector2D(arg1);
  *(glotzwrappers::GlotzillaVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaVector2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector2D_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector2D *arg1 = (glotzwrappers::GlotzillaVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaVector3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaVector3D *)new glotzwrappers::GlotzillaVector3D();
  *(glotzwrappers::GlotzillaVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaVector3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  glotzwrappers::GlotzillaVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (glotzwrappers::GlotzillaVector3D *)new glotzwrappers::GlotzillaVector3D(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaVector3D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzmath::glotz_vec *arg1 = (glotzmath::glotz_vec *) 0 ;
  glotzwrappers::GlotzillaVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzmath::glotz_vec **)&jarg1; 
  result = (glotzwrappers::GlotzillaVector3D *)new glotzwrappers::GlotzillaVector3D(arg1);
  *(glotzwrappers::GlotzillaVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaVector3D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  glotzwrappers::GlotzillaVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  result = (glotzwrappers::GlotzillaVector3D *)new glotzwrappers::GlotzillaVector3D(arg1);
  *(glotzwrappers::GlotzillaVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaVector3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1E_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->E(arg2,arg3,arg4);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector3D_1make3DArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaVector3D *arg1 = (glotzwrappers::GlotzillaVector3D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double *)(arg1)->make3DArray(arg2,arg3,arg4);
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1setBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setBoxSize(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1getBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getBoxSize();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  result = (double)(arg1)->volume();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getCenter();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  molesimAPI::IAPIBoundaryEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBoundaryEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoundaryEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1getGlotzillaBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  glotzsimapi::BoundaryConditions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  result = (glotzsimapi::BoundaryConditions *)(arg1)->getGlotzillaBoundary();
  *(glotzsimapi::BoundaryConditions **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoundary *arg1 = (glotzwrappers::GlotzillaBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundary **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoundaryPeriodic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaBoundaryPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaBoundaryPeriodic *)new glotzwrappers::GlotzillaBoundaryPeriodic(arg1);
  *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoundaryPeriodic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzsimapi::PeriodicBoundary *arg2 = (glotzsimapi::PeriodicBoundary *) 0 ;
  glotzwrappers::GlotzillaBoundaryPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(glotzsimapi::PeriodicBoundary **)&jarg2; 
  result = (glotzwrappers::GlotzillaBoundaryPeriodic *)new glotzwrappers::GlotzillaBoundaryPeriodic(arg1,arg2);
  *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundaryPeriodic_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoundaryPeriodic *arg1 = (glotzwrappers::GlotzillaBoundaryPeriodic *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundaryPeriodic_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundaryPeriodic *arg1 = (glotzwrappers::GlotzillaBoundaryPeriodic *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundaryPeriodic_1setBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoundaryPeriodic *arg1 = (glotzwrappers::GlotzillaBoundaryPeriodic *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setBoxSize(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundaryPeriodic_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundaryPeriodic *arg1 = (glotzwrappers::GlotzillaBoundaryPeriodic *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundaryPeriodic_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  glotzwrappers::GlotzillaBoundaryPeriodic *arg1 = (glotzwrappers::GlotzillaBoundaryPeriodic *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoundaryPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoundaryPeriodic *arg1 = (glotzwrappers::GlotzillaBoundaryPeriodic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtomList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaAtomList *)new glotzwrappers::GlotzillaAtomList();
  *(glotzwrappers::GlotzillaAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaAtomList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaAtomList *arg1 = (glotzwrappers::GlotzillaAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomList_1getAtomCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaAtomList *arg1 = (glotzwrappers::GlotzillaAtomList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomList **)&jarg1; 
  result = (int)(arg1)->getAtomCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomList_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtomList *arg1 = (glotzwrappers::GlotzillaAtomList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom(arg2);
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomList_1addAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaAtomList *arg1 = (glotzwrappers::GlotzillaAtomList *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addAtom(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomList_1removeAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaAtomList *arg1 = (glotzwrappers::GlotzillaAtomList *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeAtom(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaAtomList *arg1 = (glotzwrappers::GlotzillaAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtomList **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaMoleculeList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaMoleculeList *)new glotzwrappers::GlotzillaMoleculeList();
  *(glotzwrappers::GlotzillaMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaMoleculeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaMoleculeList *arg1 = (glotzwrappers::GlotzillaMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMoleculeList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaMoleculeList_1getMoleculeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaMoleculeList *arg1 = (glotzwrappers::GlotzillaMoleculeList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMoleculeList **)&jarg1; 
  result = (int)(arg1)->getMoleculeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaMoleculeList_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaMoleculeList *arg1 = (glotzwrappers::GlotzillaMoleculeList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMoleculeList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule(arg2);
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaMoleculeList_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaMoleculeList *arg1 = (glotzwrappers::GlotzillaMoleculeList *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMoleculeList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaMoleculeList_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaMoleculeList *arg1 = (glotzwrappers::GlotzillaMoleculeList *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMoleculeList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaMoleculeList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaMoleculeList *arg1 = (glotzwrappers::GlotzillaMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMoleculeList **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaConformationNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  glotzwrappers::GlotzillaConformationNative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  result = (glotzwrappers::GlotzillaConformationNative *)new glotzwrappers::GlotzillaConformationNative(arg1,arg2);
  *(glotzwrappers::GlotzillaConformationNative **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaConformationNative_1initializePositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaConformationNative *arg1 = (glotzwrappers::GlotzillaConformationNative *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaConformationNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  (arg1)->initializePositions(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaConformationNative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaConformationNative *arg1 = (glotzwrappers::GlotzillaConformationNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaConformationNative **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotential_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotential *arg1 = (glotzwrappers::GlotzillaPotential *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotential **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotential_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotential *arg1 = (glotzwrappers::GlotzillaPotential *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotential **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotential_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaPotential *arg1 = (glotzwrappers::GlotzillaPotential *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotential **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotential_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaPotential *arg1 = (glotzwrappers::GlotzillaPotential *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotential **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotential_1getGlotzPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotential *arg1 = (glotzwrappers::GlotzillaPotential *) 0 ;
  glotzmd::Potential *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotential **)&jarg1; 
  result = (glotzmd::Potential *)(arg1)->getGlotzPotential();
  *(glotzmd::Potential **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotential *arg1 = (glotzwrappers::GlotzillaPotential *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotential **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialTwelveSixLj(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotentialTwelveSixLj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaPotentialTwelveSixLj *)new glotzwrappers::GlotzillaPotentialTwelveSixLj();
  *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialTwelveSixLj_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotentialTwelveSixLj *arg1 = (glotzwrappers::GlotzillaPotentialTwelveSixLj *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialTwelveSixLj_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotentialTwelveSixLj *arg1 = (glotzwrappers::GlotzillaPotentialTwelveSixLj *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialTwelveSixLj_1setEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialTwelveSixLj *arg1 = (glotzwrappers::GlotzillaPotentialTwelveSixLj *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEpsilon(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialTwelveSixLj_1setSigma(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialTwelveSixLj *arg1 = (glotzwrappers::GlotzillaPotentialTwelveSixLj *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSigma(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialTwelveSixLj_1setCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialTwelveSixLj *arg1 = (glotzwrappers::GlotzillaPotentialTwelveSixLj *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCutoff(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialTwelveSixLj_1getGlotzPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotentialTwelveSixLj *arg1 = (glotzwrappers::GlotzillaPotentialTwelveSixLj *) 0 ;
  glotzmd::Potential *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jarg1; 
  result = (glotzmd::Potential *)(arg1)->getGlotzPotential();
  *(glotzmd::Potential **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialTwelveSixLj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialTwelveSixLj *arg1 = (glotzwrappers::GlotzillaPotentialTwelveSixLj *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialWCA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotentialWCA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaPotentialWCA *)new glotzwrappers::GlotzillaPotentialWCA();
  *(glotzwrappers::GlotzillaPotentialWCA **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialWCA_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotentialWCA *arg1 = (glotzwrappers::GlotzillaPotentialWCA *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialWCA **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialWCA_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotentialWCA *arg1 = (glotzwrappers::GlotzillaPotentialWCA *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialWCA **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialWCA_1setSigma(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialWCA *arg1 = (glotzwrappers::GlotzillaPotentialWCA *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialWCA **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSigma(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialWCA_1setCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialWCA *arg1 = (glotzwrappers::GlotzillaPotentialWCA *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialWCA **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCutoff(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialWCA_1getGlotzPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotentialWCA *arg1 = (glotzwrappers::GlotzillaPotentialWCA *) 0 ;
  glotzmd::Potential *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialWCA **)&jarg1; 
  result = (glotzmd::Potential *)(arg1)->getGlotzPotential();
  *(glotzmd::Potential **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialWCA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialWCA *arg1 = (glotzwrappers::GlotzillaPotentialWCA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialWCA **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialLJ(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotentialLJ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaPotentialLJ *)new glotzwrappers::GlotzillaPotentialLJ();
  *(glotzwrappers::GlotzillaPotentialLJ **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialLJ_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotentialLJ *arg1 = (glotzwrappers::GlotzillaPotentialLJ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialLJ_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotentialLJ *arg1 = (glotzwrappers::GlotzillaPotentialLJ *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialLJ_1setEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialLJ *arg1 = (glotzwrappers::GlotzillaPotentialLJ *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEpsilon(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialLJ_1setSigma(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialLJ *arg1 = (glotzwrappers::GlotzillaPotentialLJ *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSigma(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialLJ_1setCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialLJ *arg1 = (glotzwrappers::GlotzillaPotentialLJ *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCutoff(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialLJ_1setPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialLJ *arg1 = (glotzwrappers::GlotzillaPotentialLJ *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setPower(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialLJ_1getGlotzPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotentialLJ *arg1 = (glotzwrappers::GlotzillaPotentialLJ *) 0 ;
  glotzmd::Potential *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1; 
  result = (glotzmd::Potential *)(arg1)->getGlotzPotential();
  *(glotzmd::Potential **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialLJ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialLJ *arg1 = (glotzwrappers::GlotzillaPotentialLJ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSpring_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaSpring *)new glotzwrappers::GlotzillaSpring();
  *(glotzwrappers::GlotzillaSpring **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSpring_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  glotzwrappers::GlotzillaSpring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (glotzwrappers::GlotzillaSpring *)new glotzwrappers::GlotzillaSpring(arg1,arg2);
  *(glotzwrappers::GlotzillaSpring **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpring_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpring_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpring_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpring_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpring_1setSpringConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpringConstant(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpring_1setTargetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetExtent(arg2);
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpring_1getSpringConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  result = (double)(arg1)->getSpringConstant();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpring_1getTargetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  result = (double)(arg1)->getTargetExtent();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSpring(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSpring *arg1 = (glotzwrappers::GlotzillaSpring *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpring **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBondHarmonic_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBondHarmonic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaBondHarmonic *)new glotzwrappers::GlotzillaBondHarmonic();
  *(glotzwrappers::GlotzillaBondHarmonic **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBondHarmonic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  glotzwrappers::GlotzillaBondHarmonic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (glotzwrappers::GlotzillaBondHarmonic *)new glotzwrappers::GlotzillaBondHarmonic(arg1,arg2);
  *(glotzwrappers::GlotzillaBondHarmonic **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBondHarmonic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBondHarmonic *arg1 = (glotzwrappers::GlotzillaBondHarmonic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBondHarmonic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBondFene_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBondFene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaBondFene *)new glotzwrappers::GlotzillaBondFene();
  *(glotzwrappers::GlotzillaBondFene **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBondFene_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  glotzwrappers::GlotzillaBondFene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (glotzwrappers::GlotzillaBondFene *)new glotzwrappers::GlotzillaBondFene(arg1,arg2);
  *(glotzwrappers::GlotzillaBondFene **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBondFene(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBondFene *arg1 = (glotzwrappers::GlotzillaBondFene *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBondFene **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialDzugutov(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotentialDzugutov *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaPotentialDzugutov *)new glotzwrappers::GlotzillaPotentialDzugutov();
  *(glotzwrappers::GlotzillaPotentialDzugutov **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialDzugutov_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotentialDzugutov *arg1 = (glotzwrappers::GlotzillaPotentialDzugutov *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialDzugutov **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialDzugutov_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaPotentialDzugutov *arg1 = (glotzwrappers::GlotzillaPotentialDzugutov *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialDzugutov **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialDzugutov_1getGlotzPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPotentialDzugutov *arg1 = (glotzwrappers::GlotzillaPotentialDzugutov *) 0 ;
  glotzmd::Potential *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialDzugutov **)&jarg1; 
  result = (glotzmd::Potential *)(arg1)->getGlotzPotential();
  *(glotzmd::Potential **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialDzugutov(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialDzugutov *arg1 = (glotzwrappers::GlotzillaPotentialDzugutov *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialDzugutov **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMaster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMaster *)new glotzwrappers::GlotzillaPotentialMaster(arg1);
  *(glotzwrappers::GlotzillaPotentialMaster **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMaster_1addPotential_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  glotzwrappers::GlotzillaPotentialMaster *arg1 = (glotzwrappers::GlotzillaPotentialMaster *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPIAtomType *arg3 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIAtomType *arg4 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotentialAtomic **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtomType **)&jarg3; 
  arg4 = *(molesimAPI::IAPIAtomType **)&jarg4; 
  (arg1)->addPotential(dynamic_cast<IAPIPotentialAtomic *>(arg2),arg3,arg4);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMaster_1addPotential_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaPotentialMaster *arg1 = (glotzwrappers::GlotzillaPotentialMaster *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPISpecies *arg3 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotential **)&jarg2; 
  arg3 = *(molesimAPI::IAPISpecies **)&jarg3; 
  (arg1)->addPotential(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMaster *arg1 = (glotzwrappers::GlotzillaPotentialMaster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMaster **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundaryEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoundaryEventManager *arg1 = (glotzwrappers::GlotzillaBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundaryListener *arg2 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundaryEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoundaryEventManager *arg1 = (glotzwrappers::GlotzillaBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundaryListener *arg2 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundaryEventManager_1inflate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoundaryEventManager *arg1 = (glotzwrappers::GlotzillaBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundary *arg2 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundary **)&jarg2; 
  (arg1)->inflate(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoundaryEventManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoundaryEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaBoundaryEventManager *)new glotzwrappers::GlotzillaBoundaryEventManager();
  *(glotzwrappers::GlotzillaBoundaryEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoundaryEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoundaryEventManager *arg1 = (glotzwrappers::GlotzillaBoundaryEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoundaryEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1getAtomTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  result = (int)(arg1)->getAtomTypeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType(arg2);
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1initializeConformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->initializeConformation(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1addChildType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  (arg1)->addChildType(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1removeChildType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  (arg1)->removeChildType(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSpecies *arg1 = (glotzwrappers::GlotzillaSpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpecies **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSpeciesSpheresMono_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  glotzwrappers::GlotzillaSpeciesSpheresMono *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  result = (glotzwrappers::GlotzillaSpeciesSpheresMono *)new glotzwrappers::GlotzillaSpeciesSpheresMono(arg1,arg2);
  *(glotzwrappers::GlotzillaSpeciesSpheresMono **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSpeciesSpheresMono_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  glotzwrappers::GlotzillaInterfaceConformation *arg3 = (glotzwrappers::GlotzillaInterfaceConformation *) 0 ;
  glotzwrappers::GlotzillaSpeciesSpheresMono *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  arg3 = *(glotzwrappers::GlotzillaInterfaceConformation **)&jarg3; 
  result = (glotzwrappers::GlotzillaSpeciesSpheresMono *)new glotzwrappers::GlotzillaSpeciesSpheresMono(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaSpeciesSpheresMono **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpeciesSpheresMono_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpeciesSpheresMono *arg1 = (glotzwrappers::GlotzillaSpeciesSpheresMono *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesSpheresMono **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpeciesSpheresMono_1addChildType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSpeciesSpheresMono *arg1 = (glotzwrappers::GlotzillaSpeciesSpheresMono *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesSpheresMono **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  (arg1)->addChildType(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSpeciesSpheresMono(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSpeciesSpheresMono *arg1 = (glotzwrappers::GlotzillaSpeciesSpheresMono *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesSpheresMono **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSpeciesSpheresPolymer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaSpeciesSpheresPolymer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaSpeciesSpheresPolymer *)new glotzwrappers::GlotzillaSpeciesSpheresPolymer(arg1);
  *(glotzwrappers::GlotzillaSpeciesSpheresPolymer **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSpeciesSpheresPolymer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaInterfaceConformation *arg2 = (glotzwrappers::GlotzillaInterfaceConformation *) 0 ;
  glotzwrappers::GlotzillaSpeciesSpheresPolymer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(glotzwrappers::GlotzillaInterfaceConformation **)&jarg2; 
  result = (glotzwrappers::GlotzillaSpeciesSpheresPolymer *)new glotzwrappers::GlotzillaSpeciesSpheresPolymer(arg1,arg2);
  *(glotzwrappers::GlotzillaSpeciesSpheresPolymer **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpeciesSpheresPolymer_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpeciesSpheresPolymer *arg1 = (glotzwrappers::GlotzillaSpeciesSpheresPolymer *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesSpheresPolymer **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSpeciesSpheresPolymer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSpeciesSpheresPolymer *arg1 = (glotzwrappers::GlotzillaSpeciesSpheresPolymer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesSpheresPolymer **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaAtom *)new glotzwrappers::GlotzillaAtom(arg1);
  *(glotzwrappers::GlotzillaAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  glotzwrappers::GlotzillaAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  result = (glotzwrappers::GlotzillaAtom *)new glotzwrappers::GlotzillaAtom(arg1,arg2);
  *(glotzwrappers::GlotzillaAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtom_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  glotzwrappers::GlotzillaAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (glotzwrappers::GlotzillaAtom *)new glotzwrappers::GlotzillaAtom(arg1,arg2,arg3,arg4);
  *(glotzwrappers::GlotzillaAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtom_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  molesimAPI::IAPIAtomType *arg5 = (molesimAPI::IAPIAtomType *) 0 ;
  glotzwrappers::GlotzillaAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(molesimAPI::IAPIAtomType **)&jarg5; 
  result = (glotzwrappers::GlotzillaAtom *)new glotzwrappers::GlotzillaAtom(arg1,arg2,arg3,arg4,arg5);
  *(glotzwrappers::GlotzillaAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtom_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  glotzwrappers::GlotzillaAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (glotzwrappers::GlotzillaAtom *)new glotzwrappers::GlotzillaAtom(arg1,arg2);
  *(glotzwrappers::GlotzillaAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtom_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIAtomType *arg3 = (molesimAPI::IAPIAtomType *) 0 ;
  glotzwrappers::GlotzillaAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtomType **)&jarg3; 
  result = (glotzwrappers::GlotzillaAtom *)new glotzwrappers::GlotzillaAtom(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaAtom_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzmd::Bead *arg2 = (glotzmd::Bead *) 0 ;
  glotzwrappers::GlotzillaAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(glotzmd::Bead **)&jarg2; 
  result = (glotzwrappers::GlotzillaAtom *)new glotzwrappers::GlotzillaAtom(arg1,arg2);
  *(glotzwrappers::GlotzillaAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1setLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeafIndex(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1getLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  result = (int)(arg1)->getLeafIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getPosition();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getVelocity();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->setParent(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1getParentGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getParentGroup();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtom_1getGlotzBead(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaAtom *arg1 = (glotzwrappers::GlotzillaAtom *) 0 ;
  glotzmd::Bead *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaAtom **)&jarg1; 
  result = (glotzmd::Bead *)(arg1)->getGlotzBead();
  *(glotzmd::Bead **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaMolecule_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaMolecule *arg1 = (glotzwrappers::GlotzillaMolecule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMolecule **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaMolecule_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaMolecule *arg1 = (glotzwrappers::GlotzillaMolecule *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMolecule **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaMolecule_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaMolecule *arg1 = (glotzwrappers::GlotzillaMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaMolecule_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaMolecule *arg1 = (glotzwrappers::GlotzillaMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaMolecule_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaMolecule *arg1 = (glotzwrappers::GlotzillaMolecule *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMolecule **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaMolecule_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaMolecule *arg1 = (glotzwrappers::GlotzillaMolecule *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMolecule **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getType();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaMolecule_1getGlotzParticle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaMolecule *arg1 = (glotzwrappers::GlotzillaMolecule *) 0 ;
  glotzmd::Particle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMolecule **)&jarg1; 
  result = (glotzmd::Particle *)(arg1)->getGlotzParticle();
  *(glotzmd::Particle **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaMolecule *arg1 = (glotzwrappers::GlotzillaMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMolecule **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaMonatomicMolecule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaMonatomicMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaMonatomicMolecule *)new glotzwrappers::GlotzillaMonatomicMolecule(arg1);
  *(glotzwrappers::GlotzillaMonatomicMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaMonatomicMolecule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  glotzwrappers::GlotzillaMonatomicMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (glotzwrappers::GlotzillaMonatomicMolecule *)new glotzwrappers::GlotzillaMonatomicMolecule(arg1,arg2);
  *(glotzwrappers::GlotzillaMonatomicMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaMonatomicMolecule_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzmd::PointParticle *arg2 = (glotzmd::PointParticle *) 0 ;
  molesimAPI::IAPISpecies *arg3 = (molesimAPI::IAPISpecies *) 0 ;
  glotzwrappers::GlotzillaMonatomicMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(glotzmd::PointParticle **)&jarg2; 
  arg3 = *(molesimAPI::IAPISpecies **)&jarg3; 
  result = (glotzwrappers::GlotzillaMonatomicMolecule *)new glotzwrappers::GlotzillaMonatomicMolecule(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaMonatomicMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaMonatomicMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaMonatomicMolecule *arg1 = (glotzwrappers::GlotzillaMonatomicMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMonatomicMolecule **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaMonatomicMolecule_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaMonatomicMolecule *arg1 = (glotzwrappers::GlotzillaMonatomicMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMonatomicMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaMonatomicMolecule_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaMonatomicMolecule *arg1 = (glotzwrappers::GlotzillaMonatomicMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMonatomicMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaMonatomicMolecule_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaMonatomicMolecule *arg1 = (glotzwrappers::GlotzillaMonatomicMolecule *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMonatomicMolecule **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaMonatomicMolecule_1getGlotzParticle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaMonatomicMolecule *arg1 = (glotzwrappers::GlotzillaMonatomicMolecule *) 0 ;
  glotzmd::Particle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaMonatomicMolecule **)&jarg1; 
  result = (glotzmd::Particle *)(arg1)->getGlotzParticle();
  *(glotzmd::Particle **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPolymer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPolymer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPolymer *)new glotzwrappers::GlotzillaPolymer(arg1);
  *(glotzwrappers::GlotzillaPolymer **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPolymer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  glotzwrappers::GlotzillaPolymer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (glotzwrappers::GlotzillaPolymer *)new glotzwrappers::GlotzillaPolymer(arg1,arg2);
  *(glotzwrappers::GlotzillaPolymer **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPolymer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzmd::Polymer *arg2 = (glotzmd::Polymer *) 0 ;
  molesimAPI::IAPISpecies *arg3 = (molesimAPI::IAPISpecies *) 0 ;
  glotzwrappers::GlotzillaPolymer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(glotzmd::Polymer **)&jarg2; 
  arg3 = *(molesimAPI::IAPISpecies **)&jarg3; 
  result = (glotzwrappers::GlotzillaPolymer *)new glotzwrappers::GlotzillaPolymer(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaPolymer **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPolymer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1setVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  glotzwrappers::GlotzillaVector *arg2 = (glotzwrappers::GlotzillaVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  arg2 = *(glotzwrappers::GlotzillaVector **)&jarg2; 
  (arg1)->setVelocity(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1modifyVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  glotzwrappers::GlotzillaVector *arg2 = (glotzwrappers::GlotzillaVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  arg2 = *(glotzwrappers::GlotzillaVector **)&jarg2; 
  (arg1)->modifyVelocity(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1rescaleVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rescaleVelocity(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1invertVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  (arg1)->invertVelocity();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  glotzwrappers::GlotzillaVector *arg2 = (glotzwrappers::GlotzillaVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  arg2 = *(glotzwrappers::GlotzillaVector **)&jarg2; 
  (arg1)->setPosition(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1setPositionInBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  glotzwrappers::GlotzillaVector *arg2 = (glotzwrappers::GlotzillaVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  arg2 = *(glotzwrappers::GlotzillaVector **)&jarg2; 
  (arg1)->setPositionInBox(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaPolymer_1getGlotzParticle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaPolymer *arg1 = (glotzwrappers::GlotzillaPolymer *) 0 ;
  glotzmd::Particle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPolymer **)&jarg1; 
  result = (glotzmd::Particle *)(arg1)->getGlotzParticle();
  *(glotzmd::Particle **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegrator_1doStep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegrator *arg1 = (glotzwrappers::GlotzillaIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegrator **)&jarg1; 
  (arg1)->doStep();
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegrator_1getStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaIntegrator *arg1 = (glotzwrappers::GlotzillaIntegrator *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegrator **)&jarg1; 
  result = (long long)(arg1)->getStepCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegrator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegrator *arg1 = (glotzwrappers::GlotzillaIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegrator **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegrator_1resetStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegrator *arg1 = (glotzwrappers::GlotzillaIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegrator **)&jarg1; 
  (arg1)->resetStepCount();
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegrator_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaIntegrator *arg1 = (glotzwrappers::GlotzillaIntegrator *) 0 ;
  molesimAPI::IAPIIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegrator **)&jarg1; 
  result = (molesimAPI::IAPIIntegratorEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegrator_1setTimestep(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaIntegrator *arg1 = (glotzwrappers::GlotzillaIntegrator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegrator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTimestep(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegrator *arg1 = (glotzwrappers::GlotzillaIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegrator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaIntegratorVelocityVerlet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaIntegratorVelocityVerlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaIntegratorVelocityVerlet *)new glotzwrappers::GlotzillaIntegratorVelocityVerlet(arg1);
  *(glotzwrappers::GlotzillaIntegratorVelocityVerlet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorVelocityVerlet_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorVelocityVerlet *arg1 = (glotzwrappers::GlotzillaIntegratorVelocityVerlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorVelocityVerlet **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorVelocityVerlet_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorVelocityVerlet *arg1 = (glotzwrappers::GlotzillaIntegratorVelocityVerlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorVelocityVerlet **)&jarg1; 
  (arg1)->initialize();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaIntegratorVelocityVerlet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorVelocityVerlet *arg1 = (glotzwrappers::GlotzillaIntegratorVelocityVerlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorVelocityVerlet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaIntegratorEuler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaIntegratorEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaIntegratorEuler *)new glotzwrappers::GlotzillaIntegratorEuler(arg1);
  *(glotzwrappers::GlotzillaIntegratorEuler **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorEuler_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorEuler *arg1 = (glotzwrappers::GlotzillaIntegratorEuler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorEuler **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorEuler_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorEuler *arg1 = (glotzwrappers::GlotzillaIntegratorEuler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorEuler **)&jarg1; 
  (arg1)->initialize();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaIntegratorEuler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorEuler *arg1 = (glotzwrappers::GlotzillaIntegratorEuler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorEuler **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaIntegratorLeapFrog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaIntegratorLeapFrog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaIntegratorLeapFrog *)new glotzwrappers::GlotzillaIntegratorLeapFrog(arg1);
  *(glotzwrappers::GlotzillaIntegratorLeapFrog **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorLeapFrog_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorLeapFrog *arg1 = (glotzwrappers::GlotzillaIntegratorLeapFrog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorLeapFrog **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorLeapFrog_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorLeapFrog *arg1 = (glotzwrappers::GlotzillaIntegratorLeapFrog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorLeapFrog **)&jarg1; 
  (arg1)->initialize();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaIntegratorLeapFrog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorLeapFrog *arg1 = (glotzwrappers::GlotzillaIntegratorLeapFrog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorLeapFrog **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaIntegratorListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  glotzwrappers::GlotzillaIntegratorListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  result = (glotzwrappers::GlotzillaIntegratorListener *)new glotzwrappers::GlotzillaIntegratorListener(arg1);
  *(glotzwrappers::GlotzillaIntegratorListener **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListener_1integratorInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaIntegratorListener *arg1 = (glotzwrappers::GlotzillaIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorInitialized(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListener_1integratorStepStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaIntegratorListener *arg1 = (glotzwrappers::GlotzillaIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepStarted(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListener_1integratorStepFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaIntegratorListener *arg1 = (glotzwrappers::GlotzillaIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepFinished(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListener_1ApplyPreMovePreForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorListener *arg1 = (glotzwrappers::GlotzillaIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListener **)&jarg1; 
  (arg1)->ApplyPreMovePreForce();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListener_1ApplyPostMovePostForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorListener *arg1 = (glotzwrappers::GlotzillaIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListener **)&jarg1; 
  (arg1)->ApplyPostMovePostForce();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaIntegratorListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorListener *arg1 = (glotzwrappers::GlotzillaIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  glotzwrappers::GlotzillaIntegratorListenerNative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  result = (glotzwrappers::GlotzillaIntegratorListenerNative *)new glotzwrappers::GlotzillaIntegratorListenerNative(arg1,arg2);
  *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListenerNative_1integratorInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaIntegratorListenerNative *arg1 = (glotzwrappers::GlotzillaIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorInitialized(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListenerNative_1integratorStepStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaIntegratorListenerNative *arg1 = (glotzwrappers::GlotzillaIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepStarted(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListenerNative_1integratorStepFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaIntegratorListenerNative *arg1 = (glotzwrappers::GlotzillaIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepFinished(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListenerNative_1ApplyPreMovePreForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorListenerNative *arg1 = (glotzwrappers::GlotzillaIntegratorListenerNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jarg1; 
  (arg1)->ApplyPreMovePreForce();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListenerNative_1ApplyPostMovePostForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorListenerNative *arg1 = (glotzwrappers::GlotzillaIntegratorListenerNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jarg1; 
  (arg1)->ApplyPostMovePostForce();
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorListenerNative *arg1 = (glotzwrappers::GlotzillaIntegratorListenerNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaIntegratorEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaIntegratorEventManager *)new glotzwrappers::GlotzillaIntegratorEventManager(arg1);
  *(glotzwrappers::GlotzillaIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaIntegratorEventManager *arg1 = (glotzwrappers::GlotzillaIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaIntegratorEventManager *arg1 = (glotzwrappers::GlotzillaIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaIntegratorEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaIntegratorEventManager *arg1 = (glotzwrappers::GlotzillaIntegratorEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaIntegratorEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1setNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setNMolecules(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1getNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (int)(arg1)->getNMolecules(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1getMoleculeList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList(arg2);
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1getMoleculeList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList();
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1getLeafList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getLeafList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1setBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPIBoundary *arg2 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundary **)&jarg2; 
  (arg1)->setBoundary(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPIBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  result = (molesimAPI::IAPIBoxEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1addSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1removeSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBox *arg1 = (glotzwrappers::GlotzillaBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpeciesNotify(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBox_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzmd::Simulation *arg1 = (glotzmd::Simulation *) 0 ;
  glotzwrappers::GlotzillaBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzmd::Simulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaBox *)glotzwrappers::GlotzillaBox::instance(arg1);
  *(glotzwrappers::GlotzillaBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  glotzwrappers::GlotzillaBoxListenerNative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  result = (glotzwrappers::GlotzillaBoxListenerNative *)new glotzwrappers::GlotzillaBoxListenerNative(arg1,arg2);
  *(glotzwrappers::GlotzillaBoxListenerNative **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxAtomAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomAdded(dynamic_cast<IAPIBoxAtomEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxAtomRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomRemoved(dynamic_cast<IAPIBoxAtomEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxMoleculeAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeAdded(dynamic_cast<IAPIBoxMoleculeEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxMoleculeRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeRemoved(dynamic_cast<IAPIBoxMoleculeEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxGlobalAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxGlobalAtomLeafIndexChanged(dynamic_cast<IAPIBoxIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxGlobalAtomIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxGlobalAtomIndexChanged(dynamic_cast<IAPIBoxIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomLeafIndexChanged(dynamic_cast<IAPIBoxAtomIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxMoleculeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeIndexChanged(dynamic_cast<IAPIBoxMoleculeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxListenerNative_1boxNumberMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxNumberMolecules(dynamic_cast<IAPIBoxMoleculeCountEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxListenerNative *arg1 = (glotzwrappers::GlotzillaBoxListenerNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1atomAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIAtom *arg3 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtom **)&jarg3; 
  (arg1)->atomAdded(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1atomRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIAtom *arg3 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtom **)&jarg3; 
  (arg1)->atomRemoved(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1moleculeAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg3 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = *(molesimAPI::IAPIMolecule **)&jarg3; 
  (arg1)->moleculeAdded(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1moleculeRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg3 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = *(molesimAPI::IAPIMolecule **)&jarg3; 
  (arg1)->moleculeRemoved(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1globalAtomIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->globalAtomIndexChanged(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1globalAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->globalAtomLeafIndexChanged(arg2,arg3);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1atomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIAtom *arg3 = (molesimAPI::IAPIAtom *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtom **)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->atomLeafIndexChanged(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1numberMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg3 = (molesimAPI::IAPISpecies *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = *(molesimAPI::IAPISpecies **)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->numberMolecules(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEventManager_1moleculeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg3 = (molesimAPI::IAPIMolecule *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  arg3 = *(molesimAPI::IAPIMolecule **)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->moleculeIndexChanged(arg2,arg3,arg4);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxEventManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaBoxEventManager *)new glotzwrappers::GlotzillaBoxEventManager();
  *(glotzwrappers::GlotzillaBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxEventManager *arg1 = (glotzwrappers::GlotzillaBoxEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  glotzwrappers::GlotzillaBoxEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (glotzwrappers::GlotzillaBoxEvent *)new glotzwrappers::GlotzillaBoxEvent(arg1);
  *(glotzwrappers::GlotzillaBoxEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoxEvent *arg1 = (glotzwrappers::GlotzillaBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxEvent *arg1 = (glotzwrappers::GlotzillaBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxAtomEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  glotzwrappers::GlotzillaBoxAtomEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  result = (glotzwrappers::GlotzillaBoxAtomEvent *)new glotzwrappers::GlotzillaBoxAtomEvent(arg1,arg2);
  *(glotzwrappers::GlotzillaBoxAtomEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxAtomEvent_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoxAtomEvent *arg1 = (glotzwrappers::GlotzillaBoxAtomEvent *) 0 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxAtomEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom();
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxAtomEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxAtomEvent *arg1 = (glotzwrappers::GlotzillaBoxAtomEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxAtomEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxMoleculeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  glotzwrappers::GlotzillaBoxMoleculeEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  result = (glotzwrappers::GlotzillaBoxMoleculeEvent *)new glotzwrappers::GlotzillaBoxMoleculeEvent(arg1,arg2);
  *(glotzwrappers::GlotzillaBoxMoleculeEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxMoleculeEvent_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoxMoleculeEvent *arg1 = (glotzwrappers::GlotzillaBoxMoleculeEvent *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxMoleculeEvent **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxMoleculeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxMoleculeEvent *arg1 = (glotzwrappers::GlotzillaBoxMoleculeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxMoleculeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxMoleculeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *arg3 = (molesimAPI::IAPIBox *) 0 ;
  glotzwrappers::GlotzillaBoxMoleculeIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(molesimAPI::IAPIBox **)&jarg3; 
  result = (glotzwrappers::GlotzillaBoxMoleculeIndexEvent *)new glotzwrappers::GlotzillaBoxMoleculeIndexEvent(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaBoxMoleculeIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxMoleculeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaBoxMoleculeIndexEvent *arg1 = (glotzwrappers::GlotzillaBoxMoleculeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxMoleculeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxMoleculeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxMoleculeIndexEvent *arg1 = (glotzwrappers::GlotzillaBoxMoleculeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxMoleculeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxMoleculeCountEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *arg3 = (molesimAPI::IAPIBox *) 0 ;
  glotzwrappers::GlotzillaBoxMoleculeCountEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(molesimAPI::IAPIBox **)&jarg3; 
  result = (glotzwrappers::GlotzillaBoxMoleculeCountEvent *)new glotzwrappers::GlotzillaBoxMoleculeCountEvent(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaBoxMoleculeCountEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxMoleculeCountEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaBoxMoleculeCountEvent *arg1 = (glotzwrappers::GlotzillaBoxMoleculeCountEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxMoleculeCountEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxMoleculeCountEvent_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaBoxMoleculeCountEvent *arg1 = (glotzwrappers::GlotzillaBoxMoleculeCountEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxMoleculeCountEvent **)&jarg1; 
  result = (int)(arg1)->getCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxMoleculeCountEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxMoleculeCountEvent *arg1 = (glotzwrappers::GlotzillaBoxMoleculeCountEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxMoleculeCountEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxIndexEvent(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  glotzwrappers::GlotzillaBoxIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  result = (glotzwrappers::GlotzillaBoxIndexEvent *)new glotzwrappers::GlotzillaBoxIndexEvent(arg1,arg2);
  *(glotzwrappers::GlotzillaBoxIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaBoxIndexEvent *arg1 = (glotzwrappers::GlotzillaBoxIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxIndexEvent *arg1 = (glotzwrappers::GlotzillaBoxIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaBoxAtomIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *arg3 = (molesimAPI::IAPIBox *) 0 ;
  glotzwrappers::GlotzillaBoxAtomIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(molesimAPI::IAPIBox **)&jarg3; 
  result = (glotzwrappers::GlotzillaBoxAtomIndexEvent *)new glotzwrappers::GlotzillaBoxAtomIndexEvent(arg1,arg2,arg3);
  *(glotzwrappers::GlotzillaBoxAtomIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxAtomIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaBoxAtomIndexEvent *arg1 = (glotzwrappers::GlotzillaBoxAtomIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxAtomIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaBoxAtomIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaBoxAtomIndexEvent *arg1 = (glotzwrappers::GlotzillaBoxAtomIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaBoxAtomIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpeciesManager_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSpeciesManager *arg1 = (glotzwrappers::GlotzillaSpeciesManager *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpeciesManager_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSpeciesManager *arg1 = (glotzwrappers::GlotzillaSpeciesManager *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpeciesManager_1boxAddedNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSpeciesManager *arg1 = (glotzwrappers::GlotzillaSpeciesManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->boxAddedNotify(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpeciesManager_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSpeciesManager *arg1 = (glotzwrappers::GlotzillaSpeciesManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesManager **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpeciesManager_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpeciesManager *arg1 = (glotzwrappers::GlotzillaSpeciesManager *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesManager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSpeciesManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpeciesManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (glotzwrappers::GlotzillaSpeciesManager *)new glotzwrappers::GlotzillaSpeciesManager();
  *(glotzwrappers::GlotzillaSpeciesManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSpeciesManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSpeciesManager *arg1 = (glotzwrappers::GlotzillaSpeciesManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpeciesManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSpace(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  glotzwrappers::GlotzillaSpace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (glotzwrappers::GlotzillaSpace *)new glotzwrappers::GlotzillaSpace(arg1);
  *(glotzwrappers::GlotzillaSpace **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpace_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSpace *arg1 = (glotzwrappers::GlotzillaSpace *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpace **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpace_1makeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpace *arg1 = (glotzwrappers::GlotzillaSpace *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpace **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->makeVector();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpace_1makeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSpace *arg1 = (glotzwrappers::GlotzillaSpace *) 0 ;
  glotzmath::glotz_vec *arg2 = (glotzmath::glotz_vec *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpace **)&jarg1; 
  arg2 = *(glotzmath::glotz_vec **)&jarg2; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->makeVector(arg2);
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSpace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSpace *arg1 = (glotzwrappers::GlotzillaSpace *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSpace **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  glotzwrappers::GlotzillaSimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (glotzwrappers::GlotzillaSimulation *)new glotzwrappers::GlotzillaSimulation(arg1);
  *(glotzwrappers::GlotzillaSimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaSimulation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzmd::Simulation *arg1 = (glotzmd::Simulation *) 0 ;
  glotzwrappers::GlotzillaSimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzmd::Simulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaSimulation *)new glotzwrappers::GlotzillaSimulation(arg1);
  *(glotzwrappers::GlotzillaSimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1addBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->addBox(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1removeBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->removeBox(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  molesimAPI::IAPIRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (molesimAPI::IAPIRandom *)(arg1)->getRandom();
  *(molesimAPI::IAPIRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  molesimAPI::IAPISimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (molesimAPI::IAPISimulationEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPISimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox(arg2);
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getBoxCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (int)(arg1)->getBoxCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getGlotzillaSim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  glotzmd::Simulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (glotzmd::Simulation *)(arg1)->getGlotzillaSim();
  *(glotzmd::Simulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getPotentialEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (double)(arg1)->getPotentialEnergy();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getKineticEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (double)(arg1)->getKineticEnergy();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getTotalEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (double)(arg1)->getTotalEnergy();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1getSpace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  glotzwrappers::GlotzillaSpace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaSpace *)(arg1)->getSpace();
  *(glotzwrappers::GlotzillaSpace **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulation_1setIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  glotzwrappers::GlotzillaSimulation *arg1 = (glotzwrappers::GlotzillaSimulation *) 0 ;
  molesimAPI::IAPIIntegrator *arg2 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegrator **)&jarg2; 
  (arg1)->setIntegrator(arg2);
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterBruteForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterBruteForce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterBruteForce *)new glotzwrappers::GlotzillaPotentialMasterBruteForce(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterBruteForce **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterBruteForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterBruteForce *arg1 = (glotzwrappers::GlotzillaPotentialMasterBruteForce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterBruteForce **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterBruteForceShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterBruteForceShifted *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterBruteForceShifted *)new glotzwrappers::GlotzillaPotentialMasterBruteForceShifted(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterBruteForceShifted **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterBruteForceShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterBruteForceShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterBruteForceShifted *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterBruteForceShifted **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterCellForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterCellForce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterCellForce *)new glotzwrappers::GlotzillaPotentialMasterCellForce(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterCellForce **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterCellForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterCellForce *arg1 = (glotzwrappers::GlotzillaPotentialMasterCellForce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterCellForce **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterCellForceMulti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterCellForceMulti *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterCellForceMulti *)new glotzwrappers::GlotzillaPotentialMasterCellForceMulti(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterCellForceMulti **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterCellForceMulti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterCellForceMulti *arg1 = (glotzwrappers::GlotzillaPotentialMasterCellForceMulti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterCellForceMulti **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterCellForceShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterCellForceShifted *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterCellForceShifted *)new glotzwrappers::GlotzillaPotentialMasterCellForceShifted(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterCellForceShifted **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterCellForceShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterCellForceShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterCellForceShifted *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterCellForceShifted **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterVerletForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterVerletForce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterVerletForce *)new glotzwrappers::GlotzillaPotentialMasterVerletForce(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterVerletForce **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletForce_1setListUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletForce *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForce *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForce **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setListUpdateFrequency(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletForce_1setSkinThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletForce *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForce *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForce **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSkinThickness(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterVerletForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterVerletForce *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForce **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterVerletForceMulti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterVerletForceMulti *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterVerletForceMulti *)new glotzwrappers::GlotzillaPotentialMasterVerletForceMulti(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterVerletForceMulti **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletForceMulti_1setListUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceMulti *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceMulti *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceMulti **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setListUpdateFrequency(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletForceMulti_1setSkinThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceMulti *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceMulti *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceMulti **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSkinThickness(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterVerletForceMulti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceMulti *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceMulti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceMulti **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterVerletForceMultiShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted *)new glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletForceMultiShifted_1setListUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setListUpdateFrequency(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletForceMultiShifted_1setSkinThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSkinThickness(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterVerletForceMultiShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterVerletForceShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterVerletForceShifted *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterVerletForceShifted *)new glotzwrappers::GlotzillaPotentialMasterVerletForceShifted(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterVerletForceShifted **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletForceShifted_1setListUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceShifted *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceShifted **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setListUpdateFrequency(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletForceShifted_1setSkinThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceShifted *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceShifted **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSkinThickness(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterVerletForceShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterVerletForceShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletForceShifted *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletForceShifted **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterVerletCellForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterVerletCellForce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterVerletCellForce *)new glotzwrappers::GlotzillaPotentialMasterVerletCellForce(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterVerletCellForce **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletCellForce_1setListUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForce *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForce *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForce **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setListUpdateFrequency(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletCellForce_1setSkinThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForce *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForce *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForce **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSkinThickness(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterVerletCellForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForce *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForce **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterVerletCellForceMulti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti *)new glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletCellForceMulti_1setListUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setListUpdateFrequency(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletCellForceMulti_1setSkinThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSkinThickness(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterVerletCellForceMulti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterVerletCellForceMultiShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted *)new glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletCellForceMultiShifted_1setListUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setListUpdateFrequency(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletCellForceMultiShifted_1setSkinThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSkinThickness(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterVerletCellForceMultiShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_new_1GlotzillaPotentialMasterVerletCellForceShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted *)new glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted(arg1);
  *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletCellForceShifted_1setListUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setListUpdateFrequency(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMasterVerletCellForceShifted_1setSkinThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSkinThickness(arg2);
}


JNIEXPORT void JNICALL Java_glotz_wrapper_testJNI_delete_1GlotzillaPotentialMasterVerletCellForceShifted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted *arg1 = (glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIVectorMutableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIVector **)&baseptr = *(molesimAPI::IAPIVectorMutable **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIAtomTypeSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomType **)&baseptr = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPISimulationAtomTypeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPISimulationSpeciesEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPISimulationAtomTypeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationAtomTypeEvent **)&baseptr = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPISimulationSpeciesIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationSpeciesEvent **)&baseptr = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPISimulationBoxEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPISimulationIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIAtomKineticUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtom **)&baseptr = *(molesimAPI::IAPIAtomKinetic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIBoxAtomEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIBoxAtomIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxAtomEvent **)&baseptr = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIBoxIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIBoxMoleculeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIBoxMoleculeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxMoleculeEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIBoxMoleculeCountEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGIAPIPotentialAtomicUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotential **)&baseptr = *(molesimAPI::IAPIPotentialAtomic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGPotentialGroupUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotential **)&baseptr = *(glotzwrappers::PotentialGroup **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaAtomPositionDefinitionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaInterfaceAtomPositionDefinition **)&baseptr = *(glotzwrappers::GlotzillaAtomPositionDefinition **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaAtomPositionDefinitionSimpleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaInterfaceAtomPositionDefinition **)&baseptr = *(glotzwrappers::GlotzillaAtomPositionDefinitionSimple **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaNativeAtomPositionDefinitionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaAtomPositionDefinition **)&baseptr = *(glotzwrappers::GlotzillaNativeAtomPositionDefinition **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaAtomTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomType **)&baseptr = *(glotzwrappers::GlotzillaAtomType **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaAtomTypeSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaAtomType **)&baseptr = *(glotzwrappers::GlotzillaAtomTypeSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(glotzwrappers::GlotzillaSimulationEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationBoxEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSimulationEvent **)&baseptr = *(glotzwrappers::GlotzillaSimulationBoxEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationSpeciesEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSimulationEvent **)&baseptr = *(glotzwrappers::GlotzillaSimulationSpeciesEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationSpeciesIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSimulationSpeciesEvent **)&baseptr = *(glotzwrappers::GlotzillaSimulationSpeciesIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSimulationEvent **)&baseptr = *(glotzwrappers::GlotzillaSimulationIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationAtomTypeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSimulationEvent **)&baseptr = *(glotzwrappers::GlotzillaSimulationAtomTypeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationAtomTypeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSimulationAtomTypeEvent **)&baseptr = *(glotzwrappers::GlotzillaSimulationAtomTypeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationListenerNativeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationListener **)&baseptr = *(glotzwrappers::GlotzillaSimulationListenerNative **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEventManager **)&baseptr = *(glotzwrappers::GlotzillaSimulationEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaRandomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIRandom **)&baseptr = *(glotzwrappers::GlotzillaRandom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaVectorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIVectorMutable **)&baseptr = *(glotzwrappers::GlotzillaVector **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaVector2DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaVector **)&baseptr = *(glotzwrappers::GlotzillaVector2D **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaVector3DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaVector **)&baseptr = *(glotzwrappers::GlotzillaVector3D **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoundaryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoundary **)&baseptr = *(glotzwrappers::GlotzillaBoundary **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoundaryPeriodicUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaBoundary **)&baseptr = *(glotzwrappers::GlotzillaBoundaryPeriodic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaAtomListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomList **)&baseptr = *(glotzwrappers::GlotzillaAtomList **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaMoleculeListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIMoleculeList **)&baseptr = *(glotzwrappers::GlotzillaMoleculeList **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaConformationNativeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaInterfaceConformation **)&baseptr = *(glotzwrappers::GlotzillaConformationNative **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotentialAtomic **)&baseptr = *(glotzwrappers::GlotzillaPotential **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialTwelveSixLjUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotential **)&baseptr = *(glotzwrappers::GlotzillaPotentialTwelveSixLj **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialWCAUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotential **)&baseptr = *(glotzwrappers::GlotzillaPotentialWCA **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialLJUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotential **)&baseptr = *(glotzwrappers::GlotzillaPotentialLJ **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSpringUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotential **)&baseptr = *(glotzwrappers::GlotzillaSpring **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBondHarmonicUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSpring **)&baseptr = *(glotzwrappers::GlotzillaBondHarmonic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBondFeneUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSpring **)&baseptr = *(glotzwrappers::GlotzillaBondFene **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialDzugutovUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotential **)&baseptr = *(glotzwrappers::GlotzillaPotentialDzugutov **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMaster **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoundaryEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoundaryEventManager **)&baseptr = *(glotzwrappers::GlotzillaBoundaryEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSpeciesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISpecies **)&baseptr = *(glotzwrappers::GlotzillaSpecies **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSpeciesSpheresMonoUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSpecies **)&baseptr = *(glotzwrappers::GlotzillaSpeciesSpheresMono **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSpeciesSpheresPolymerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaSpecies **)&baseptr = *(glotzwrappers::GlotzillaSpeciesSpheresPolymer **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaAtomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtom **)&baseptr = *(glotzwrappers::GlotzillaAtom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaMoleculeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIMolecule **)&baseptr = *(glotzwrappers::GlotzillaMolecule **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaMonatomicMoleculeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaMolecule **)&baseptr = *(glotzwrappers::GlotzillaMonatomicMolecule **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPolymerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaMolecule **)&baseptr = *(glotzwrappers::GlotzillaPolymer **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaIntegratorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegrator **)&baseptr = *(glotzwrappers::GlotzillaIntegrator **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaIntegratorVelocityVerletUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaIntegrator **)&baseptr = *(glotzwrappers::GlotzillaIntegratorVelocityVerlet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaIntegratorEulerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaIntegrator **)&baseptr = *(glotzwrappers::GlotzillaIntegratorEuler **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaIntegratorLeapFrogUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaIntegrator **)&baseptr = *(glotzwrappers::GlotzillaIntegratorLeapFrog **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaIntegratorListenerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegratorListener **)&baseptr = *(glotzwrappers::GlotzillaIntegratorListener **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaIntegratorListenerNativeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegratorListener **)&baseptr = *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaIntegratorEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegratorEventManager **)&baseptr = *(glotzwrappers::GlotzillaIntegratorEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBox **)&baseptr = *(glotzwrappers::GlotzillaBox **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxListenerNativeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxListener **)&baseptr = *(glotzwrappers::GlotzillaBoxListenerNative **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEventManager **)&baseptr = *(glotzwrappers::GlotzillaBoxEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(glotzwrappers::GlotzillaBoxEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxAtomEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaBoxEvent **)&baseptr = *(glotzwrappers::GlotzillaBoxAtomEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxMoleculeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaBoxEvent **)&baseptr = *(glotzwrappers::GlotzillaBoxMoleculeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxMoleculeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaBoxMoleculeEvent **)&baseptr = *(glotzwrappers::GlotzillaBoxMoleculeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxMoleculeCountEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaBoxEvent **)&baseptr = *(glotzwrappers::GlotzillaBoxMoleculeCountEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaBoxEvent **)&baseptr = *(glotzwrappers::GlotzillaBoxIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaBoxAtomIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaBoxAtomEvent **)&baseptr = *(glotzwrappers::GlotzillaBoxAtomIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaSimulationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulation **)&baseptr = *(glotzwrappers::GlotzillaSimulation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterBruteForceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterBruteForce **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterBruteForceShiftedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterBruteForceShifted **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterCellForceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterCellForce **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterCellForceMultiUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterCellForceMulti **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterCellForceShiftedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterCellForceShifted **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterVerletForceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterVerletForce **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterVerletForceMultiUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterVerletForceMulti **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterVerletForceMultiShiftedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterVerletForceMultiShifted **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterVerletForceShiftedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterVerletForceShifted **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterVerletCellForceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForce **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterVerletCellForceMultiUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMulti **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterVerletCellForceMultiShiftedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceMultiShifted **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_SWIGGlotzillaPotentialMasterVerletCellForceShiftedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(glotzwrappers::GlotzillaPotentialMaster **)&baseptr = *(glotzwrappers::GlotzillaPotentialMasterVerletCellForceShifted **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_create_1GlotzillaBoxListenerNative(JNIEnv *jenv, jclass jcls, jobject jobj) {


  jlong jresult = 0;
  glotzwrappers::GlotzillaBoxListenerNative *result = 0 ;

  result = (glotzwrappers::GlotzillaBoxListenerNative *)new glotzwrappers::GlotzillaBoxListenerNative(jenv, jobj);
  *(glotzwrappers::GlotzillaBoxListenerNative **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_create_1GlotzillaConformationNative(JNIEnv *jenv, jclass jcls, jobject jobj) {


  jlong jresult = 0;
  glotzwrappers::GlotzillaConformationNative *result = 0 ;

  result = (glotzwrappers::GlotzillaConformationNative *)new glotzwrappers::GlotzillaConformationNative(jenv, jobj);
  *(glotzwrappers::GlotzillaConformationNative **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_create_1GlotzillaIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jobject jobj) {


  jlong jresult = 0;
  glotzwrappers::GlotzillaIntegratorListenerNative *result = 0 ;

  result = (glotzwrappers::GlotzillaIntegratorListenerNative *)new glotzwrappers::GlotzillaIntegratorListenerNative(jenv, jobj);
  *(glotzwrappers::GlotzillaIntegratorListenerNative **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_create_1GlotzillaNativeAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jobject jobj,jlong sim) {

  molesimAPI::IAPISimulation *lsim = (molesimAPI::IAPISimulation *) 0;
  lsim = *(molesimAPI::IAPISimulation **)&sim;

  jlong jresult = 0;
  glotzwrappers::GlotzillaNativeAtomPositionDefinition *result = 0 ;

  result = (glotzwrappers::GlotzillaNativeAtomPositionDefinition *)new glotzwrappers::GlotzillaNativeAtomPositionDefinition(jenv, jobj, lsim);
  *(glotzwrappers::GlotzillaNativeAtomPositionDefinition **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_glotz_wrapper_testJNI_create_1GlotzillaSimulationListenerNative(JNIEnv *jenv, jclass jcls, jobject jobj) {


  jlong jresult = 0;
  glotzwrappers::GlotzillaSimulationListenerNative *result = 0 ;

  result = (glotzwrappers::GlotzillaSimulationListenerNative *)new glotzwrappers::GlotzillaSimulationListenerNative(jenv, jobj);
  *(glotzwrappers::GlotzillaSimulationListenerNative **)&jresult = result;

  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomPositionDefinition_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  glotzwrappers::GlotzillaInterfaceAtomPositionDefinition *arg1 = (glotzwrappers::GlotzillaInterfaceAtomPositionDefinition *) 0;
  int instanceType;

  arg1 = *(glotzwrappers::GlotzillaInterfaceAtomPositionDefinition **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaAtomPositionDefinition)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaAtomPositionDefinitionSimple)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaNativeAtomPositionDefinition)) {
    instanceType = 2;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaAtomType_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaAtomType)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaAtomTypeSphere)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBondFene_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIPotential **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaBondFene)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaBondHarmonic)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialDzugutov)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotential)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialLJ)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialTwelveSixLj)) {
    instanceType = 5;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialWCA)) {
    instanceType = 6;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSpring)) {
    instanceType = 7;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoundary_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaBoundary)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaBoundaryPeriodic)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaBoxEvent_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIBoxEvent *arg1 = (molesimAPI::IAPIBoxEvent *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIBoxEvent **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaBoxAtomEvent)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaBoxAtomIndexEvent)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaBoxEvent)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(GlotzillaBoxIndexEvent)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(GlotzillaBoxMoleculeCountEvent)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(GlotzillaBoxMoleculeEvent)) {
    instanceType = 5;
  }
  else if(typeid(*arg1) == typeid(GlotzillaBoxMoleculeIndexEvent)) {
    instanceType = 6;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegrator_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaIntegratorEuler)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaIntegrator)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaIntegratorLeapFrog)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(GlotzillaIntegratorVelocityVerlet)) {
    instanceType = 3;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaIntegratorListener_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaIntegratorListener)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaIntegratorListenerNative)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaMolecule_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaMolecule)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaMonatomicMolecule)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPolymer)) {
    instanceType = 2;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaPotentialMaster_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIPotentialMaster *arg1 = (molesimAPI::IAPIPotentialMaster *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIPotentialMaster **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaPotentialMasterBruteForce)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterBruteForceShifted)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterCellForce)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterCellForceMulti)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterCellForceShifted)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMaster)) {
    instanceType = 5;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterVerletCellForce)) {
    instanceType = 6;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterVerletCellForceMulti)) {
    instanceType = 7;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterVerletCellForceMultiShifted)) {
    instanceType = 8;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterVerletCellForceShifted)) {
    instanceType = 9;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterVerletForce)) {
    instanceType = 10;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterVerletForceMulti)) {
    instanceType = 11;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterVerletForceMultiShifted)) {
    instanceType = 12;
  }
  else if(typeid(*arg1) == typeid(GlotzillaPotentialMasterVerletForceShifted)) {
    instanceType = 13;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSimulationEvent_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPISimulationEvent *arg1 = (molesimAPI::IAPISimulationEvent *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPISimulationEvent **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaSimulationAtomTypeEvent)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSimulationAtomTypeIndexEvent)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSimulationBoxEvent)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSimulationEvent)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSimulationIndexEvent)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSimulationSpeciesEvent)) {
    instanceType = 5;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSimulationSpeciesIndexEvent)) {
    instanceType = 6;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaSpecies_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPISpecies **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaSpecies)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSpeciesSpheresMono)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaSpeciesSpheresPolymer)) {
    instanceType = 2;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_glotz_wrapper_testJNI_GlotzillaVector_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIVector **)&jarg1;

  if(typeid(*arg1) == typeid(GlotzillaVector2D)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(GlotzillaVector3D)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(GlotzillaVector)) {
    instanceType = 2;
  }

  jresult = (jint)instanceType;
  return jresult;
}

#ifdef __cplusplus
}
#endif

