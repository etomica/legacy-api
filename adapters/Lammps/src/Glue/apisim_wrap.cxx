/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "lammps.h"
#include "library.h"
#include "atom.h"
#include "group.h"
#include "IAPIFunction.h"
#include "IAPIVector.h"
#include "IAPIVectorMutable.h"
#include "IAPIAtom.h"
#include "IAPIAtomList.h"
#include "IAPIMoleculeList.h"
#include "IAPIElement.h"
#include "IAPIAtomType.h"
#include "IAPIAtomTypeSphere.h"
#include "IAPIBoundaryEvent.h"
#include "IAPIBoundaryListener.h"
#include "IAPIBoundaryEventManager.h"
#include "IAPIBoundary.h"
#include "IAPIBoxEvent.h"
#include "IAPIBoxAtomEvent.h"
#include "IAPIBoxAtomIndexEvent.h"
#include "IAPIBoxIndexEvent.h"
#include "IAPIBoxMoleculeEvent.h"
#include "IAPIBoxMoleculeCountEvent.h"
#include "IAPIBoxMoleculeIndexEvent.h"
#include "IAPIBoxListener.h"
#include "IAPIBoxEventManager.h"
#include "IAPIBox.h"
#include "IAPIIntegratorEvent.h"
#include "IAPIIntegratorListener.h"
#include "IAPIIntegratorEventManager.h"
#include "IAPIIntegrator.h"
#include "IAPIMolecule.h"
#include "IAPIPotential.h"
#include "IAPIPotentialAtomic.h"
#include "IAPIPotentialMaster.h"
#include "IAPIRandom.h"
#include "IAPISpecies.h"
#include "IAPISimulationEvent.h"
#include "IAPISimulationAtomTypeEvent.h"
#include "IAPISimulationSpeciesEvent.h"
#include "IAPISimulationAtomTypeIndexEvent.h"
#include "IAPISimulationSpeciesIndexEvent.h"
#include "IAPISimulationBoxEvent.h"
#include "IAPISimulationIndexEvent.h"
#include "IAPISimulationListener.h"
#include "IAPISimulationEventManager.h"
#include "IAPISimulation.h"
#include "LammpsInterfaceConformation.h"
#include "LammpsInterfaceAtomPositionDefinition.h"
#include "LammpsTemperatureRescale.h"
#include "LammpsMomentum.h"
#include "LammpsNPH.h"
#include "LammpsNPT.h"
#include "LammpsNPTAsphere.h"
#include "LammpsNPTSphere.h"
#include "LammpsNVE.h"
#include "LammpsNVEAsphere.h"
#include "LammpsNVESphere.h"
#include "LammpsNVELimit.h"
#include "LammpsNVENoforce.h"
#include "LammpsNVT.h"
#include "LammpsNVTAsphere.h"
#include "LammpsNVTSphere.h"
#include "LammpsNVTSllod.h"
#include "LammpsAtom.h"
#include "LammpsBoundary.h"
#include "LammpsBox.h"
#include "LammpsBoxEventManager.h"
#include "LammpsMolecule.h"
#include "LammpsSpeciesManager.h"
#include "LammpsSimulationEvent.h"
#include "LammpsSimulationBoxEvent.h"
#include "LammpsSimulationSpeciesEvent.h"
#include "LammpsSimulationSpeciesIndexEvent.h"
#include "LammpsSimulationIndexEvent.h"
#include "LammpsSimulationAtomTypeEvent.h"
#include "LammpsSimulationAtomTypeIndexEvent.h"
#include "LammpsSimulationListenerNative.h"
#include "LammpsSimulationEventManager.h"
#include "LammpsSimulation.h"
#include "LammpsAtomList.h"
#include "LammpsMoleculeList.h"
#include "LammpsVector.h"
#include "LammpsVector2D.h"
#include "LammpsVector3D.h"
#include "LammpsAtomType.h"
#include "LammpsAtomTypeSphere.h"
#include "LammpsConformation.h"
#include "LammpsNativeConformation.h"
#include "LammpsSpecies.h"
#include "LammpsSpeciesSpheres.h"
#include "LammpsBoundaryPeriodic.h"
#include "LammpsBoundaryFixed.h"
#include "LammpsBoundaryShrink.h"
#include "LammpsBoundaryShrinkMin.h"
#include "LammpsBoundaryCustom.h"
#include "LammpsBoundaryDeformable.h"
#include "LammpsAtomPositionDefinition.h"
#include "LammpsNativeAtomPositionDefinition.h"
#include "LammpsRandom.h"
#include "LammpsIntegratorEventManager.h"
#include "LammpsIntegratorListenerNative.h"
#include "LammpsIntegrator.h"
#include "LammpsIntegratorRespa.h"
#include "LammpsIntegratorVerlet.h"
#include "PotentialGroup.h"
#include "LammpsPotential.h"
#include "LammpsPair.h"
#include "LammpsBondHarmonic.h"
#include "LammpsBondFene.h"
#include "LammpsBondFeneExpand.h"
#include "LammpsBondMorse.h"
#include "LammpsBondClass2.h"
#include "LammpsBondNonlinear.h"
#include "LammpsBondQuartic.h"
#include "LammpsPairLennardJonesCutoff.h"
#include "LammpsPairLennardJonesCutoffCoulombCutoff.h"
#include "LammpsPairLennardJonesExpand.h"
#include "LammpsPairMorse.h"
#include "LammpsPairDPD.h"
#include "LammpsPairColloid.h"
#include "LammpsPairMeam.h"
#include "LammpsPairBuck.h"
#include "LammpsPairTable.h"
#include "LammpsPotentialMaster.h"
#include "LammpsNeighborList.h"
#include "LammpsNeighborListBin.h"
#include "LammpsNeighborListMulti.h"
#include "LammpsNeighborListNsq.h"
#include "LammpsLattice.h"
#include "LammpsLatticeHex.h"
#include "LammpsLatticeSQ.h"
#include "LammpsLatticeSQ2.h"
#include "LammpsLatticeSC.h"
#include "LammpsLatticeBCC.h"
#include "LammpsLatticeFCC.h"
#include "LammpsLatticeHCP.h"
#include "LammpsLatticeDiamond.h"
#include "LammpsRegion.h"
#include "LammpsRegionBlock.h"
#include "LammpsRegionPrism.h"
#include "LammpsRegionSphere.h"

using namespace lammpswrappers;
using namespace molesimAPI;


#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIFunction_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIFunction *arg1 = (molesimAPI::IAPIFunction *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIFunction **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->f(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIFunction *arg1 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIFunction **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIVector_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIVectorMutable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIVectorMutable_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIAtom_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIAtom_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIAtom_1setLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeafIndex(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIAtom_1getLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (int)(arg1)->getLeafIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIAtom_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->setParent(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIAtom_1getParentGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getParentGroup();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIAtom_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIAtom_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getPosition();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIAtomList_1getAtomCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  result = (int)(arg1)->getAtomCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIAtomList_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom(arg2);
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIAtomList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIMoleculeList_1getMoleculeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  result = (int)(arg1)->getMoleculeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIMoleculeList_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule(arg2);
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIMoleculeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIElement_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIElement_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_IAPIElement_1getSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (char *)(arg1)->getSymbol();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1setSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->setSpecies(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1setChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChildIndex(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1getChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (int)(arg1)->getChildIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIAtomType_1getElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (molesimAPI::IAPIElement *)(arg1)->getElement();
  *(molesimAPI::IAPIElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIAtomTypeSphere_1setDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDiameter(arg2);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIAtomTypeSphere_1getDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  result = (double)(arg1)->getDiameter();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIAtomTypeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoundaryEvent_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundaryEvent *arg1 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEvent **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoundaryEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryEvent *arg1 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoundaryListener_1boundaryInflate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryListener *arg1 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  molesimAPI::IAPIBoundaryEvent *arg2 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryEvent **)&jarg2; 
  (arg1)->boundaryInflate(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoundaryListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryListener *arg1 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoundaryEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundaryListener *arg2 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoundaryEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundaryListener *arg2 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoundaryEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1getBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getBoxSize();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1setBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setBoxSize(arg2);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (double)(arg1)->volume();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getCenter();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoundary_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBoundaryEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBoundaryEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoundaryEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoxAtomEvent_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxAtomEvent *arg1 = (molesimAPI::IAPIBoxAtomEvent *) 0 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom();
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxAtomEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxAtomEvent *arg1 = (molesimAPI::IAPIBoxAtomEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxEvent *arg1 = (molesimAPI::IAPIBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxEvent *arg1 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIBoxAtomIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxAtomIndexEvent *arg1 = (molesimAPI::IAPIBoxAtomIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxAtomIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxAtomIndexEvent *arg1 = (molesimAPI::IAPIBoxAtomIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIBoxIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxIndexEvent *arg1 = (molesimAPI::IAPIBoxIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxIndexEvent *arg1 = (molesimAPI::IAPIBoxIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoxMoleculeEvent_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeEvent *arg1 = (molesimAPI::IAPIBoxMoleculeEvent *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxMoleculeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeEvent *arg1 = (molesimAPI::IAPIBoxMoleculeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBoxMoleculeCountEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIBoxMoleculeCountEvent_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  result = (int)(arg1)->getCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxMoleculeCountEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIBoxMoleculeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeIndexEvent *arg1 = (molesimAPI::IAPIBoxMoleculeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxMoleculeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeIndexEvent *arg1 = (molesimAPI::IAPIBoxMoleculeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxAtomAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomAdded(dynamic_cast<IAPIBoxAtomEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxAtomRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomRemoved(dynamic_cast<IAPIBoxAtomEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxMoleculeAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeAdded(dynamic_cast<IAPIBoxMoleculeEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxMoleculeRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeRemoved(dynamic_cast<IAPIBoxMoleculeEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxGlobalAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxGlobalAtomLeafIndexChanged(dynamic_cast<IAPIBoxIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxGlobalAtomIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxGlobalAtomIndexChanged(dynamic_cast<IAPIBoxIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomLeafIndexChanged(dynamic_cast<IAPIBoxAtomIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxMoleculeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeIndexChanged(dynamic_cast<IAPIBoxMoleculeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxListener_1boxNumberMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxNumberMolecules(dynamic_cast<IAPIBoxMoleculeCountEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBoxEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBoxEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1setNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setNMolecules(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1getNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (int)(arg1)->getNMolecules(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1getMoleculeList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList(arg2);
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1getMoleculeList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList();
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1getLeafList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getLeafList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1setBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoundary *arg2 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundary **)&jarg2; 
  (arg1)->setBoundary(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIBoxEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1addSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIBox_1removeSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIIntegratorEvent_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegratorEvent *arg1 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEvent **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIIntegratorEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorEvent *arg1 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIIntegratorListener_1integratorInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorInitialized(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIIntegratorListener_1integratorStepStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepStarted(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIIntegratorListener_1integratorStepFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepFinished(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIIntegratorListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIIntegratorEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIIntegratorEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIIntegratorEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIIntegrator_1doStep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->doStep();
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIIntegrator_1getStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  result = (long long)(arg1)->getStepCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIIntegrator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIIntegrator_1resetStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->resetStepCount();
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIIntegrator_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  molesimAPI::IAPIIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  result = (molesimAPI::IAPIIntegratorEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIMolecule_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIMolecule_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIMolecule_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIMolecule_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIMolecule_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPIMolecule_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getType();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIPotential_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIPotential_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIPotential_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIPotentialAtomic_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIPotentialAtomic *arg1 = (molesimAPI::IAPIPotentialAtomic *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialAtomic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIPotentialAtomic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotentialAtomic *arg1 = (molesimAPI::IAPIPotentialAtomic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialAtomic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPIPotentialMaster_1addPotential(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  molesimAPI::IAPIPotentialMaster *arg1 = (molesimAPI::IAPIPotentialMaster *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPIAtomType *arg3 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIAtomType *arg4 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotentialAtomic **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtomType **)&jarg3; 
  arg4 = *(molesimAPI::IAPIAtomType **)&jarg4; 
  (arg1)->addPotential(dynamic_cast<IAPIPotentialAtomic *>(arg2),arg3,arg4);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIPotentialMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotentialMaster *arg1 = (molesimAPI::IAPIPotentialMaster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialMaster **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIRandom_1nextDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  result = (double)(arg1)->nextDouble();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPIRandom_1nextInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->nextInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_IAPIRandom_1nextGaussian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  result = (double)(arg1)->nextGaussian();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPIRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPISpecies_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISpecies_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISpecies_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPISpecies_1getAtomTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (int)(arg1)->getAtomTypeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISpecies_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType(arg2);
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISpecies_1initializeConformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->initializeConformation(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulationEvent_1getSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationEvent *arg1 = (molesimAPI::IAPISimulationEvent *) 0 ;
  molesimAPI::IAPISimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEvent **)&jarg1; 
  result = (molesimAPI::IAPISimulation *)(arg1)->getSimulation();
  *(molesimAPI::IAPISimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationEvent *arg1 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulationAtomTypeEvent_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationAtomTypeEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeEvent *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationAtomTypeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationAtomTypeEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulationSpeciesEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationSpeciesEvent *arg1 = (molesimAPI::IAPISimulationSpeciesEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationSpeciesEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationSpeciesEvent *arg1 = (molesimAPI::IAPISimulationSpeciesEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPISimulationAtomTypeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationAtomTypeIndexEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationAtomTypeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationAtomTypeIndexEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPISimulationSpeciesIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationSpeciesIndexEvent *arg1 = (molesimAPI::IAPISimulationSpeciesIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationSpeciesIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationSpeciesIndexEvent *arg1 = (molesimAPI::IAPISimulationSpeciesIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulationBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationBoxEvent *arg1 = (molesimAPI::IAPISimulationBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationBoxEvent *arg1 = (molesimAPI::IAPISimulationBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPISimulationIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationIndexEvent *arg1 = (molesimAPI::IAPISimulationIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationIndexEvent *arg1 = (molesimAPI::IAPISimulationIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationListener_1simulationBoxAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxAdded(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationListener_1simulationBoxRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxRemoved(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationListener_1simulationSpeciesAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesAdded(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationListener_1simulationSpeciesRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesRemoved(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationListener_1simulationSpeciesIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesIndexChanged(dynamic_cast<IAPISimulationSpeciesIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationListener_1simulationSpeciesMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationListener_1simulationAtomTypeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeIndexChanged(dynamic_cast<IAPISimulationAtomTypeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationListener_1simulationAtomTypeMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulationEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulationEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1addBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->addBox(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1removeBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->removeBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1getBoxCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (int)(arg1)->getBoxCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox(arg2);
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1getRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPIRandom *)(arg1)->getRandom();
  *(molesimAPI::IAPIRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_IAPISimulation_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPISimulationEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPISimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1IAPISimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsInterfaceConformation_1initializePositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsInterfaceConformation *arg1 = (lammpswrappers::LammpsInterfaceConformation *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsInterfaceConformation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  (arg1)->initializePositions(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsInterfaceConformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsInterfaceConformation *arg1 = (lammpswrappers::LammpsInterfaceConformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsInterfaceConformation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsInterfaceAtomPositionDefinition_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsInterfaceAtomPositionDefinition *arg1 = (lammpswrappers::LammpsInterfaceAtomPositionDefinition *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsInterfaceAtomPositionDefinition **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsInterfaceAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsInterfaceAtomPositionDefinition *arg1 = (lammpswrappers::LammpsInterfaceAtomPositionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsInterfaceAtomPositionDefinition **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsSimulationEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsSimulationEvent *)new lammpswrappers::LammpsSimulationEvent(arg1);
  *(lammpswrappers::LammpsSimulationEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationEvent_1getSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulationEvent *arg1 = (lammpswrappers::LammpsSimulationEvent *) 0 ;
  molesimAPI::IAPISimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationEvent **)&jarg1; 
  result = (molesimAPI::IAPISimulation *)(arg1)->getSimulation();
  *(molesimAPI::IAPISimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationEvent *arg1 = (lammpswrappers::LammpsSimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  lammpswrappers::LammpsSimulationBoxEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  result = (lammpswrappers::LammpsSimulationBoxEvent *)new lammpswrappers::LammpsSimulationBoxEvent(arg1,arg2);
  *(lammpswrappers::LammpsSimulationBoxEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulationBoxEvent *arg1 = (lammpswrappers::LammpsSimulationBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationBoxEvent *arg1 = (lammpswrappers::LammpsSimulationBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationSpeciesEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  lammpswrappers::LammpsSimulationSpeciesEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (lammpswrappers::LammpsSimulationSpeciesEvent *)new lammpswrappers::LammpsSimulationSpeciesEvent(arg1,arg2);
  *(lammpswrappers::LammpsSimulationSpeciesEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationSpeciesEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulationSpeciesEvent *arg1 = (lammpswrappers::LammpsSimulationSpeciesEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationSpeciesEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationSpeciesEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationSpeciesEvent *arg1 = (lammpswrappers::LammpsSimulationSpeciesEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationSpeciesEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationSpeciesIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int arg3 ;
  lammpswrappers::LammpsSimulationSpeciesIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (lammpswrappers::LammpsSimulationSpeciesIndexEvent *)new lammpswrappers::LammpsSimulationSpeciesIndexEvent(arg1,arg2,arg3);
  *(lammpswrappers::LammpsSimulationSpeciesIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationSpeciesIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSimulationSpeciesIndexEvent *arg1 = (lammpswrappers::LammpsSimulationSpeciesIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationSpeciesIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationSpeciesIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationSpeciesIndexEvent *arg1 = (lammpswrappers::LammpsSimulationSpeciesIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationSpeciesIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  lammpswrappers::LammpsSimulationIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (lammpswrappers::LammpsSimulationIndexEvent *)new lammpswrappers::LammpsSimulationIndexEvent(arg1,arg2);
  *(lammpswrappers::LammpsSimulationIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSimulationIndexEvent *arg1 = (lammpswrappers::LammpsSimulationIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationIndexEvent *arg1 = (lammpswrappers::LammpsSimulationIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationAtomTypeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  lammpswrappers::LammpsSimulationAtomTypeEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  result = (lammpswrappers::LammpsSimulationAtomTypeEvent *)new lammpswrappers::LammpsSimulationAtomTypeEvent(arg1,arg2);
  *(lammpswrappers::LammpsSimulationAtomTypeEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationAtomTypeEvent_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulationAtomTypeEvent *arg1 = (lammpswrappers::LammpsSimulationAtomTypeEvent *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationAtomTypeEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationAtomTypeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationAtomTypeEvent *arg1 = (lammpswrappers::LammpsSimulationAtomTypeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationAtomTypeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationAtomTypeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg3 ;
  lammpswrappers::LammpsSimulationAtomTypeIndexEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (lammpswrappers::LammpsSimulationAtomTypeIndexEvent *)new lammpswrappers::LammpsSimulationAtomTypeIndexEvent(arg1,arg2,arg3);
  *(lammpswrappers::LammpsSimulationAtomTypeIndexEvent **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationAtomTypeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSimulationAtomTypeIndexEvent *arg1 = (lammpswrappers::LammpsSimulationAtomTypeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationAtomTypeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationAtomTypeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationAtomTypeIndexEvent *arg1 = (lammpswrappers::LammpsSimulationAtomTypeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationAtomTypeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  lammpswrappers::LammpsSimulationListenerNative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  result = (lammpswrappers::LammpsSimulationListenerNative *)new lammpswrappers::LammpsSimulationListenerNative(arg1,arg2);
  *(lammpswrappers::LammpsSimulationListenerNative **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationListenerNative_1simulationBoxAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxAdded(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationListenerNative_1simulationBoxRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxRemoved(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationListenerNative_1simulationSpeciesAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesAdded(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationListenerNative_1simulationSpeciesRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesRemoved(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationListenerNative_1simulationSpeciesIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesIndexChanged(dynamic_cast<IAPISimulationSpeciesIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationListenerNative_1simulationSpeciesMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationListenerNative_1simulationAtomTypeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeIndexChanged(dynamic_cast<IAPISimulationAtomTypeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationListenerNative_1simulationAtomTypeMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationListenerNative *arg1 = (lammpswrappers::LammpsSimulationListenerNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationEventManager *arg1 = (lammpswrappers::LammpsSimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulationEventManager *arg1 = (lammpswrappers::LammpsSimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulationEventManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsSimulationEventManager *)new lammpswrappers::LammpsSimulationEventManager();
  *(lammpswrappers::LammpsSimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulationEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulationEventManager *arg1 = (lammpswrappers::LammpsSimulationEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulationEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSimulation(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsSimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsSimulation *)new lammpswrappers::LammpsSimulation(arg1);
  *(lammpswrappers::LammpsSimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1addBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->addBox(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1removeBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->removeBox(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  molesimAPI::IAPIRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (molesimAPI::IAPIRandom *)(arg1)->getRandom();
  *(molesimAPI::IAPIRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  molesimAPI::IAPISimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (molesimAPI::IAPISimulationEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPISimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getBoxCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (int)(arg1)->getBoxCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox(arg2);
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1setUnitStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setUnitStyle(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1setAtomStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setAtomStyle(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getTemp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (double)(arg1)->getTemp();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getKE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (double)(arg1)->getKE();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getPE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (double)(arg1)->getPE();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getTotalEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (double)(arg1)->getTotalEnergy();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getSpace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  LammpsSpace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (LammpsSpace *)(arg1)->getSpace();
  *(LammpsSpace **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1setIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  molesimAPI::IAPIIntegrator *arg2 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegrator **)&jarg2; 
  (arg1)->setIntegrator(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getLammpsSim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  LAMMPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (LAMMPS *)(arg1)->getLammpsSim();
  *(LAMMPS **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setState(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (int)(arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getMoleculeIDMgr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  IDManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (IDManager *)(arg1)->getMoleculeIDMgr();
  *(IDManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getFixIDMgr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  IDManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (IDManager *)(arg1)->getFixIDMgr();
  *(IDManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1getRegionIDMgr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  IDManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  result = (IDManager *)(arg1)->getRegionIDMgr();
  *(IDManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSimulation *arg1 = (lammpswrappers::LammpsSimulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSimulation **)&jarg1; 
  (arg1)->lammpsSetup();
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1UNINITIALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsSimulation::UNINITIALIZED;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1CREATING_1ATOMS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsSimulation::CREATING_ATOMS;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulation_1INITIALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsSimulation::INITIALIZED;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsTemperatureRescale(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  lammpswrappers::LammpsTemperatureRescale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (lammpswrappers::LammpsTemperatureRescale *)new lammpswrappers::LammpsTemperatureRescale(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsTemperatureRescale **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsTemperatureRescale_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  lammpswrappers::LammpsTemperatureRescale *arg1 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setState(arg2);
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsTemperatureRescale_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsTemperatureRescale *arg1 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg1; 
  result = (bool)(arg1)->getState();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsTemperatureRescale_1getSteps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsTemperatureRescale *arg1 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg1; 
  result = (int)(arg1)->getSteps();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsTemperatureRescale_1getStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsTemperatureRescale *arg1 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg1; 
  result = (double)(arg1)->getStart();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsTemperatureRescale_1getStop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsTemperatureRescale *arg1 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg1; 
  result = (double)(arg1)->getStop();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsTemperatureRescale_1getWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsTemperatureRescale *arg1 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg1; 
  result = (double)(arg1)->getWindow();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsTemperatureRescale_1getFraction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsTemperatureRescale *arg1 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg1; 
  result = (double)(arg1)->getFraction();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsTemperatureRescale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsTemperatureRescale *arg1 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsMomentum(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  lammpswrappers::LammpsMomentum *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (lammpswrappers::LammpsMomentum *)new lammpswrappers::LammpsMomentum(arg1,arg2);
  *(lammpswrappers::LammpsMomentum **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setState(arg2);
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  result = (bool)(arg1)->getState();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1setLinearFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4) {
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setLinearFlags(arg2,arg3,arg4);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1getXLinearFlag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  result = (int)(arg1)->getXLinearFlag();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1getYLinearFlag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  result = (int)(arg1)->getYLinearFlag();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1getZLinearFlag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  result = (int)(arg1)->getZLinearFlag();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1getSteps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  result = (int)(arg1)->getSteps();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  result = (int)(arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1LINEAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsMomentum::LINEAR;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMomentum_1ANGULAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsMomentum::ANGULAR;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsMomentum(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsMomentum *arg1 = (lammpswrappers::LammpsMomentum *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMomentum **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNPH(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsNPH *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsNPH *)new lammpswrappers::LammpsNPH();
  *(lammpswrappers::LammpsNPH **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsNPH_1getFixType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsNPH *arg1 = (lammpswrappers::LammpsNPH *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPH **)&jarg1; 
  result = (char *)(arg1)->getFixType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNPH(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNPH *arg1 = (lammpswrappers::LammpsNPH *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPH **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNPT(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  lammpswrappers::LammpsNPT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (lammpswrappers::LammpsNPT *)new lammpswrappers::LammpsNPT(arg1,arg2,arg3);
  *(lammpswrappers::LammpsNPT **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsNPT_1getStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsNPT *arg1 = (lammpswrappers::LammpsNPT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPT **)&jarg1; 
  result = (double)(arg1)->getStart();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsNPT_1getStop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsNPT *arg1 = (lammpswrappers::LammpsNPT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPT **)&jarg1; 
  result = (double)(arg1)->getStop();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsNPT_1getDamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsNPT *arg1 = (lammpswrappers::LammpsNPT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPT **)&jarg1; 
  result = (double)(arg1)->getDamp();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsNPT_1getFixType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsNPT *arg1 = (lammpswrappers::LammpsNPT *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPT **)&jarg1; 
  result = (char *)(arg1)->getFixType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNPT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNPT *arg1 = (lammpswrappers::LammpsNPT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPT **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNPTAsphere(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  lammpswrappers::LammpsNPTAsphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (lammpswrappers::LammpsNPTAsphere *)new lammpswrappers::LammpsNPTAsphere(arg1,arg2,arg3);
  *(lammpswrappers::LammpsNPTAsphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNPTAsphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNPTAsphere *arg1 = (lammpswrappers::LammpsNPTAsphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPTAsphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNPTSphere(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  lammpswrappers::LammpsNPTSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (lammpswrappers::LammpsNPTSphere *)new lammpswrappers::LammpsNPTSphere(arg1,arg2,arg3);
  *(lammpswrappers::LammpsNPTSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNPTSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNPTSphere *arg1 = (lammpswrappers::LammpsNPTSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNPTSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsNVE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsNVE *)new lammpswrappers::LammpsNVE();
  *(lammpswrappers::LammpsNVE **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsNVE_1getFixType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsNVE *arg1 = (lammpswrappers::LammpsNVE *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVE **)&jarg1; 
  result = (char *)(arg1)->getFixType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVE *arg1 = (lammpswrappers::LammpsNVE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVE **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVEAsphere(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsNVEAsphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsNVEAsphere *)new lammpswrappers::LammpsNVEAsphere();
  *(lammpswrappers::LammpsNVEAsphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVEAsphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVEAsphere *arg1 = (lammpswrappers::LammpsNVEAsphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVEAsphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVESphere(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsNVESphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsNVESphere *)new lammpswrappers::LammpsNVESphere();
  *(lammpswrappers::LammpsNVESphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVESphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVESphere *arg1 = (lammpswrappers::LammpsNVESphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVESphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVELimit(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsNVELimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsNVELimit *)new lammpswrappers::LammpsNVELimit();
  *(lammpswrappers::LammpsNVELimit **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVELimit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVELimit *arg1 = (lammpswrappers::LammpsNVELimit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVELimit **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVENoforce(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsNVENoforce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsNVENoforce *)new lammpswrappers::LammpsNVENoforce();
  *(lammpswrappers::LammpsNVENoforce **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVENoforce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVENoforce *arg1 = (lammpswrappers::LammpsNVENoforce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVENoforce **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsNVT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsNVT *)new lammpswrappers::LammpsNVT(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsNVT **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVT_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jint jarg5) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  lammpswrappers::LammpsNVT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  result = (lammpswrappers::LammpsNVT *)new lammpswrappers::LammpsNVT(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsNVT **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsNVT_1getStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsNVT *arg1 = (lammpswrappers::LammpsNVT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVT **)&jarg1; 
  result = (double)(arg1)->getStart();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsNVT_1getStop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsNVT *arg1 = (lammpswrappers::LammpsNVT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVT **)&jarg1; 
  result = (double)(arg1)->getStop();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsNVT_1getDamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsNVT *arg1 = (lammpswrappers::LammpsNVT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVT **)&jarg1; 
  result = (double)(arg1)->getDamp();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsNVT_1getDrag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsNVT *arg1 = (lammpswrappers::LammpsNVT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVT **)&jarg1; 
  result = (double)(arg1)->getDrag();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsNVT_1useDOF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsNVT *arg1 = (lammpswrappers::LammpsNVT *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVT **)&jarg1; 
  result = (bool)(arg1)->useDOF();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsNVT_1getDOF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsNVT *arg1 = (lammpswrappers::LammpsNVT *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVT **)&jarg1; 
  result = (int)(arg1)->getDOF();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsNVT_1getFixType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsNVT *arg1 = (lammpswrappers::LammpsNVT *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVT **)&jarg1; 
  result = (char *)(arg1)->getFixType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVT *arg1 = (lammpswrappers::LammpsNVT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVT **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVTAsphere(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsNVTAsphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsNVTAsphere *)new lammpswrappers::LammpsNVTAsphere(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsNVTAsphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVTAsphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVTAsphere *arg1 = (lammpswrappers::LammpsNVTAsphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVTAsphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVTSphere(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsNVTSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsNVTSphere *)new lammpswrappers::LammpsNVTSphere(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsNVTSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVTSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVTSphere *arg1 = (lammpswrappers::LammpsNVTSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVTSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNVTSllod(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsNVTSllod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsNVTSllod *)new lammpswrappers::LammpsNVTSllod(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsNVTSllod **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNVTSllod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNVTSllod *arg1 = (lammpswrappers::LammpsNVTSllod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNVTSllod **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsAtom *)new lammpswrappers::LammpsAtom(arg1);
  *(lammpswrappers::LammpsAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  lammpswrappers::LammpsAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  result = (lammpswrappers::LammpsAtom *)new lammpswrappers::LammpsAtom(arg1,arg2);
  *(lammpswrappers::LammpsAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtom_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsAtom *)new lammpswrappers::LammpsAtom(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtom_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  molesimAPI::IAPIAtomType *arg5 = (molesimAPI::IAPIAtomType *) 0 ;
  lammpswrappers::LammpsAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(molesimAPI::IAPIAtomType **)&jarg5; 
  result = (lammpswrappers::LammpsAtom *)new lammpswrappers::LammpsAtom(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtom_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  lammpswrappers::LammpsAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (lammpswrappers::LammpsAtom *)new lammpswrappers::LammpsAtom(arg1,arg2);
  *(lammpswrappers::LammpsAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtom_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIAtomType *arg3 = (molesimAPI::IAPIAtomType *) 0 ;
  lammpswrappers::LammpsAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtomType **)&jarg3; 
  result = (lammpswrappers::LammpsAtom *)new lammpswrappers::LammpsAtom(arg1,arg2,arg3);
  *(lammpswrappers::LammpsAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtom_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg3 ;
  lammpswrappers::LammpsAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (lammpswrappers::LammpsAtom *)new lammpswrappers::LammpsAtom(arg1,arg2,arg3);
  *(lammpswrappers::LammpsAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1setLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeafIndex(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1getLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  result = (int)(arg1)->getLeafIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->setParent(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1getParentGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getParentGroup();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getPosition();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getVelocity();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtom_1getForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getForce();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsAtom *arg1 = (lammpswrappers::LammpsAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1getBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getBoxSize();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1setBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setBoxSize(arg2);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  result = (double)(arg1)->volume();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getCenter();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  molesimAPI::IAPIBoundaryEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBoundaryEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoundaryEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  (arg1)->lammpsSetup();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundary *arg1 = (lammpswrappers::LammpsBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundary **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1setNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setNMolecules(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1getNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (int)(arg1)->getNMolecules(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1getMoleculeList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList(arg2);
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1getMoleculeList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList();
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1getLeafList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getLeafList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1setBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPIBoundary *arg2 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundary **)&jarg2; 
  (arg1)->setBoundary(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPIBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  result = (molesimAPI::IAPIBoxEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1addSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1removeSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpeciesNotify(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBox_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsBox *)lammpswrappers::LammpsBox::instance(arg1);
  *(lammpswrappers::LammpsBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBox *arg1 = (lammpswrappers::LammpsBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBox **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoxEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBoxEventManager *arg1 = (lammpswrappers::LammpsBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoxEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBoxEventManager *arg1 = (lammpswrappers::LammpsBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBoxEventManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsBoxEventManager *)new lammpswrappers::LammpsBoxEventManager();
  *(lammpswrappers::LammpsBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBoxEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoxEventManager *arg1 = (lammpswrappers::LammpsBoxEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoxEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  lammpswrappers::LammpsMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (lammpswrappers::LammpsMolecule *)new lammpswrappers::LammpsMolecule(arg1,arg2);
  *(lammpswrappers::LammpsMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMolecule_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsMolecule *arg1 = (lammpswrappers::LammpsMolecule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMolecule **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMolecule_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsMolecule *arg1 = (lammpswrappers::LammpsMolecule *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMolecule **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMolecule_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsMolecule *arg1 = (lammpswrappers::LammpsMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMolecule_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsMolecule *arg1 = (lammpswrappers::LammpsMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsMolecule_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsMolecule *arg1 = (lammpswrappers::LammpsMolecule *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMolecule **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsMolecule_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsMolecule *arg1 = (lammpswrappers::LammpsMolecule *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMolecule **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getType();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMolecule_1setVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsMolecule *arg1 = (lammpswrappers::LammpsMolecule *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setVelocity(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsMolecule *arg1 = (lammpswrappers::LammpsMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMolecule **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSpeciesManager_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSpeciesManager *arg1 = (lammpswrappers::LammpsSpeciesManager *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSpeciesManager_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSpeciesManager *arg1 = (lammpswrappers::LammpsSpeciesManager *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSpeciesManager_1boxAddedNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSpeciesManager *arg1 = (lammpswrappers::LammpsSpeciesManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->boxAddedNotify(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSpeciesManager_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSpeciesManager *arg1 = (lammpswrappers::LammpsSpeciesManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesManager **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSpeciesManager_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSpeciesManager *arg1 = (lammpswrappers::LammpsSpeciesManager *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesManager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSpeciesManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSpeciesManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsSpeciesManager *)new lammpswrappers::LammpsSpeciesManager();
  *(lammpswrappers::LammpsSpeciesManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSpeciesManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSpeciesManager *arg1 = (lammpswrappers::LammpsSpeciesManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsAtomList *)new lammpswrappers::LammpsAtomList();
  *(lammpswrappers::LammpsAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsAtomList_1getAtomCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsAtomList *arg1 = (lammpswrappers::LammpsAtomList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomList **)&jarg1; 
  result = (int)(arg1)->getAtomCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtomList_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtomList *arg1 = (lammpswrappers::LammpsAtomList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom(arg2);
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtomList_1addAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsAtomList *arg1 = (lammpswrappers::LammpsAtomList *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addAtom(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtomList_1removeAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsAtomList *arg1 = (lammpswrappers::LammpsAtomList *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeAtom(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtomList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsAtomList *arg1 = (lammpswrappers::LammpsAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomList **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsAtomList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsAtomList *arg1 = (lammpswrappers::LammpsAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsMoleculeList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsMoleculeList *)new lammpswrappers::LammpsMoleculeList();
  *(lammpswrappers::LammpsMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsMoleculeList_1getMoleculeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsMoleculeList *arg1 = (lammpswrappers::LammpsMoleculeList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMoleculeList **)&jarg1; 
  result = (int)(arg1)->getMoleculeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsMoleculeList_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsMoleculeList *arg1 = (lammpswrappers::LammpsMoleculeList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMoleculeList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule(arg2);
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMoleculeList_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsMoleculeList *arg1 = (lammpswrappers::LammpsMoleculeList *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMoleculeList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMoleculeList_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsMoleculeList *arg1 = (lammpswrappers::LammpsMoleculeList *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMoleculeList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsMoleculeList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsMoleculeList *arg1 = (lammpswrappers::LammpsMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMoleculeList **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsMoleculeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsMoleculeList *arg1 = (lammpswrappers::LammpsMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsMoleculeList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1getLammpsVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  result = (double *)(arg1)->getLammpsVector();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsVector *arg1 = (lammpswrappers::LammpsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsVector2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsVector2D *)new lammpswrappers::LammpsVector2D();
  *(lammpswrappers::LammpsVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsVector2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  lammpswrappers::LammpsVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsVector2D *)new lammpswrappers::LammpsVector2D(arg1,arg2);
  *(lammpswrappers::LammpsVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsVector2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  lammpswrappers::LammpsVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  result = (lammpswrappers::LammpsVector2D *)new lammpswrappers::LammpsVector2D(arg1);
  *(lammpswrappers::LammpsVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsVector2D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  lammpswrappers::LammpsVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  result = (lammpswrappers::LammpsVector2D *)new lammpswrappers::LammpsVector2D(arg1);
  *(lammpswrappers::LammpsVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector2D_1E_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->E(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsVector2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsVector2D *arg1 = (lammpswrappers::LammpsVector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector2D **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsVector3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsVector3D *)new lammpswrappers::LammpsVector3D();
  *(lammpswrappers::LammpsVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsVector3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  lammpswrappers::LammpsVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (lammpswrappers::LammpsVector3D *)new lammpswrappers::LammpsVector3D(arg1,arg2,arg3);
  *(lammpswrappers::LammpsVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsVector3D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  lammpswrappers::LammpsVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  result = (lammpswrappers::LammpsVector3D *)new lammpswrappers::LammpsVector3D(arg1);
  *(lammpswrappers::LammpsVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsVector3D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  lammpswrappers::LammpsVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  result = (lammpswrappers::LammpsVector3D *)new lammpswrappers::LammpsVector3D(arg1);
  *(lammpswrappers::LammpsVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1E_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->E(arg2,arg3,arg4);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsVector3D_1make3DArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double *)(arg1)->make3DArray(arg2,arg3,arg4);
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsVector3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsVector3D *arg1 = (lammpswrappers::LammpsVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsVector3D **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsAtomType *)new lammpswrappers::LammpsAtomType();
  *(lammpswrappers::LammpsAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  lammpswrappers::LammpsAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (lammpswrappers::LammpsAtomType *)new lammpswrappers::LammpsAtomType(arg1);
  *(lammpswrappers::LammpsAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsAtomType *)new lammpswrappers::LammpsAtomType(arg1);
  *(lammpswrappers::LammpsAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomType_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  lammpswrappers::LammpsAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsAtomType *)new lammpswrappers::LammpsAtomType(arg1,arg2);
  *(lammpswrappers::LammpsAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1setSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->setSpecies(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1setChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChildIndex(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1getChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  result = (int)(arg1)->getChildIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1getElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  molesimAPI::IAPIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  result = (molesimAPI::IAPIElement *)(arg1)->getElement();
  *(molesimAPI::IAPIElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsAtomType *arg1 = (lammpswrappers::LammpsAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomType **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomTypeSphere_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtomTypeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsAtomTypeSphere *)new lammpswrappers::LammpsAtomTypeSphere();
  *(lammpswrappers::LammpsAtomTypeSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomTypeSphere_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  lammpswrappers::LammpsAtomTypeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (lammpswrappers::LammpsAtomTypeSphere *)new lammpswrappers::LammpsAtomTypeSphere(arg1);
  *(lammpswrappers::LammpsAtomTypeSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomTypeSphere_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsAtomTypeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsAtomTypeSphere *)new lammpswrappers::LammpsAtomTypeSphere(arg1);
  *(lammpswrappers::LammpsAtomTypeSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomTypeSphere_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  lammpswrappers::LammpsAtomTypeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsAtomTypeSphere *)new lammpswrappers::LammpsAtomTypeSphere(arg1,arg2);
  *(lammpswrappers::LammpsAtomTypeSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsAtomTypeSphere_1setDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsAtomTypeSphere *arg1 = (lammpswrappers::LammpsAtomTypeSphere *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomTypeSphere **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDiameter(arg2);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsAtomTypeSphere_1getDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsAtomTypeSphere *arg1 = (lammpswrappers::LammpsAtomTypeSphere *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomTypeSphere **)&jarg1; 
  result = (double)(arg1)->getDiameter();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsAtomTypeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsAtomTypeSphere *arg1 = (lammpswrappers::LammpsAtomTypeSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomTypeSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsConformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsConformation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsConformation *)new lammpswrappers::LammpsConformation(arg1);
  *(lammpswrappers::LammpsConformation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsConformation_1initializePositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsConformation *arg1 = (lammpswrappers::LammpsConformation *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsConformation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  (arg1)->initializePositions(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsConformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsConformation *arg1 = (lammpswrappers::LammpsConformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsConformation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNativeConformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  molesimAPI::IAPISimulation *arg3 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsNativeConformation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(molesimAPI::IAPISimulation **)&jarg3; 
  result = (lammpswrappers::LammpsNativeConformation *)new lammpswrappers::LammpsNativeConformation(arg1,arg2,arg3);
  *(lammpswrappers::LammpsNativeConformation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsNativeConformation_1initializePositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsNativeConformation *arg1 = (lammpswrappers::LammpsNativeConformation *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNativeConformation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  (arg1)->initializePositions(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNativeConformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNativeConformation *arg1 = (lammpswrappers::LammpsNativeConformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNativeConformation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSpecies_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSpecies *arg1 = (lammpswrappers::LammpsSpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpecies **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSpecies_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsSpecies *arg1 = (lammpswrappers::LammpsSpecies *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSpecies_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSpecies *arg1 = (lammpswrappers::LammpsSpecies *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpecies **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSpecies_1getAtomTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsSpecies *arg1 = (lammpswrappers::LammpsSpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpecies **)&jarg1; 
  result = (int)(arg1)->getAtomTypeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSpecies_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSpecies *arg1 = (lammpswrappers::LammpsSpecies *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType(arg2);
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSpecies_1initializeConformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsSpecies *arg1 = (lammpswrappers::LammpsSpecies *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpecies **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->initializeConformation(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSpecies *arg1 = (lammpswrappers::LammpsSpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpecies **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSpeciesSpheres_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsSpeciesSpheres *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsSpeciesSpheres *)new lammpswrappers::LammpsSpeciesSpheres(arg1);
  *(lammpswrappers::LammpsSpeciesSpheres **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsSpeciesSpheres_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsInterfaceConformation *arg2 = (lammpswrappers::LammpsInterfaceConformation *) 0 ;
  lammpswrappers::LammpsSpeciesSpheres *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(lammpswrappers::LammpsInterfaceConformation **)&jarg2; 
  result = (lammpswrappers::LammpsSpeciesSpheres *)new lammpswrappers::LammpsSpeciesSpheres(arg1,arg2);
  *(lammpswrappers::LammpsSpeciesSpheres **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSpeciesSpheres_1makeMolecule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSpeciesSpheres *arg1 = (lammpswrappers::LammpsSpeciesSpheres *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesSpheres **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsSpeciesSpheres_1addChildType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  lammpswrappers::LammpsSpeciesSpheres *arg1 = (lammpswrappers::LammpsSpeciesSpheres *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesSpheres **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addChildType(arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsSpeciesSpheres_1makeMolecule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsSpeciesSpheres *arg1 = (lammpswrappers::LammpsSpeciesSpheres *) 0 ;
  int arg2 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesSpheres **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule(arg2);
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsSpeciesSpheres(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsSpeciesSpheres *arg1 = (lammpswrappers::LammpsSpeciesSpheres *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsSpeciesSpheres **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBoundaryPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsBoundaryPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsBoundaryPeriodic *)new lammpswrappers::LammpsBoundaryPeriodic(arg1);
  *(lammpswrappers::LammpsBoundaryPeriodic **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryPeriodic_1setBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBoundaryPeriodic *arg1 = (lammpswrappers::LammpsBoundaryPeriodic *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryPeriodic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setBoxSize(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryPeriodic_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBoundaryPeriodic *arg1 = (lammpswrappers::LammpsBoundaryPeriodic *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryPeriodic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryPeriodic_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundaryPeriodic *arg1 = (lammpswrappers::LammpsBoundaryPeriodic *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryPeriodic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryPeriodic_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundaryPeriodic *arg1 = (lammpswrappers::LammpsBoundaryPeriodic *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryPeriodic **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryPeriodic_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsBoundaryPeriodic *arg1 = (lammpswrappers::LammpsBoundaryPeriodic *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryPeriodic **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryPeriodic_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryPeriodic *arg1 = (lammpswrappers::LammpsBoundaryPeriodic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryPeriodic **)&jarg1; 
  (arg1)->lammpsSetup();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBoundaryPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryPeriodic *arg1 = (lammpswrappers::LammpsBoundaryPeriodic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryPeriodic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBoundaryFixed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsBoundaryFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsBoundaryFixed *)new lammpswrappers::LammpsBoundaryFixed(arg1);
  *(lammpswrappers::LammpsBoundaryFixed **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryFixed_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundaryFixed *arg1 = (lammpswrappers::LammpsBoundaryFixed *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryFixed **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryFixed_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsBoundaryFixed *arg1 = (lammpswrappers::LammpsBoundaryFixed *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryFixed **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryFixed_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryFixed *arg1 = (lammpswrappers::LammpsBoundaryFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryFixed **)&jarg1; 
  (arg1)->lammpsSetup();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBoundaryFixed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryFixed *arg1 = (lammpswrappers::LammpsBoundaryFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryFixed **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBoundaryShrink(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsBoundaryShrink *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsBoundaryShrink *)new lammpswrappers::LammpsBoundaryShrink(arg1);
  *(lammpswrappers::LammpsBoundaryShrink **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryShrink_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundaryShrink *arg1 = (lammpswrappers::LammpsBoundaryShrink *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryShrink **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryShrink_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsBoundaryShrink *arg1 = (lammpswrappers::LammpsBoundaryShrink *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryShrink **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryShrink_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryShrink *arg1 = (lammpswrappers::LammpsBoundaryShrink *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryShrink **)&jarg1; 
  (arg1)->lammpsSetup();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBoundaryShrink(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryShrink *arg1 = (lammpswrappers::LammpsBoundaryShrink *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryShrink **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBoundaryShrinkMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsBoundaryShrinkMin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsBoundaryShrinkMin *)new lammpswrappers::LammpsBoundaryShrinkMin(arg1);
  *(lammpswrappers::LammpsBoundaryShrinkMin **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryShrinkMin_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundaryShrinkMin *arg1 = (lammpswrappers::LammpsBoundaryShrinkMin *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryShrinkMin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryShrinkMin_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsBoundaryShrinkMin *arg1 = (lammpswrappers::LammpsBoundaryShrinkMin *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryShrinkMin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryShrinkMin_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryShrinkMin *arg1 = (lammpswrappers::LammpsBoundaryShrinkMin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryShrinkMin **)&jarg1; 
  (arg1)->lammpsSetup();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBoundaryShrinkMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryShrinkMin *arg1 = (lammpswrappers::LammpsBoundaryShrinkMin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryShrinkMin **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBoundaryCustom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  lammpswrappers::LammpsBoundaryCustom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (lammpswrappers::LammpsBoundaryCustom *)new lammpswrappers::LammpsBoundaryCustom(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(lammpswrappers::LammpsBoundaryCustom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundaryCustom *arg1 = (lammpswrappers::LammpsBoundaryCustom *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryCustom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsBoundaryCustom *arg1 = (lammpswrappers::LammpsBoundaryCustom *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryCustom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1getBoundaryArgument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsBoundaryCustom *arg1 = (lammpswrappers::LammpsBoundaryCustom *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryCustom **)&jarg1; 
  result = (char *)(arg1)->getBoundaryArgument();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryCustom *arg1 = (lammpswrappers::LammpsBoundaryCustom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryCustom **)&jarg1; 
  (arg1)->lammpsSetup();
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1DEFAULT_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBoundaryCustom::DEFAULT_TYPE;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1PERIODIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBoundaryCustom::PERIODIC;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1FIXED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBoundaryCustom::FIXED;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1SHRINK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBoundaryCustom::SHRINK;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryCustom_1SHRINK_1MINIMUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBoundaryCustom::SHRINK_MINIMUM;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBoundaryCustom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryCustom *arg1 = (lammpswrappers::LammpsBoundaryCustom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryCustom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBoundaryDeformable(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg4 = (molesimAPI::IAPIVector *) 0 ;
  lammpswrappers::LammpsBoundaryDeformable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  arg4 = *(molesimAPI::IAPIVector **)&jarg4; 
  result = (lammpswrappers::LammpsBoundaryDeformable *)new lammpswrappers::LammpsBoundaryDeformable(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsBoundaryDeformable **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryDeformable_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsBoundaryDeformable *arg1 = (lammpswrappers::LammpsBoundaryDeformable *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryDeformable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryDeformable_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  lammpswrappers::LammpsBoundaryDeformable *arg1 = (lammpswrappers::LammpsBoundaryDeformable *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryDeformable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBoundaryDeformable_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryDeformable *arg1 = (lammpswrappers::LammpsBoundaryDeformable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryDeformable **)&jarg1; 
  (arg1)->lammpsSetup();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBoundaryDeformable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBoundaryDeformable *arg1 = (lammpswrappers::LammpsBoundaryDeformable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBoundaryDeformable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsAtomPositionDefinition_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtomPositionDefinition *arg1 = (lammpswrappers::LammpsAtomPositionDefinition *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomPositionDefinition **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsAtomPositionDefinition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsAtomPositionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lammpswrappers::LammpsAtomPositionDefinition *)new lammpswrappers::LammpsAtomPositionDefinition();
  *(lammpswrappers::LammpsAtomPositionDefinition **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsAtomPositionDefinition *arg1 = (lammpswrappers::LammpsAtomPositionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsAtomPositionDefinition **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNativeAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  molesimAPI::IAPISimulation *arg3 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsNativeAtomPositionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(molesimAPI::IAPISimulation **)&jarg3; 
  result = (lammpswrappers::LammpsNativeAtomPositionDefinition *)new lammpswrappers::LammpsNativeAtomPositionDefinition(arg1,arg2,arg3);
  *(lammpswrappers::LammpsNativeAtomPositionDefinition **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsNativeAtomPositionDefinition_1position_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsNativeAtomPositionDefinition *arg1 = (lammpswrappers::LammpsNativeAtomPositionDefinition *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNativeAtomPositionDefinition **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsNativeAtomPositionDefinition_1position_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsNativeAtomPositionDefinition *arg1 = (lammpswrappers::LammpsNativeAtomPositionDefinition *) 0 ;
  jobject arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNativeAtomPositionDefinition **)&jarg1; 
  arg2 = jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNativeAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNativeAtomPositionDefinition *arg1 = (lammpswrappers::LammpsNativeAtomPositionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNativeAtomPositionDefinition **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsRandom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  lammpswrappers::LammpsRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (lammpswrappers::LammpsRandom *)new lammpswrappers::LammpsRandom(arg1,arg2);
  *(lammpswrappers::LammpsRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsRandom_1nextDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsRandom *arg1 = (lammpswrappers::LammpsRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRandom **)&jarg1; 
  result = (double)(arg1)->nextDouble();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsRandom_1nextInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  lammpswrappers::LammpsRandom *arg1 = (lammpswrappers::LammpsRandom *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRandom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->nextInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsRandom_1nextGaussian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsRandom *arg1 = (lammpswrappers::LammpsRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRandom **)&jarg1; 
  result = (double)(arg1)->nextGaussian();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsRandom *arg1 = (lammpswrappers::LammpsRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRandom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsIntegratorEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsIntegratorEventManager *)new lammpswrappers::LammpsIntegratorEventManager(arg1);
  *(lammpswrappers::LammpsIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegratorEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegratorEventManager *arg1 = (lammpswrappers::LammpsIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegratorEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegratorEventManager *arg1 = (lammpswrappers::LammpsIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsIntegratorEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsIntegratorEventManager *arg1 = (lammpswrappers::LammpsIntegratorEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  lammpswrappers::LammpsIntegratorListenerNative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  result = (lammpswrappers::LammpsIntegratorListenerNative *)new lammpswrappers::LammpsIntegratorListenerNative(arg1,arg2);
  *(lammpswrappers::LammpsIntegratorListenerNative **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegratorListenerNative_1integratorInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegratorListenerNative *arg1 = (lammpswrappers::LammpsIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorInitialized(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegratorListenerNative_1integratorStepStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegratorListenerNative *arg1 = (lammpswrappers::LammpsIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepStarted(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegratorListenerNative_1integratorStepFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegratorListenerNative *arg1 = (lammpswrappers::LammpsIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepFinished(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsIntegratorListenerNative *arg1 = (lammpswrappers::LammpsIntegratorListenerNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorListenerNative **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsIntegrator *)new lammpswrappers::LammpsIntegrator(arg1);
  *(lammpswrappers::LammpsIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1doStep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  (arg1)->doStep();
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1getStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  result = (long long)(arg1)->getStepCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1resetStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  (arg1)->resetStepCount();
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  molesimAPI::IAPIIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  result = (molesimAPI::IAPIIntegratorEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1setNVE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  lammpswrappers::LammpsNVE *arg2 = (lammpswrappers::LammpsNVE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  arg2 = *(lammpswrappers::LammpsNVE **)&jarg2; 
  (arg1)->setNVE(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1setNVT(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  lammpswrappers::LammpsNVT *arg2 = (lammpswrappers::LammpsNVT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  arg2 = *(lammpswrappers::LammpsNVT **)&jarg2; 
  (arg1)->setNVT(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1setNPT(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  lammpswrappers::LammpsNPT *arg2 = (lammpswrappers::LammpsNPT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  arg2 = *(lammpswrappers::LammpsNPT **)&jarg2; 
  (arg1)->setNPT(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1setNPH(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  lammpswrappers::LammpsNPH *arg2 = (lammpswrappers::LammpsNPH *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  arg2 = *(lammpswrappers::LammpsNPH **)&jarg2; 
  (arg1)->setNPH(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1setTempRescale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  lammpswrappers::LammpsTemperatureRescale *arg2 = (lammpswrappers::LammpsTemperatureRescale *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  arg2 = *(lammpswrappers::LammpsTemperatureRescale **)&jarg2; 
  (arg1)->setTempRescale(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1setMomentum(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  lammpswrappers::LammpsMomentum *arg2 = (lammpswrappers::LammpsMomentum *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  arg2 = *(lammpswrappers::LammpsMomentum **)&jarg2; 
  (arg1)->setMomentum(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1setTimestep(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTimestep(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1doSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->doSteps(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsIntegrator *arg1 = (lammpswrappers::LammpsIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegrator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsIntegratorRespa(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  int *arg3 ;
  lammpswrappers::LammpsIntegratorRespa *result = 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return 0; 
  result = (lammpswrappers::LammpsIntegratorRespa *)new lammpswrappers::LammpsIntegratorRespa(arg1,arg2,arg3);
  *(lammpswrappers::LammpsIntegratorRespa **)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsIntegratorRespa(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsIntegratorRespa *arg1 = (lammpswrappers::LammpsIntegratorRespa *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorRespa **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsIntegratorVerlet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsIntegratorVerlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsIntegratorVerlet *)new lammpswrappers::LammpsIntegratorVerlet(arg1);
  *(lammpswrappers::LammpsIntegratorVerlet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsIntegratorVerlet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsIntegratorVerlet *arg1 = (lammpswrappers::LammpsIntegratorVerlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsIntegratorVerlet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1PotentialGroup(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::PotentialGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::PotentialGroup *)new lammpswrappers::PotentialGroup(arg1);
  *(lammpswrappers::PotentialGroup **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1addPotential_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3, jintArray jarg4, jint jarg5) {
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  int *arg3 ;
  int *arg4 ;
  int arg5 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotential **)&jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (int)jarg5; 
  (arg1)->addPotential(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1addPotential_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotential **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addPotential(arg2,arg3,arg4);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1getPotentialCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  result = (int)(arg1)->getPotentialCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1getPotential(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  int arg2 ;
  molesimAPI::IAPIPotential *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIPotential *)(arg1)->getPotential(arg2);
  *(molesimAPI::IAPIPotential **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1getPairCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getPairCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1getAtomIndex1(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getAtomIndex1(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_PotentialGroup_1getAtomIndex2(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getAtomIndex2(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1PotentialGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::PotentialGroup *arg1 = (lammpswrappers::PotentialGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::PotentialGroup **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameter(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1getParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getParameter(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1getParameterCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  result = (int)(arg1)->getParameterCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1getBondType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  result = (char *)(arg1)->getBondType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1getConstructionString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  result = (char *)(arg1)->getConstructionString();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPotential *arg1 = (lammpswrappers::LammpsPotential *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotential **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPair_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPair *arg1 = (lammpswrappers::LammpsPair *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPair **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPair_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPair *arg1 = (lammpswrappers::LammpsPair *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPair **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPair_1setLammpsPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPair *arg1 = (lammpswrappers::LammpsPair *) 0 ;
  LAMMPS_NS::Pair *arg2 = (LAMMPS_NS::Pair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPair **)&jarg1; 
  arg2 = *(LAMMPS_NS::Pair **)&jarg2; 
  (arg1)->setLammpsPair(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPair *arg1 = (lammpswrappers::LammpsPair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPair **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondHarmonic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsBondHarmonic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsBondHarmonic *)new lammpswrappers::LammpsBondHarmonic(arg1);
  *(lammpswrappers::LammpsBondHarmonic **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondHarmonic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  lammpswrappers::LammpsBondHarmonic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (lammpswrappers::LammpsBondHarmonic *)new lammpswrappers::LammpsBondHarmonic(arg1,arg2,arg3);
  *(lammpswrappers::LammpsBondHarmonic **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondHarmonic_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondHarmonic *arg1 = (lammpswrappers::LammpsBondHarmonic *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondHarmonic **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondHarmonic_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondHarmonic *arg1 = (lammpswrappers::LammpsBondHarmonic *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondHarmonic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBondHarmonic_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBondHarmonic *arg1 = (lammpswrappers::LammpsBondHarmonic *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondHarmonic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondHarmonic_1K_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondHarmonic::K_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondHarmonic_1R0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondHarmonic::R0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBondHarmonic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBondHarmonic *arg1 = (lammpswrappers::LammpsBondHarmonic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondHarmonic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondFene_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsBondFene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsBondFene *)new lammpswrappers::LammpsBondFene(arg1);
  *(lammpswrappers::LammpsBondFene **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondFene_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  lammpswrappers::LammpsBondFene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (lammpswrappers::LammpsBondFene *)new lammpswrappers::LammpsBondFene(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsBondFene **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondFene_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondFene *arg1 = (lammpswrappers::LammpsBondFene *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondFene **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondFene_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondFene *arg1 = (lammpswrappers::LammpsBondFene *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondFene **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBondFene_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBondFene *arg1 = (lammpswrappers::LammpsBondFene *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondFene **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFene_1K_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFene::K_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFene_1R0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFene::R0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFene_1EPSILON_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFene::EPSILON_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFene_1SIGMA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFene::SIGMA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBondFene(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBondFene *arg1 = (lammpswrappers::LammpsBondFene *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondFene **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondFeneExpand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsBondFeneExpand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsBondFeneExpand *)new lammpswrappers::LammpsBondFeneExpand(arg1);
  *(lammpswrappers::LammpsBondFeneExpand **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondFeneExpand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  lammpswrappers::LammpsBondFeneExpand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (lammpswrappers::LammpsBondFeneExpand *)new lammpswrappers::LammpsBondFeneExpand(arg1,arg2,arg3,arg4,arg5,arg6);
  *(lammpswrappers::LammpsBondFeneExpand **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondFeneExpand_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondFeneExpand *arg1 = (lammpswrappers::LammpsBondFeneExpand *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondFeneExpand **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondFeneExpand_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondFeneExpand *arg1 = (lammpswrappers::LammpsBondFeneExpand *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondFeneExpand **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBondFeneExpand_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBondFeneExpand *arg1 = (lammpswrappers::LammpsBondFeneExpand *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondFeneExpand **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFeneExpand_1K_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFeneExpand::K_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFeneExpand_1R0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFeneExpand::R0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFeneExpand_1EPSILON_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFeneExpand::EPSILON_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFeneExpand_1SIGMA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFeneExpand::SIGMA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondFeneExpand_1DELTA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondFeneExpand::DELTA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBondFeneExpand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBondFeneExpand *arg1 = (lammpswrappers::LammpsBondFeneExpand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondFeneExpand **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondMorse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsBondMorse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsBondMorse *)new lammpswrappers::LammpsBondMorse(arg1);
  *(lammpswrappers::LammpsBondMorse **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondMorse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsBondMorse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsBondMorse *)new lammpswrappers::LammpsBondMorse(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsBondMorse **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondMorse_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondMorse *arg1 = (lammpswrappers::LammpsBondMorse *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondMorse **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondMorse_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondMorse *arg1 = (lammpswrappers::LammpsBondMorse *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondMorse **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBondMorse_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBondMorse *arg1 = (lammpswrappers::LammpsBondMorse *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondMorse **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondMorse_1D_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondMorse::D_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondMorse_1ALPHA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondMorse::ALPHA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondMorse_1R0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondMorse::R0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBondMorse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBondMorse *arg1 = (lammpswrappers::LammpsBondMorse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondMorse **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondClass2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsBondClass2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsBondClass2 *)new lammpswrappers::LammpsBondClass2(arg1);
  *(lammpswrappers::LammpsBondClass2 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondClass2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  lammpswrappers::LammpsBondClass2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (lammpswrappers::LammpsBondClass2 *)new lammpswrappers::LammpsBondClass2(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsBondClass2 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondClass2_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondClass2 *arg1 = (lammpswrappers::LammpsBondClass2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondClass2 **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondClass2_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondClass2 *arg1 = (lammpswrappers::LammpsBondClass2 *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondClass2 **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBondClass2_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBondClass2 *arg1 = (lammpswrappers::LammpsBondClass2 *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondClass2 **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondClass2_1R0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondClass2::R0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondClass2_1K2_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondClass2::K2_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondClass2_1K3_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondClass2::K3_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondClass2_1K4_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondClass2::K4_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBondClass2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBondClass2 *arg1 = (lammpswrappers::LammpsBondClass2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondClass2 **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondNonlinear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsBondNonlinear *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsBondNonlinear *)new lammpswrappers::LammpsBondNonlinear(arg1);
  *(lammpswrappers::LammpsBondNonlinear **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondNonlinear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsBondNonlinear *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsBondNonlinear *)new lammpswrappers::LammpsBondNonlinear(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsBondNonlinear **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondNonlinear_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondNonlinear *arg1 = (lammpswrappers::LammpsBondNonlinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondNonlinear **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondNonlinear_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondNonlinear *arg1 = (lammpswrappers::LammpsBondNonlinear *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondNonlinear **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBondNonlinear_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBondNonlinear *arg1 = (lammpswrappers::LammpsBondNonlinear *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondNonlinear **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondNonlinear_1EPSILON_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondNonlinear::EPSILON_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondNonlinear_1R0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondNonlinear::R0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondNonlinear_1LAMBDA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondNonlinear::LAMBDA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBondNonlinear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBondNonlinear *arg1 = (lammpswrappers::LammpsBondNonlinear *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondNonlinear **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondQuartic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsBondQuartic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsBondQuartic *)new lammpswrappers::LammpsBondQuartic(arg1);
  *(lammpswrappers::LammpsBondQuartic **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsBondQuartic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  lammpswrappers::LammpsBondQuartic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (lammpswrappers::LammpsBondQuartic *)new lammpswrappers::LammpsBondQuartic(arg1,arg2,arg3,arg4,arg5,arg6);
  *(lammpswrappers::LammpsBondQuartic **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondQuartic_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondQuartic *arg1 = (lammpswrappers::LammpsBondQuartic *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondQuartic **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsBondQuartic_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsBondQuartic *arg1 = (lammpswrappers::LammpsBondQuartic *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondQuartic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsBondQuartic_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsBondQuartic *arg1 = (lammpswrappers::LammpsBondQuartic *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondQuartic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondQuartic_1K_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondQuartic::K_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondQuartic_1B1_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondQuartic::B1_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondQuartic_1B2_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondQuartic::B2_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondQuartic_1RC_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondQuartic::RC_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBondQuartic_1U0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsBondQuartic::U0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsBondQuartic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsBondQuartic *arg1 = (lammpswrappers::LammpsBondQuartic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsBondQuartic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairLennardJonesCutoff_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsPairLennardJonesCutoff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsPairLennardJonesCutoff *)new lammpswrappers::LammpsPairLennardJonesCutoff(arg1);
  *(lammpswrappers::LammpsPairLennardJonesCutoff **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairLennardJonesCutoff_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsPairLennardJonesCutoff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsPairLennardJonesCutoff *)new lammpswrappers::LammpsPairLennardJonesCutoff(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsPairLennardJonesCutoff **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoff_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairLennardJonesCutoff *arg1 = (lammpswrappers::LammpsPairLennardJonesCutoff *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesCutoff **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoff_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairLennardJonesCutoff *arg1 = (lammpswrappers::LammpsPairLennardJonesCutoff *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesCutoff **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoff_1EPSILON_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesCutoff::EPSILON_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoff_1SIGMA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesCutoff::SIGMA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoff_1LJ_1CUTOFF_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesCutoff::LJ_CUTOFF_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairLennardJonesCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairLennardJonesCutoff *arg1 = (lammpswrappers::LammpsPairLennardJonesCutoff *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesCutoff **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairLennardJonesCutoffCoulombCutoff_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *)new lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff(arg1);
  *(lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairLennardJonesCutoffCoulombCutoff_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *)new lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoffCoulombCutoff_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *arg1 = (lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoffCoulombCutoff_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *arg1 = (lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoffCoulombCutoff_1EPSILON_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff::EPSILON_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoffCoulombCutoff_1SIGMA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff::SIGMA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoffCoulombCutoff_1LJ_1CUTOFF_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff::LJ_CUTOFF_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesCutoffCoulombCutoff_1COULOMB_1CUTOFF_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff::COULOMB_CUTOFF_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairLennardJonesCutoffCoulombCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *arg1 = (lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairLennardJonesExpand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsPairLennardJonesExpand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsPairLennardJonesExpand *)new lammpswrappers::LammpsPairLennardJonesExpand(arg1);
  *(lammpswrappers::LammpsPairLennardJonesExpand **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairLennardJonesExpand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  lammpswrappers::LammpsPairLennardJonesExpand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (lammpswrappers::LammpsPairLennardJonesExpand *)new lammpswrappers::LammpsPairLennardJonesExpand(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsPairLennardJonesExpand **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesExpand_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairLennardJonesExpand *arg1 = (lammpswrappers::LammpsPairLennardJonesExpand *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesExpand **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesExpand_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairLennardJonesExpand *arg1 = (lammpswrappers::LammpsPairLennardJonesExpand *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesExpand **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesExpand_1EPSILON_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesExpand::EPSILON_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesExpand_1SIGMA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesExpand::SIGMA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesExpand_1DELTA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesExpand::DELTA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairLennardJonesExpand_1LJ_1CUTOFF_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairLennardJonesExpand::LJ_CUTOFF_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairLennardJonesExpand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairLennardJonesExpand *arg1 = (lammpswrappers::LammpsPairLennardJonesExpand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairLennardJonesExpand **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairMorse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsPairMorse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsPairMorse *)new lammpswrappers::LammpsPairMorse(arg1);
  *(lammpswrappers::LammpsPairMorse **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairMorse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  lammpswrappers::LammpsPairMorse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (lammpswrappers::LammpsPairMorse *)new lammpswrappers::LammpsPairMorse(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsPairMorse **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairMorse_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairMorse *arg1 = (lammpswrappers::LammpsPairMorse *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMorse **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairMorse_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairMorse *arg1 = (lammpswrappers::LammpsPairMorse *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMorse **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairMorse_1D0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairMorse::D0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairMorse_1ALPHA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairMorse::ALPHA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairMorse_1R0_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairMorse::R0_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairMorse_1CUTOFF_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairMorse::CUTOFF_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairMorse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairMorse *arg1 = (lammpswrappers::LammpsPairMorse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMorse **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairDPD_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsPairDPD *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsPairDPD *)new lammpswrappers::LammpsPairDPD(arg1);
  *(lammpswrappers::LammpsPairDPD **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairDPD_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  lammpswrappers::LammpsPairDPD *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (lammpswrappers::LammpsPairDPD *)new lammpswrappers::LammpsPairDPD(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsPairDPD **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairDPD_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairDPD *arg1 = (lammpswrappers::LammpsPairDPD *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairDPD **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairDPD_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairDPD *arg1 = (lammpswrappers::LammpsPairDPD *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairDPD **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairDPD_1A_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairDPD::A_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairDPD_1GAMMA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairDPD::GAMMA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairDPD_1CUTOFF_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairDPD::CUTOFF_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairDPD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairDPD *arg1 = (lammpswrappers::LammpsPairDPD *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairDPD **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairColloid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsPairColloid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsPairColloid *)new lammpswrappers::LammpsPairColloid(arg1);
  *(lammpswrappers::LammpsPairColloid **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairColloid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  lammpswrappers::LammpsPairColloid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (lammpswrappers::LammpsPairColloid *)new lammpswrappers::LammpsPairColloid(arg1,arg2,arg3,arg4,arg5,arg6);
  *(lammpswrappers::LammpsPairColloid **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairColloid_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairColloid *arg1 = (lammpswrappers::LammpsPairColloid *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairColloid **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairColloid_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairColloid *arg1 = (lammpswrappers::LammpsPairColloid *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairColloid **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairColloid_1A_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairColloid::A_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairColloid_1SIGMA_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairColloid::SIGMA_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairColloid_1D1_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairColloid::D1_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairColloid_1D2_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairColloid::D2_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairColloid_1CUTOFF_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairColloid::CUTOFF_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairColloid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairColloid *arg1 = (lammpswrappers::LammpsPairColloid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairColloid **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairMeam(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  int arg2 ;
  jstring arg3 ;
  jstring arg4 ;
  jstring arg5 ;
  lammpswrappers::LammpsPairMeam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  result = (lammpswrappers::LammpsPairMeam *)new lammpswrappers::LammpsPairMeam(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsPairMeam **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairMeam_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairMeam *arg1 = (lammpswrappers::LammpsPairMeam *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMeam **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairMeam_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairMeam *arg1 = (lammpswrappers::LammpsPairMeam *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMeam **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsPairMeam_1getLibraryFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsPairMeam *arg1 = (lammpswrappers::LammpsPairMeam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMeam **)&jarg1; 
  result = (char *)(arg1)->getLibraryFile();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsPairMeam_1getElements(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsPairMeam *arg1 = (lammpswrappers::LammpsPairMeam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMeam **)&jarg1; 
  result = (char *)(arg1)->getElements();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsPairMeam_1getParameterFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsPairMeam *arg1 = (lammpswrappers::LammpsPairMeam *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMeam **)&jarg1; 
  result = (char *)(arg1)->getParameterFile();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairMeam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairMeam *arg1 = (lammpswrappers::LammpsPairMeam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairMeam **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairBuck_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  lammpswrappers::LammpsPairBuck *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (lammpswrappers::LammpsPairBuck *)new lammpswrappers::LammpsPairBuck(arg1);
  *(lammpswrappers::LammpsPairBuck **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairBuck_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  lammpswrappers::LammpsPairBuck *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (lammpswrappers::LammpsPairBuck *)new lammpswrappers::LammpsPairBuck(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsPairBuck **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairBuck_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairBuck *arg1 = (lammpswrappers::LammpsPairBuck *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairBuck **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairBuck_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairBuck *arg1 = (lammpswrappers::LammpsPairBuck *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairBuck **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairBuck_1A_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairBuck::A_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairBuck_1RHO_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairBuck::RHO_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairBuck_1C_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairBuck::C_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairBuck_1CUTOFF_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairBuck::CUTOFF_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairBuck(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairBuck *arg1 = (lammpswrappers::LammpsPairBuck *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairBuck **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairTable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  lammpswrappers::LammpsPairTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (lammpswrappers::LammpsPairTable *)new lammpswrappers::LammpsPairTable(arg1,arg2,arg3,arg4);
  *(lammpswrappers::LammpsPairTable **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairTable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jstring jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  double arg5 ;
  lammpswrappers::LammpsPairTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (double)jarg5; 
  result = (lammpswrappers::LammpsPairTable *)new lammpswrappers::LammpsPairTable(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsPairTable **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairTable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  lammpswrappers::LammpsPairTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (lammpswrappers::LammpsPairTable *)new lammpswrappers::LammpsPairTable(arg1,arg2,arg3,arg4,arg5);
  *(lammpswrappers::LammpsPairTable **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPairTable_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  double arg6 ;
  lammpswrappers::LammpsPairTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (double)jarg6; 
  result = (lammpswrappers::LammpsPairTable *)new lammpswrappers::LammpsPairTable(arg1,arg2,arg3,arg4,arg5,arg6);
  *(lammpswrappers::LammpsPairTable **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  lammpswrappers::LammpsPairTable *arg1 = (lammpswrappers::LammpsPairTable *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairTable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPairTable *arg1 = (lammpswrappers::LammpsPairTable *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairTable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1getLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsPairTable *arg1 = (lammpswrappers::LammpsPairTable *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairTable **)&jarg1; 
  result = (char *)(arg1)->getLookup();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1getConstructionString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsPairTable *arg1 = (lammpswrappers::LammpsPairTable *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairTable **)&jarg1; 
  result = (char *)(arg1)->getConstructionString();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1VALUES_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairTable::VALUES_INDEX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1LOOKUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairTable::LOOKUP;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1LINEAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairTable::LINEAR;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1SPLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairTable::SPLINE;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPairTable_1BITMAP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)lammpswrappers::LammpsPairTable::BITMAP;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPairTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPairTable *arg1 = (lammpswrappers::LammpsPairTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPairTable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsPotentialMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsPotentialMaster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsPotentialMaster *)new lammpswrappers::LammpsPotentialMaster(arg1);
  *(lammpswrappers::LammpsPotentialMaster **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPotentialMaster_1addPotential_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  lammpswrappers::LammpsPotentialMaster *arg1 = (lammpswrappers::LammpsPotentialMaster *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPIAtomType *arg3 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIAtomType *arg4 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotentialAtomic **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtomType **)&jarg3; 
  arg4 = *(molesimAPI::IAPIAtomType **)&jarg4; 
  (arg1)->addPotential(dynamic_cast<IAPIPotentialAtomic *>(arg2),arg3,arg4);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPotentialMaster_1addPotential_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  lammpswrappers::LammpsPotentialMaster *arg1 = (lammpswrappers::LammpsPotentialMaster *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPISpecies *arg3 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotential **)&jarg2; 
  arg3 = *(molesimAPI::IAPISpecies **)&jarg3; 
  (arg1)->addPotential(arg2,arg3);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsPotentialMaster_1lammpsSetup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsPotentialMaster *arg1 = (lammpswrappers::LammpsPotentialMaster *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->lammpsSetup(arg2);
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPotentialMaster_1getTotalBondCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  lammpswrappers::LammpsPotentialMaster *arg1 = (lammpswrappers::LammpsPotentialMaster *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotentialMaster **)&jarg1; 
  result = (int)(arg1)->getTotalBondCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPotentialMaster_1getPairTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  lammpswrappers::LammpsPotentialMaster *arg1 = (lammpswrappers::LammpsPotentialMaster *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  result = (int)(arg1)->getPairTypeCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsPotentialMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsPotentialMaster *arg1 = (lammpswrappers::LammpsPotentialMaster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsPotentialMaster **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNeighborList(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsNeighborList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsNeighborList *)new lammpswrappers::LammpsNeighborList(arg1,arg2);
  *(lammpswrappers::LammpsNeighborList **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsNeighborList_1setDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsNeighborList *arg1 = (lammpswrappers::LammpsNeighborList *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborList **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDelay(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsNeighborList_1setEvery(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsNeighborList *arg1 = (lammpswrappers::LammpsNeighborList *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborList **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEvery(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsNeighborList_1setCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  lammpswrappers::LammpsNeighborList *arg1 = (lammpswrappers::LammpsNeighborList *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborList **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCheck(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsNeighborList_1setPage(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsNeighborList *arg1 = (lammpswrappers::LammpsNeighborList *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborList **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPage(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsNeighborList_1setOne(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsNeighborList *arg1 = (lammpswrappers::LammpsNeighborList *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborList **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOne(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsNeighborList_1setBinSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  lammpswrappers::LammpsNeighborList *arg1 = (lammpswrappers::LammpsNeighborList *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborList **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBinSize(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNeighborList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNeighborList *arg1 = (lammpswrappers::LammpsNeighborList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNeighborListBin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsNeighborListBin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsNeighborListBin *)new lammpswrappers::LammpsNeighborListBin(arg1,arg2);
  *(lammpswrappers::LammpsNeighborListBin **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNeighborListBin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNeighborListBin *arg1 = (lammpswrappers::LammpsNeighborListBin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborListBin **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsNeighborListMulti(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsNeighborListMulti *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsNeighborListMulti *)new lammpswrappers::LammpsNeighborListMulti(arg1,arg2);
  *(lammpswrappers::LammpsNeighborListMulti **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsNeighborListMulti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsNeighborListMulti *arg1 = (lammpswrappers::LammpsNeighborListMulti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsNeighborListMulti **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLattice(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  lammpswrappers::LammpsLattice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (lammpswrappers::LammpsLattice *)new lammpswrappers::LammpsLattice(arg1,arg2,(char const *)arg3);
  *(lammpswrappers::LammpsLattice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsLattice_1setOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsLattice *arg1 = (lammpswrappers::LammpsLattice *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLattice **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setOrigin(arg2);
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLattice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLattice *arg1 = (lammpswrappers::LammpsLattice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLattice **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLatticeHex(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsLatticeHex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsLatticeHex *)new lammpswrappers::LammpsLatticeHex(arg1,arg2);
  *(lammpswrappers::LammpsLatticeHex **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLatticeHex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLatticeHex *arg1 = (lammpswrappers::LammpsLatticeHex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLatticeHex **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLatticeSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsLatticeSQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsLatticeSQ *)new lammpswrappers::LammpsLatticeSQ(arg1,arg2);
  *(lammpswrappers::LammpsLatticeSQ **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLatticeSQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLatticeSQ *arg1 = (lammpswrappers::LammpsLatticeSQ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLatticeSQ **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLatticeSQ2(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsLatticeSQ2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsLatticeSQ2 *)new lammpswrappers::LammpsLatticeSQ2(arg1,arg2);
  *(lammpswrappers::LammpsLatticeSQ2 **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLatticeSQ2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLatticeSQ2 *arg1 = (lammpswrappers::LammpsLatticeSQ2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLatticeSQ2 **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLatticeSC(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsLatticeSC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsLatticeSC *)new lammpswrappers::LammpsLatticeSC(arg1,arg2);
  *(lammpswrappers::LammpsLatticeSC **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLatticeSC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLatticeSC *arg1 = (lammpswrappers::LammpsLatticeSC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLatticeSC **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLatticeBCC(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsLatticeBCC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsLatticeBCC *)new lammpswrappers::LammpsLatticeBCC(arg1,arg2);
  *(lammpswrappers::LammpsLatticeBCC **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLatticeBCC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLatticeBCC *arg1 = (lammpswrappers::LammpsLatticeBCC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLatticeBCC **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLatticeFCC(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsLatticeFCC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsLatticeFCC *)new lammpswrappers::LammpsLatticeFCC(arg1,arg2);
  *(lammpswrappers::LammpsLatticeFCC **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLatticeFCC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLatticeFCC *arg1 = (lammpswrappers::LammpsLatticeFCC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLatticeFCC **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLatticeHCP(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsLatticeHCP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsLatticeHCP *)new lammpswrappers::LammpsLatticeHCP(arg1,arg2);
  *(lammpswrappers::LammpsLatticeHCP **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLatticeHCP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLatticeHCP *arg1 = (lammpswrappers::LammpsLatticeHCP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLatticeHCP **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsLatticeDiamond(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  lammpswrappers::LammpsLatticeDiamond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (lammpswrappers::LammpsLatticeDiamond *)new lammpswrappers::LammpsLatticeDiamond(arg1,arg2);
  *(lammpswrappers::LammpsLatticeDiamond **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsLatticeDiamond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsLatticeDiamond *arg1 = (lammpswrappers::LammpsLatticeDiamond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsLatticeDiamond **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  lammpswrappers::LammpsRegion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (lammpswrappers::LammpsRegion *)new lammpswrappers::LammpsRegion(arg1);
  *(lammpswrappers::LammpsRegion **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_LammpsRegion_1fillAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  lammpswrappers::LammpsRegion *arg1 = (lammpswrappers::LammpsRegion *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRegion **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->fillAtoms(arg2);
}


JNIEXPORT jstring JNICALL Java_lammps_wrapper_testJNI_LammpsRegion_1getRegionID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  lammpswrappers::LammpsRegion *arg1 = (lammpswrappers::LammpsRegion *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRegion **)&jarg1; 
  result = (char *)(arg1)->getRegionID();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_LammpsRegion_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  lammpswrappers::LammpsRegion *arg1 = (lammpswrappers::LammpsRegion *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRegion **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsRegion *arg1 = (lammpswrappers::LammpsRegion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRegion **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsRegionBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  lammpswrappers::LammpsRegionBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  result = (lammpswrappers::LammpsRegionBlock *)new lammpswrappers::LammpsRegionBlock(arg1,arg2,arg3);
  *(lammpswrappers::LammpsRegionBlock **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsRegionBlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsRegionBlock *arg1 = (lammpswrappers::LammpsRegionBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRegionBlock **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsRegionPrism(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  lammpswrappers::LammpsRegionPrism *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (lammpswrappers::LammpsRegionPrism *)new lammpswrappers::LammpsRegionPrism(arg1,arg2,arg3,arg4,arg5,arg6);
  *(lammpswrappers::LammpsRegionPrism **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsRegionPrism(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsRegionPrism *arg1 = (lammpswrappers::LammpsRegionPrism *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRegionPrism **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_new_1LammpsRegionSphere(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double arg3 ;
  lammpswrappers::LammpsRegionSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = (double)jarg3; 
  result = (lammpswrappers::LammpsRegionSphere *)new lammpswrappers::LammpsRegionSphere(arg1,arg2,arg3);
  *(lammpswrappers::LammpsRegionSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_lammps_wrapper_testJNI_delete_1LammpsRegionSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lammpswrappers::LammpsRegionSphere *arg1 = (lammpswrappers::LammpsRegionSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lammpswrappers::LammpsRegionSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIVectorMutableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIVector **)&baseptr = *(molesimAPI::IAPIVectorMutable **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIAtomTypeSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomType **)&baseptr = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIBoxAtomEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIBoxAtomIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxAtomEvent **)&baseptr = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIBoxIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIBoxMoleculeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIBoxMoleculeCountEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIBoxMoleculeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxMoleculeEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPIPotentialAtomicUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotential **)&baseptr = *(molesimAPI::IAPIPotentialAtomic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPISimulationAtomTypeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPISimulationSpeciesEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPISimulationAtomTypeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationAtomTypeEvent **)&baseptr = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPISimulationSpeciesIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationSpeciesEvent **)&baseptr = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPISimulationBoxEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGIAPISimulationIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(lammpswrappers::LammpsSimulationEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationBoxEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsSimulationEvent **)&baseptr = *(lammpswrappers::LammpsSimulationBoxEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationSpeciesEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsSimulationEvent **)&baseptr = *(lammpswrappers::LammpsSimulationSpeciesEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationSpeciesIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsSimulationSpeciesEvent **)&baseptr = *(lammpswrappers::LammpsSimulationSpeciesIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsSimulationEvent **)&baseptr = *(lammpswrappers::LammpsSimulationIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationAtomTypeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsSimulationEvent **)&baseptr = *(lammpswrappers::LammpsSimulationAtomTypeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationAtomTypeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsSimulationAtomTypeEvent **)&baseptr = *(lammpswrappers::LammpsSimulationAtomTypeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationListenerNativeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationListener **)&baseptr = *(lammpswrappers::LammpsSimulationListenerNative **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEventManager **)&baseptr = *(lammpswrappers::LammpsSimulationEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSimulationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulation **)&baseptr = *(lammpswrappers::LammpsSimulation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNPTAsphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNPT **)&baseptr = *(lammpswrappers::LammpsNPTAsphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNPTSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNPT **)&baseptr = *(lammpswrappers::LammpsNPTSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNVEAsphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNVE **)&baseptr = *(lammpswrappers::LammpsNVEAsphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNVESphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNVE **)&baseptr = *(lammpswrappers::LammpsNVESphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNVELimitUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNVE **)&baseptr = *(lammpswrappers::LammpsNVELimit **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNVENoforceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNVE **)&baseptr = *(lammpswrappers::LammpsNVENoforce **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNVTAsphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNVT **)&baseptr = *(lammpswrappers::LammpsNVTAsphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNVTSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNVT **)&baseptr = *(lammpswrappers::LammpsNVTSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNVTSllodUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNVT **)&baseptr = *(lammpswrappers::LammpsNVTSllod **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsAtomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtom **)&baseptr = *(lammpswrappers::LammpsAtom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoundaryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoundary **)&baseptr = *(lammpswrappers::LammpsBoundary **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBox **)&baseptr = *(lammpswrappers::LammpsBox **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoxEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEventManager **)&baseptr = *(lammpswrappers::LammpsBoxEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsMoleculeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIMolecule **)&baseptr = *(lammpswrappers::LammpsMolecule **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsAtomListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomList **)&baseptr = *(lammpswrappers::LammpsAtomList **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsMoleculeListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIMoleculeList **)&baseptr = *(lammpswrappers::LammpsMoleculeList **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsVectorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIVectorMutable **)&baseptr = *(lammpswrappers::LammpsVector **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsVector2DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsVector **)&baseptr = *(lammpswrappers::LammpsVector2D **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsVector3DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsVector **)&baseptr = *(lammpswrappers::LammpsVector3D **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsAtomTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomType **)&baseptr = *(lammpswrappers::LammpsAtomType **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsAtomTypeSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsAtomType **)&baseptr = *(lammpswrappers::LammpsAtomTypeSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsConformationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsInterfaceConformation **)&baseptr = *(lammpswrappers::LammpsConformation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNativeConformationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsConformation **)&baseptr = *(lammpswrappers::LammpsNativeConformation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSpeciesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISpecies **)&baseptr = *(lammpswrappers::LammpsSpecies **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsSpeciesSpheresUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsSpecies **)&baseptr = *(lammpswrappers::LammpsSpeciesSpheres **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoundaryPeriodicUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsBoundary **)&baseptr = *(lammpswrappers::LammpsBoundaryPeriodic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoundaryFixedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsBoundary **)&baseptr = *(lammpswrappers::LammpsBoundaryFixed **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoundaryShrinkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsBoundary **)&baseptr = *(lammpswrappers::LammpsBoundaryShrink **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoundaryShrinkMinUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsBoundary **)&baseptr = *(lammpswrappers::LammpsBoundaryShrinkMin **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoundaryCustomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsBoundary **)&baseptr = *(lammpswrappers::LammpsBoundaryCustom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBoundaryDeformableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsBoundary **)&baseptr = *(lammpswrappers::LammpsBoundaryDeformable **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsAtomPositionDefinitionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsInterfaceAtomPositionDefinition **)&baseptr = *(lammpswrappers::LammpsAtomPositionDefinition **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNativeAtomPositionDefinitionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsAtomPositionDefinition **)&baseptr = *(lammpswrappers::LammpsNativeAtomPositionDefinition **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsRandomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIRandom **)&baseptr = *(lammpswrappers::LammpsRandom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsIntegratorEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegratorEventManager **)&baseptr = *(lammpswrappers::LammpsIntegratorEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsIntegratorListenerNativeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegratorListener **)&baseptr = *(lammpswrappers::LammpsIntegratorListenerNative **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsIntegratorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegrator **)&baseptr = *(lammpswrappers::LammpsIntegrator **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsIntegratorRespaUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsIntegrator **)&baseptr = *(lammpswrappers::LammpsIntegratorRespa **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsIntegratorVerletUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsIntegrator **)&baseptr = *(lammpswrappers::LammpsIntegratorVerlet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGPotentialGroupUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotential **)&baseptr = *(lammpswrappers::PotentialGroup **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPotentialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotential **)&baseptr = *(lammpswrappers::LammpsPotential **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPotential **)&baseptr = *(lammpswrappers::LammpsPair **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBondHarmonicUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPotential **)&baseptr = *(lammpswrappers::LammpsBondHarmonic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBondFeneUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPotential **)&baseptr = *(lammpswrappers::LammpsBondFene **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBondFeneExpandUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPotential **)&baseptr = *(lammpswrappers::LammpsBondFeneExpand **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBondMorseUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPotential **)&baseptr = *(lammpswrappers::LammpsBondMorse **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBondClass2Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPotential **)&baseptr = *(lammpswrappers::LammpsBondClass2 **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBondNonlinearUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPotential **)&baseptr = *(lammpswrappers::LammpsBondNonlinear **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsBondQuarticUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPotential **)&baseptr = *(lammpswrappers::LammpsBondQuartic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairLennardJonesCutoffUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairLennardJonesCutoff **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairLennardJonesCutoffCoulombCutoffUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairLennardJonesCutoffCoulombCutoff **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairLennardJonesExpandUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairLennardJonesExpand **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairMorseUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairMorse **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairDPDUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairDPD **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairColloidUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairColloid **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairMeamUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairMeam **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairBuckUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairBuck **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPairTableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsPair **)&baseptr = *(lammpswrappers::LammpsPairTable **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsPotentialMasterUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotentialMaster **)&baseptr = *(lammpswrappers::LammpsPotentialMaster **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNeighborListBinUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNeighborList **)&baseptr = *(lammpswrappers::LammpsNeighborListBin **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsNeighborListMultiUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsNeighborList **)&baseptr = *(lammpswrappers::LammpsNeighborListMulti **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsLatticeHexUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsLattice **)&baseptr = *(lammpswrappers::LammpsLatticeHex **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsLatticeSQUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsLattice **)&baseptr = *(lammpswrappers::LammpsLatticeSQ **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsLatticeSQ2Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsLattice **)&baseptr = *(lammpswrappers::LammpsLatticeSQ2 **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsLatticeSCUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsLattice **)&baseptr = *(lammpswrappers::LammpsLatticeSC **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsLatticeBCCUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsLattice **)&baseptr = *(lammpswrappers::LammpsLatticeBCC **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsLatticeFCCUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsLattice **)&baseptr = *(lammpswrappers::LammpsLatticeFCC **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsLatticeHCPUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsLattice **)&baseptr = *(lammpswrappers::LammpsLatticeHCP **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsLatticeDiamondUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsLattice **)&baseptr = *(lammpswrappers::LammpsLatticeDiamond **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsRegionBlockUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsRegion **)&baseptr = *(lammpswrappers::LammpsRegionBlock **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsRegionPrismUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsRegion **)&baseptr = *(lammpswrappers::LammpsRegionPrism **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_SWIGLammpsRegionSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(lammpswrappers::LammpsRegion **)&baseptr = *(lammpswrappers::LammpsRegionSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_create_1LammpsIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jobject jobj) {


  jlong jresult = 0;
  lammpswrappers::LammpsIntegratorListenerNative *result = 0 ;

  result = (lammpswrappers::LammpsIntegratorListenerNative *)new lammpswrappers::LammpsIntegratorListenerNative(jenv, jobj);
  *(lammpswrappers::LammpsIntegratorListenerNative **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_create_1LammpsNativeAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jobject jobj,jlong sim) {

  molesimAPI::IAPISimulation *lsim = (molesimAPI::IAPISimulation *) 0;
  lsim = *(molesimAPI::IAPISimulation **)&sim;

  jlong jresult = 0;
  lammpswrappers::LammpsNativeAtomPositionDefinition *result = 0 ;

  result = (lammpswrappers::LammpsNativeAtomPositionDefinition *)new lammpswrappers::LammpsNativeAtomPositionDefinition(jenv, jobj, lsim);
  *(lammpswrappers::LammpsNativeAtomPositionDefinition **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_create_1LammpsNativeConformation(JNIEnv *jenv, jclass jcls, jobject jobj,jlong sim) {

  molesimAPI::IAPISimulation *lsim = (molesimAPI::IAPISimulation *) 0;
  lsim = *(molesimAPI::IAPISimulation **)&sim;

  jlong jresult = 0;
  lammpswrappers::LammpsNativeConformation *result = 0 ;

  result = (lammpswrappers::LammpsNativeConformation *)new lammpswrappers::LammpsNativeConformation(jenv, jobj, lsim);
  *(lammpswrappers::LammpsNativeConformation **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_create_1LammpsPairMeam(JNIEnv *jenv, jclass jcls, jint n,jstring jlibraryFile,jstring jelements,jstring jparmFile) {


  jlong jresult = 0;
  lammpswrappers::LammpsPairMeam *result = 0 ;

  result = (lammpswrappers::LammpsPairMeam *)new lammpswrappers::LammpsPairMeam(jenv, n, jlibraryFile, jelements, jparmFile);
  *(lammpswrappers::LammpsPairMeam **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_lammps_wrapper_testJNI_create_1LammpsSimulationListenerNative(JNIEnv *jenv, jclass jcls, jobject jobj) {


  jlong jresult = 0;
  lammpswrappers::LammpsSimulationListenerNative *result = 0 ;

  result = (lammpswrappers::LammpsSimulationListenerNative *)new lammpswrappers::LammpsSimulationListenerNative(jenv, jobj);
  *(lammpswrappers::LammpsSimulationListenerNative **)&jresult = result;

  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsAtomPositionDefinition_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  lammpswrappers::LammpsInterfaceAtomPositionDefinition *arg1 = (lammpswrappers::LammpsInterfaceAtomPositionDefinition *) 0;
  int instanceType;

  arg1 = *(lammpswrappers::LammpsInterfaceAtomPositionDefinition **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsAtomPositionDefinition)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsNativeAtomPositionDefinition)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsAtomType_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsAtomType)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsAtomTypeSphere)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsPotential_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIPotential **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsBondClass2)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsBondFeneExpand)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(LammpsBondFene)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(LammpsBondHarmonic)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(LammpsBondMorse)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(LammpsBondNonlinear)) {
    instanceType = 5;
  }
  else if(typeid(*arg1) == typeid(LammpsBondQuartic)) {
    instanceType = 6;
  }
  else if(typeid(*arg1) == typeid(LammpsPairBuck)) {
    instanceType = 7;
  }
  else if(typeid(*arg1) == typeid(LammpsPairColloid)) {
    instanceType = 8;
  }
  else if(typeid(*arg1) == typeid(LammpsPairDPD)) {
    instanceType = 9;
  }
  else if(typeid(*arg1) == typeid(LammpsPair)) {
    instanceType = 10;
  }
  else if(typeid(*arg1) == typeid(LammpsPairLennardJonesCutoffCoulombCutoff)) {
    instanceType = 11;
  }
  else if(typeid(*arg1) == typeid(LammpsPairLennardJonesCutoff)) {
    instanceType = 12;
  }
  else if(typeid(*arg1) == typeid(LammpsPairLennardJonesExpand)) {
    instanceType = 13;
  }
  else if(typeid(*arg1) == typeid(LammpsPairMeam)) {
    instanceType = 14;
  }
  else if(typeid(*arg1) == typeid(LammpsPairMorse)) {
    instanceType = 15;
  }
  else if(typeid(*arg1) == typeid(LammpsPairTable)) {
    instanceType = 16;
  }
  else if(typeid(*arg1) == typeid(LammpsPotential)) {
    instanceType = 17;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsBoundary_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsBoundaryCustom)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsBoundaryDeformable)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(LammpsBoundaryFixed)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(LammpsBoundary)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(LammpsBoundaryPeriodic)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(LammpsBoundaryShrink)) {
    instanceType = 5;
  }
  else if(typeid(*arg1) == typeid(LammpsBoundaryShrinkMin)) {
    instanceType = 6;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsConformation_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  lammpswrappers::LammpsInterfaceConformation *arg1 = (lammpswrappers::LammpsInterfaceConformation *) 0;
  int instanceType;

  arg1 = *(lammpswrappers::LammpsInterfaceConformation **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsConformation)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsNativeConformation)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsIntegrator_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsIntegrator)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsIntegratorRespa)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(LammpsIntegratorVerlet)) {
    instanceType = 2;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsLatticeBCC_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  lammpswrappers::LammpsLattice *arg1 = (lammpswrappers::LammpsLattice *) 0;
  int instanceType;

  arg1 = *(lammpswrappers::LammpsLattice **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsLatticeBCC)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsLatticeDiamond)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(LammpsLatticeFCC)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(LammpsLatticeHCP)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(LammpsLatticeHex)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(LammpsLatticeSC)) {
    instanceType = 5;
  }
  else if(typeid(*arg1) == typeid(LammpsLatticeSQ2)) {
    instanceType = 6;
  }
  else if(typeid(*arg1) == typeid(LammpsLatticeSQ)) {
    instanceType = 7;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsRegionBlock_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  lammpswrappers::LammpsRegion *arg1 = (lammpswrappers::LammpsRegion *) 0;
  int instanceType;

  arg1 = *(lammpswrappers::LammpsRegion **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsRegionBlock)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsRegionPrism)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(LammpsRegionSphere)) {
    instanceType = 2;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSimulationEvent_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPISimulationEvent *arg1 = (molesimAPI::IAPISimulationEvent *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPISimulationEvent **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsSimulationAtomTypeEvent)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsSimulationAtomTypeIndexEvent)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(LammpsSimulationBoxEvent)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(LammpsSimulationEvent)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(LammpsSimulationIndexEvent)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(LammpsSimulationSpeciesEvent)) {
    instanceType = 5;
  }
  else if(typeid(*arg1) == typeid(LammpsSimulationSpeciesIndexEvent)) {
    instanceType = 6;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsSpecies_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPISpecies **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsSpecies)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsSpeciesSpheres)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_lammps_wrapper_testJNI_LammpsVector_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIVector **)&jarg1;

  if(typeid(*arg1) == typeid(LammpsVector2D)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(LammpsVector3D)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(LammpsVector)) {
    instanceType = 2;
  }

  jresult = (jint)instanceType;
  return jresult;
}

#ifdef __cplusplus
}
#endif

