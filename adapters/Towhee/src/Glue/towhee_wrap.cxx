/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <typeinfo>
#include "IAPIFunction.h"
#include "IAPIVector.h"
#include "IAPIVectorMutable.h"
#include "IAPIAtom.h"
#include "IAPIAtomList.h"
#include "IAPIMoleculeList.h"
#include "IAPIElement.h"
#include "IAPIAtomType.h"
#include "IAPIAtomTypeSphere.h"
#include "IAPIBoundaryEvent.h"
#include "IAPIBoundaryListener.h"
#include "IAPIBoundaryEventManager.h"
#include "IAPIBoundary.h"
#include "IAPIBoxEvent.h"
#include "IAPIBoxAtomEvent.h"
#include "IAPIBoxAtomIndexEvent.h"
#include "IAPIBoxIndexEvent.h"
#include "IAPIBoxMoleculeEvent.h"
#include "IAPIBoxMoleculeCountEvent.h"
#include "IAPIBoxMoleculeIndexEvent.h"
#include "IAPIBoxListener.h"
#include "IAPIBoxEventManager.h"
#include "IAPIBox.h"
#include "IAPIIntegratorEvent.h"
#include "IAPIIntegratorListener.h"
#include "IAPIIntegratorEventManager.h"
#include "IAPIIntegrator.h"
#include "IAPIMolecule.h"
#include "IAPIPotential.h"
#include "IAPIPotentialAtomic.h"
#include "IAPIPotentialMaster.h"
#include "IAPIRandom.h"
#include "IAPISpecies.h"
#include "IAPISimulationEvent.h"
#include "IAPISimulationAtomTypeEvent.h"
#include "IAPISimulationSpeciesEvent.h"
#include "IAPISimulationAtomTypeIndexEvent.h"
#include "IAPISimulationSpeciesIndexEvent.h"
#include "IAPISimulationBoxEvent.h"
#include "IAPISimulationIndexEvent.h"
#include "IAPISimulationListener.h"
#include "IAPISimulationEventManager.h"
#include "IAPISimulation.h"
#include "TowheeInterfaceAtomPositionDefinition.h"
#include "TowheeAtomPositionDefinition.h"
#include "TowheeRandom.h"
#include "TowheeVector.h"
#include "TowheeVector2D.h"
#include "TowheeVector3D.h"
#include "TowheeVector3DAtom.h"
#include "TowheeSpace.h"
#include "TowheeAtomPositionDefinitionNative.h"
#include "TowheeAtomList.h"
#include "TowheeMolecule.h"
#include "TowheeMonatomicMolecule.h"
#include "TowheeMoleculeList.h"
#include "TowheeBoundary.h"
#include "TowheeBoundaryRectangularPeriodic.h"
#include "TowheeBoxEventManager.h"
#include "TowheeBox.h"
#include "TowheeSpeciesManager.h"
#include "TowheeSimulationEventManager.h"
#include "TowheePotential.h"
#include "TowheePotentialLennardJones.h"
#include "TowheeForceField.h"
#include "TowheeBasicConnectivityMap.h"
#include "TowheePotentialMaster.h"
#include "TowheeSimulation.h"
#include "TowheeIntegratorListenerNative.h"
#include "TowheeIntegratorEventManager.h"
#include "TowheeIntegrator.h"
#include "TowheeMCMove.h"
#include "TowheeMCMoveCOMTranslation.h"
#include "TowheeIntegratorMC.h"
#include "TowheeIntegratorNPT.h"
#include "TowheeIntegratorNVT.h"
#include "TowheeIntegratorPseudoBubble.h"
#include "TowheeIntegratorUVT.h"
#include "TowheeAtom.h"
#include "TowheeAtomType.h"
#include "TowheeAtomTypeSphere.h"
#include "TowheeSpecies.h"
#include "TowheeSpeciesSpheresMono.h"

using namespace towheewrappers;
using namespace molesimAPI;


#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIFunction_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIFunction *arg1 = (molesimAPI::IAPIFunction *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIFunction **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->f(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIFunction *arg1 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIFunction **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIVector_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVector **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIVectorMutable_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIVectorMutable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIVectorMutable *arg1 = (molesimAPI::IAPIVectorMutable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIVectorMutable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtom_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtom_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtom_1setLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeafIndex(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtom_1getLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (int)(arg1)->getLeafIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtom_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->setParent(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtom_1getParentGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getParentGroup();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtom_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtom_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getPosition();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtom *arg1 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomList_1getAtomCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  result = (int)(arg1)->getAtomCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomList_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom(arg2);
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIAtomList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomList *arg1 = (molesimAPI::IAPIAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIMoleculeList_1getMoleculeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  result = (int)(arg1)->getMoleculeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIMoleculeList_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule(arg2);
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIMoleculeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIMoleculeList *arg1 = (molesimAPI::IAPIMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMoleculeList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIElement_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIElement_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_towhee_wrapper_towheeJNI_IAPIElement_1getSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  result = (char *)(arg1)->getSymbol();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIElement *arg1 = (molesimAPI::IAPIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIElement **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1setSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->setSpecies(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1setChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChildIndex(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1getChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (int)(arg1)->getChildIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomType_1getElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  result = (molesimAPI::IAPIElement *)(arg1)->getElement();
  *(molesimAPI::IAPIElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomTypeSphere_1setDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDiameter(arg2);
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIAtomTypeSphere_1getDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  result = (double)(arg1)->getDiameter();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIAtomTypeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIAtomTypeSphere *arg1 = (molesimAPI::IAPIAtomTypeSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundaryEvent_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundaryEvent *arg1 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEvent **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoundaryEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryEvent *arg1 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundaryListener_1boundaryInflate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryListener *arg1 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  molesimAPI::IAPIBoundaryEvent *arg2 = (molesimAPI::IAPIBoundaryEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryEvent **)&jarg2; 
  (arg1)->boundaryInflate(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoundaryListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryListener *arg1 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundaryEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundaryListener *arg2 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundaryEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  molesimAPI::IAPIBoundaryListener *arg2 = (molesimAPI::IAPIBoundaryListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundaryListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoundaryEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundaryEventManager *arg1 = (molesimAPI::IAPIBoundaryEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundaryEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1getBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getBoxSize();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1setBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setBoxSize(arg2);
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (double)(arg1)->volume();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getCenter();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoundary_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  molesimAPI::IAPIBoundaryEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBoundaryEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoundaryEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxEvent *arg1 = (molesimAPI::IAPIBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxEvent *arg1 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxAtomEvent_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxAtomEvent *arg1 = (molesimAPI::IAPIBoxAtomEvent *) 0 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom();
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxAtomEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxAtomEvent *arg1 = (molesimAPI::IAPIBoxAtomEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxAtomIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxAtomIndexEvent *arg1 = (molesimAPI::IAPIBoxAtomIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxAtomIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxAtomIndexEvent *arg1 = (molesimAPI::IAPIBoxAtomIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxIndexEvent *arg1 = (molesimAPI::IAPIBoxIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxIndexEvent *arg1 = (molesimAPI::IAPIBoxIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxMoleculeEvent_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeEvent *arg1 = (molesimAPI::IAPIBoxMoleculeEvent *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxMoleculeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeEvent *arg1 = (molesimAPI::IAPIBoxMoleculeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxMoleculeCountEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxMoleculeCountEvent_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  result = (int)(arg1)->getCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxMoleculeCountEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeCountEvent *arg1 = (molesimAPI::IAPIBoxMoleculeCountEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxMoleculeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBoxMoleculeIndexEvent *arg1 = (molesimAPI::IAPIBoxMoleculeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxMoleculeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxMoleculeIndexEvent *arg1 = (molesimAPI::IAPIBoxMoleculeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxAtomAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomAdded(dynamic_cast<IAPIBoxAtomEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxAtomRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomRemoved(dynamic_cast<IAPIBoxAtomEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxMoleculeAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeAdded(dynamic_cast<IAPIBoxMoleculeEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxMoleculeRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeRemoved(dynamic_cast<IAPIBoxMoleculeEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxGlobalAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxGlobalAtomLeafIndexChanged(dynamic_cast<IAPIBoxIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxGlobalAtomIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxGlobalAtomIndexChanged(dynamic_cast<IAPIBoxIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxAtomLeafIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxAtomLeafIndexChanged(dynamic_cast<IAPIBoxAtomIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxMoleculeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxMoleculeIndexChanged(dynamic_cast<IAPIBoxMoleculeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxListener_1boxNumberMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  molesimAPI::IAPIBoxEvent *arg2 = (molesimAPI::IAPIBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxEvent **)&jarg2; 
  (arg1)->boxNumberMolecules(dynamic_cast<IAPIBoxMoleculeCountEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxListener *arg1 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBoxEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBoxEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBoxEventManager *arg1 = (molesimAPI::IAPIBoxEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBoxEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1setNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setNMolecules(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1getNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (int)(arg1)->getNMolecules(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1getMoleculeList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList(arg2);
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1getMoleculeList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList();
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1getLeafList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getLeafList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1setBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoundary *arg2 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundary **)&jarg2; 
  (arg1)->setBoundary(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPIBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  result = (molesimAPI::IAPIBoxEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1addSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIBox_1removeSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIBox *arg1 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIBox **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegratorEvent_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegratorEvent *arg1 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEvent **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIIntegratorEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorEvent *arg1 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegratorListener_1integratorInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorInitialized(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegratorListener_1integratorStepStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepStarted(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegratorListener_1integratorStepFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepFinished(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIIntegratorListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorListener *arg1 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegratorEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegratorEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIIntegratorEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegratorEventManager *arg1 = (molesimAPI::IAPIIntegratorEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegratorEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegrator_1doStep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->doStep();
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegrator_1getStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  result = (long long)(arg1)->getStepCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegrator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegrator_1resetStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  (arg1)->resetStepCount();
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIIntegrator_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  molesimAPI::IAPIIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  result = (molesimAPI::IAPIIntegratorEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIMolecule_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIMolecule_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIMolecule_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIMolecule_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIMolecule_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPIMolecule_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getType();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIPotential_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIPotential_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIPotential_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIPotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotential **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIPotentialAtomic_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIPotentialAtomic *arg1 = (molesimAPI::IAPIPotentialAtomic *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialAtomic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIPotentialAtomic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotentialAtomic *arg1 = (molesimAPI::IAPIPotentialAtomic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialAtomic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPIPotentialMaster_1addPotential(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  molesimAPI::IAPIPotentialMaster *arg1 = (molesimAPI::IAPIPotentialMaster *) 0 ;
  molesimAPI::IAPIPotential *arg2 = (molesimAPI::IAPIPotential *) 0 ;
  molesimAPI::IAPIAtomType *arg3 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIAtomType *arg4 = (molesimAPI::IAPIAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialMaster **)&jarg1; 
  arg2 = *(molesimAPI::IAPIPotentialAtomic **)&jarg2; 
  arg3 = *(molesimAPI::IAPIAtomType **)&jarg3; 
  arg4 = *(molesimAPI::IAPIAtomType **)&jarg4; 
  (arg1)->addPotential(dynamic_cast<IAPIPotentialAtomic *>(arg2),arg3,arg4);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIPotentialMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIPotentialMaster *arg1 = (molesimAPI::IAPIPotentialMaster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIPotentialMaster **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIRandom_1nextDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  result = (double)(arg1)->nextDouble();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPIRandom_1nextInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->nextInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_IAPIRandom_1nextGaussian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  result = (double)(arg1)->nextGaussian();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPIRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPIRandom *arg1 = (molesimAPI::IAPIRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIRandom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPISpecies_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISpecies_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISpecies_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPISpecies_1getAtomTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  result = (int)(arg1)->getAtomTypeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISpecies_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType(arg2);
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISpecies_1initializeConformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->initializeConformation(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationEvent_1getSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationEvent *arg1 = (molesimAPI::IAPISimulationEvent *) 0 ;
  molesimAPI::IAPISimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEvent **)&jarg1; 
  result = (molesimAPI::IAPISimulation *)(arg1)->getSimulation();
  *(molesimAPI::IAPISimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationEvent *arg1 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationAtomTypeEvent_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationAtomTypeEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeEvent *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationAtomTypeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationAtomTypeEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationSpeciesEvent_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationSpeciesEvent *arg1 = (molesimAPI::IAPISimulationSpeciesEvent *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationSpeciesEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationSpeciesEvent *arg1 = (molesimAPI::IAPISimulationSpeciesEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationAtomTypeIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationAtomTypeIndexEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationAtomTypeIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationAtomTypeIndexEvent *arg1 = (molesimAPI::IAPISimulationAtomTypeIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationSpeciesIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationSpeciesIndexEvent *arg1 = (molesimAPI::IAPISimulationSpeciesIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationSpeciesIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationSpeciesIndexEvent *arg1 = (molesimAPI::IAPISimulationSpeciesIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationBoxEvent_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulationBoxEvent *arg1 = (molesimAPI::IAPISimulationBoxEvent *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationBoxEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationBoxEvent *arg1 = (molesimAPI::IAPISimulationBoxEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationIndexEvent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulationIndexEvent *arg1 = (molesimAPI::IAPISimulationIndexEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationIndexEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationIndexEvent *arg1 = (molesimAPI::IAPISimulationIndexEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationListener_1simulationBoxAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxAdded(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationListener_1simulationBoxRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationBoxRemoved(dynamic_cast<IAPISimulationBoxEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationListener_1simulationSpeciesAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesAdded(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationListener_1simulationSpeciesRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesRemoved(dynamic_cast<IAPISimulationSpeciesEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationListener_1simulationSpeciesIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesIndexChanged(dynamic_cast<IAPISimulationSpeciesIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationListener_1simulationSpeciesMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationSpeciesMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationListener_1simulationAtomTypeIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeIndexChanged(dynamic_cast<IAPISimulationAtomTypeIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationListener_1simulationAtomTypeMaxIndexChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  molesimAPI::IAPISimulationEvent *arg2 = (molesimAPI::IAPISimulationEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationEvent **)&jarg2; 
  (arg1)->simulationAtomTypeMaxIndexChanged(dynamic_cast<IAPISimulationIndexEvent *>(arg2));
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationListener *arg1 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulationEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulationEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulationEventManager *arg1 = (molesimAPI::IAPISimulationEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulationEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1addBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->addBox(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1removeBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->removeBox(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1getBoxCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (int)(arg1)->getBoxCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox(arg2);
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1getRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPIRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPIRandom *)(arg1)->getRandom();
  *(molesimAPI::IAPIRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_IAPISimulation_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  molesimAPI::IAPISimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  result = (molesimAPI::IAPISimulationEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPISimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1IAPISimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeInterfaceAtomPositionDefinition_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeInterfaceAtomPositionDefinition *arg1 = (towheewrappers::TowheeInterfaceAtomPositionDefinition *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeInterfaceAtomPositionDefinition **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeInterfaceAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeInterfaceAtomPositionDefinition *arg1 = (towheewrappers::TowheeInterfaceAtomPositionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeInterfaceAtomPositionDefinition **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomPositionDefinition_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtomPositionDefinition *arg1 = (towheewrappers::TowheeAtomPositionDefinition *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomPositionDefinition **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeAtomPositionDefinition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtomPositionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeAtomPositionDefinition *)new towheewrappers::TowheeAtomPositionDefinition();
  *(towheewrappers::TowheeAtomPositionDefinition **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeAtomPositionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeAtomPositionDefinition *arg1 = (towheewrappers::TowheeAtomPositionDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomPositionDefinition **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeRandom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  towheewrappers::TowheeRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (towheewrappers::TowheeRandom *)new towheewrappers::TowheeRandom(arg1);
  *(towheewrappers::TowheeRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeRandom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  long arg2 ;
  towheewrappers::TowheeRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (long)jarg2; 
  result = (towheewrappers::TowheeRandom *)new towheewrappers::TowheeRandom(arg1,arg2);
  *(towheewrappers::TowheeRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeRandom_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  bool arg1 ;
  long arg2 ;
  int arg3 ;
  towheewrappers::TowheeRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  result = (towheewrappers::TowheeRandom *)new towheewrappers::TowheeRandom(arg1,arg2,arg3);
  *(towheewrappers::TowheeRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeRandom_1nextDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeRandom *arg1 = (towheewrappers::TowheeRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeRandom **)&jarg1; 
  result = (double)(arg1)->nextDouble();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeRandom_1nextInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  towheewrappers::TowheeRandom *arg1 = (towheewrappers::TowheeRandom *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeRandom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->nextInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeRandom_1nextGaussian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeRandom *arg1 = (towheewrappers::TowheeRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeRandom **)&jarg1; 
  result = (double)(arg1)->nextGaussian();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeRandom *arg1 = (towheewrappers::TowheeRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeRandom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeVector *arg1 = (towheewrappers::TowheeVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector2D_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeVector2D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeVector2D *)new towheewrappers::TowheeVector2D();
  *(towheewrappers::TowheeVector2D **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeVector2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeVector2D *arg1 = (towheewrappers::TowheeVector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector2D **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeVector3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeVector3D *)new towheewrappers::TowheeVector3D();
  *(towheewrappers::TowheeVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeVector3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  towheewrappers::TowheeVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (towheewrappers::TowheeVector3D *)new towheewrappers::TowheeVector3D(arg1,arg2,arg3);
  *(towheewrappers::TowheeVector3D **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1squared(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  result = (double)(arg1)->squared();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  result = (bool)(arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  result = (bool)(arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1Mv1Squared(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (double)(arg1)->Mv1Squared(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  (arg1)->normalize();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIFunction *arg2 = (molesimAPI::IAPIFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIFunction **)&jarg2; 
  (arg1)->map(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3D_1E_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->E(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeVector3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeVector3D *arg1 = (towheewrappers::TowheeVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3D **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeVector3DAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  void (*arg2)(int *,int *,int *,int *,double *,double *,double *) = (void (*)(int *,int *,int *,int *,double *,double *,double *)) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  towheewrappers::TowheeVector3DAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  arg2 = *(void (**)(int *,int *,int *,int *,double *,double *,double *))&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (towheewrappers::TowheeVector3DAtom *)new towheewrappers::TowheeVector3DAtom(arg1,arg2,arg3,arg4,arg5);
  *(towheewrappers::TowheeVector3DAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1assignTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->assignTo(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->E(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->E(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1PE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1PE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1ME(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->ME(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1TE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1TE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->TE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1DE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->DE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1Ea1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ea1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1PEa1Tv1(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  double arg2 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->PEa1Tv1(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1Ev1Pv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Pv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1Ev1Mv2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->Ev1Mv2(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->mod(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1XE(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->XE(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1E_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->E(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector3DAtom_1update(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  (arg1)->update();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeVector3DAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeVector3DAtom *arg1 = (towheewrappers::TowheeVector3DAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeVector3DAtom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeSpace(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  towheewrappers::TowheeSpace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (towheewrappers::TowheeSpace *)new towheewrappers::TowheeSpace(arg1);
  *(towheewrappers::TowheeSpace **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpace_1getD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeSpace *arg1 = (towheewrappers::TowheeSpace *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpace **)&jarg1; 
  result = (int)(arg1)->getD();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpace_1makeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSpace *arg1 = (towheewrappers::TowheeSpace *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpace **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->makeVector();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeSpace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeSpace *arg1 = (towheewrappers::TowheeSpace *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpace **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeAtomPositionDefinitionNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  towheewrappers::TowheeSpace *arg3 = (towheewrappers::TowheeSpace *) 0 ;
  towheewrappers::TowheeAtomPositionDefinitionNative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(towheewrappers::TowheeSpace **)&jarg3; 
  result = (towheewrappers::TowheeAtomPositionDefinitionNative *)new towheewrappers::TowheeAtomPositionDefinitionNative(arg1,arg2,arg3);
  *(towheewrappers::TowheeAtomPositionDefinitionNative **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomPositionDefinitionNative_1position_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtomPositionDefinitionNative *arg1 = (towheewrappers::TowheeAtomPositionDefinitionNative *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomPositionDefinitionNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomPositionDefinitionNative_1position_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtomPositionDefinitionNative *arg1 = (towheewrappers::TowheeAtomPositionDefinitionNative *) 0 ;
  jobject arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomPositionDefinitionNative **)&jarg1; 
  arg2 = jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->position(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeAtomPositionDefinitionNative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeAtomPositionDefinitionNative *arg1 = (towheewrappers::TowheeAtomPositionDefinitionNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomPositionDefinitionNative **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeAtomList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeAtomList *)new towheewrappers::TowheeAtomList();
  *(towheewrappers::TowheeAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomList_1getAtomCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeAtomList *arg1 = (towheewrappers::TowheeAtomList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomList **)&jarg1; 
  result = (int)(arg1)->getAtomCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomList_1getAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtomList *arg1 = (towheewrappers::TowheeAtomList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtom *)(arg1)->getAtom(arg2);
  *(molesimAPI::IAPIAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomList_1addAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeAtomList *arg1 = (towheewrappers::TowheeAtomList *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addAtom(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomList_1removeAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeAtomList *arg1 = (towheewrappers::TowheeAtomList *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeAtom(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeAtomList *arg1 = (towheewrappers::TowheeAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomList **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeAtomList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeAtomList *arg1 = (towheewrappers::TowheeAtomList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getType();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeMolecule *arg1 = (towheewrappers::TowheeMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMolecule **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeMonatomicMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0 ;
  int arg2 ;
  towheewrappers::TowheeMonatomicMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (towheewrappers::TowheeMonatomicMolecule *)new towheewrappers::TowheeMonatomicMolecule(arg1,arg2);
  *(towheewrappers::TowheeMonatomicMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMonatomicMolecule_1addChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeMonatomicMolecule *arg1 = (towheewrappers::TowheeMonatomicMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMonatomicMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->addChildAtom(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMonatomicMolecule_1removeChildAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeMonatomicMolecule *arg1 = (towheewrappers::TowheeMonatomicMolecule *) 0 ;
  molesimAPI::IAPIAtom *arg2 = (molesimAPI::IAPIAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMonatomicMolecule **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtom **)&jarg2; 
  (arg1)->removeChildAtom(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeMonatomicMolecule_1getChildList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeMonatomicMolecule *arg1 = (towheewrappers::TowheeMonatomicMolecule *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMonatomicMolecule **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getChildList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeMonatomicMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeMonatomicMolecule *arg1 = (towheewrappers::TowheeMonatomicMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMonatomicMolecule **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeMoleculeList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeMoleculeList *)new towheewrappers::TowheeMoleculeList();
  *(towheewrappers::TowheeMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeMoleculeList_1getMoleculeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeMoleculeList *arg1 = (towheewrappers::TowheeMoleculeList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMoleculeList **)&jarg1; 
  result = (int)(arg1)->getMoleculeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeMoleculeList_1getMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeMoleculeList *arg1 = (towheewrappers::TowheeMoleculeList *) 0 ;
  int arg2 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMoleculeList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getMolecule(arg2);
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMoleculeList_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeMoleculeList *arg1 = (towheewrappers::TowheeMoleculeList *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMoleculeList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMoleculeList_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeMoleculeList *arg1 = (towheewrappers::TowheeMoleculeList *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMoleculeList **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMoleculeList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeMoleculeList *arg1 = (towheewrappers::TowheeMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMoleculeList **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeMoleculeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeMoleculeList *arg1 = (towheewrappers::TowheeMoleculeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMoleculeList **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1setBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->setBoxSize(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1getBoxSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getBoxSize();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  result = (double)(arg1)->volume();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox();
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  result = (molesimAPI::IAPIVector *)(arg1)->getCenter();
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  molesimAPI::IAPIBoundaryEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  result = (molesimAPI::IAPIBoundaryEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoundaryEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeBoundary *arg1 = (towheewrappers::TowheeBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundary **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeBoundaryRectangularPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSpace *arg1 = (towheewrappers::TowheeSpace *) 0 ;
  towheewrappers::TowheeBoundaryRectangularPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpace **)&jarg1; 
  result = (towheewrappers::TowheeBoundaryRectangularPeriodic *)new towheewrappers::TowheeBoundaryRectangularPeriodic(arg1);
  *(towheewrappers::TowheeBoundaryRectangularPeriodic **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundaryRectangularPeriodic_1nearestImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBoundaryRectangularPeriodic *arg1 = (towheewrappers::TowheeBoundaryRectangularPeriodic *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundaryRectangularPeriodic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  (arg1)->nearestImage(dynamic_cast<IAPIVectorMutable *>(arg2));
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundaryRectangularPeriodic_1centralImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoundaryRectangularPeriodic *arg1 = (towheewrappers::TowheeBoundaryRectangularPeriodic *) 0 ;
  molesimAPI::IAPIVector *arg2 = (molesimAPI::IAPIVector *) 0 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundaryRectangularPeriodic **)&jarg1; 
  arg2 = *(molesimAPI::IAPIVector **)&jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->centralImage(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundaryRectangularPeriodic_1getEdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoundaryRectangularPeriodic *arg1 = (towheewrappers::TowheeBoundaryRectangularPeriodic *) 0 ;
  int arg2 ;
  molesimAPI::IAPIVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundaryRectangularPeriodic **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIVector *)(arg1)->getEdgeVector(arg2);
  *(molesimAPI::IAPIVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundaryRectangularPeriodic_1getPeriodicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  towheewrappers::TowheeBoundaryRectangularPeriodic *arg1 = (towheewrappers::TowheeBoundaryRectangularPeriodic *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundaryRectangularPeriodic **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getPeriodicity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundaryRectangularPeriodic_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeBoundaryRectangularPeriodic *arg1 = (towheewrappers::TowheeBoundaryRectangularPeriodic *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundaryRectangularPeriodic **)&jarg1; 
  result = (double)(arg1)->volume();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeBoundaryRectangularPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeBoundaryRectangularPeriodic *arg1 = (towheewrappers::TowheeBoundaryRectangularPeriodic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoundaryRectangularPeriodic **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoxEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBoxEventManager *arg1 = (towheewrappers::TowheeBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoxEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBoxEventManager *arg1 = (towheewrappers::TowheeBoxEventManager *) 0 ;
  molesimAPI::IAPIBoxListener *arg2 = (molesimAPI::IAPIBoxListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoxEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoxListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeBoxEventManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeBoxEventManager *)new towheewrappers::TowheeBoxEventManager();
  *(towheewrappers::TowheeBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeBoxEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeBoxEventManager *arg1 = (towheewrappers::TowheeBoxEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBoxEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeBox(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeBox *)new towheewrappers::TowheeBox();
  *(towheewrappers::TowheeBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1addMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->addMolecule(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1removeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->removeMolecule(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1setNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setNMolecules(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1getNMolecules(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (int)(arg1)->getNMolecules(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1getMoleculeList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList(arg2);
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1getMoleculeList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPIMoleculeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  result = (molesimAPI::IAPIMoleculeList *)(arg1)->getMoleculeList();
  *(molesimAPI::IAPIMoleculeList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1getLeafList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPIAtomList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  result = (molesimAPI::IAPIAtomList *)(arg1)->getLeafList();
  *(molesimAPI::IAPIAtomList **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPIBoundary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  result = (molesimAPI::IAPIBoundary *)(arg1)->getBoundary();
  *(molesimAPI::IAPIBoundary **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1setBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPIBoundary *arg2 = (molesimAPI::IAPIBoundary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBoundary **)&jarg2; 
  (arg1)->setBoundary(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPIBoxEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  result = (molesimAPI::IAPIBoxEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIBoxEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1addSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBox_1removeSpeciesNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpeciesNotify(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeBox *arg1 = (towheewrappers::TowheeBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBox **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpeciesManager_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSpeciesManager *arg1 = (towheewrappers::TowheeSpeciesManager *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpeciesManager_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSpeciesManager *arg1 = (towheewrappers::TowheeSpeciesManager *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpeciesManager_1boxAddedNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSpeciesManager *arg1 = (towheewrappers::TowheeSpeciesManager *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpeciesManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->boxAddedNotify(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpeciesManager_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeSpeciesManager *arg1 = (towheewrappers::TowheeSpeciesManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpeciesManager **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpeciesManager_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSpeciesManager *arg1 = (towheewrappers::TowheeSpeciesManager *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpeciesManager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeSpeciesManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSpeciesManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeSpeciesManager *)new towheewrappers::TowheeSpeciesManager();
  *(towheewrappers::TowheeSpeciesManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeSpeciesManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeSpeciesManager *arg1 = (towheewrappers::TowheeSpeciesManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpeciesManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulationEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSimulationEventManager *arg1 = (towheewrappers::TowheeSimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulationEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSimulationEventManager *arg1 = (towheewrappers::TowheeSimulationEventManager *) 0 ;
  molesimAPI::IAPISimulationListener *arg2 = (molesimAPI::IAPISimulationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulationEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPISimulationListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeSimulationEventManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeSimulationEventManager *)new towheewrappers::TowheeSimulationEventManager();
  *(towheewrappers::TowheeSimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeSimulationEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeSimulationEventManager *arg1 = (towheewrappers::TowheeSimulationEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulationEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheePotential_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheePotential *arg1 = (towheewrappers::TowheePotential *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotential **)&jarg1; 
  result = (double)(arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheePotential_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheePotential *arg1 = (towheewrappers::TowheePotential *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotential **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheePotential_1nBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheePotential *arg1 = (towheewrappers::TowheePotential *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotential **)&jarg1; 
  result = (int)(arg1)->nBody();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheePotential_1setBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheePotential *arg1 = (towheewrappers::TowheePotential *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotential **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->setBox(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheePotential_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheePotential *arg1 = (towheewrappers::TowheePotential *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotential **)&jarg1; 
  (arg1)->setup();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheePotential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheePotential *arg1 = (towheewrappers::TowheePotential *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotential **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheePotentialLennardJones(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheePotentialLennardJones *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheePotentialLennardJones *)new towheewrappers::TowheePotentialLennardJones();
  *(towheewrappers::TowheePotentialLennardJones **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialLennardJones_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheePotentialLennardJones *arg1 = (towheewrappers::TowheePotentialLennardJones *) 0 ;
  molesimAPI::IAPIAtomList *arg2 = (molesimAPI::IAPIAtomList *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotentialLennardJones **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomList **)&jarg2; 
  result = (double)(arg1)->energy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialLennardJones_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheePotentialLennardJones *arg1 = (towheewrappers::TowheePotentialLennardJones *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotentialLennardJones **)&jarg1; 
  (arg1)->setup();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialLennardJones_1setClassicalMixRule(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  towheewrappers::TowheePotentialLennardJones *arg1 = (towheewrappers::TowheePotentialLennardJones *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotentialLennardJones **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setClassicalMixRule(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialLennardJones_1LORENTZ_1BERTHELOT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)towheewrappers::TowheePotentialLennardJones::LORENTZ_BERTHELOT;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialLennardJones_1GEOMETRIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)towheewrappers::TowheePotentialLennardJones::GEOMETRIC;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialLennardJones_1EXPLICIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)towheewrappers::TowheePotentialLennardJones::EXPLICIT;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialLennardJones_1SHUKLA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)towheewrappers::TowheePotentialLennardJones::SHUKLA;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheePotentialLennardJones(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheePotentialLennardJones *arg1 = (towheewrappers::TowheePotentialLennardJones *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotentialLennardJones **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeForceField(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  towheewrappers::TowheeForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (towheewrappers::TowheeForceField *)new towheewrappers::TowheeForceField(arg1,arg2);
  *(towheewrappers::TowheeForceField **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_towhee_wrapper_towheeJNI_TowheeForceField_1getForcefieldName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  towheewrappers::TowheeForceField *arg1 = (towheewrappers::TowheeForceField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeForceField **)&jarg1; 
  result = (char *)(arg1)->getForcefieldName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_towhee_wrapper_towheeJNI_TowheeForceField_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  towheewrappers::TowheeForceField *arg1 = (towheewrappers::TowheeForceField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeForceField **)&jarg1; 
  result = (char *)(arg1)->getFileName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeForceField_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeForceField *arg1 = (towheewrappers::TowheeForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeForceField **)&jarg1; 
  (arg1)->setup();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeForceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeForceField *arg1 = (towheewrappers::TowheeForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeForceField **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeBasicConnectivityMap(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeBasicConnectivityMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeBasicConnectivityMap *)new towheewrappers::TowheeBasicConnectivityMap();
  *(towheewrappers::TowheeBasicConnectivityMap **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeBasicConnectivityMap_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeBasicConnectivityMap *arg1 = (towheewrappers::TowheeBasicConnectivityMap *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  towheewrappers::TowheeForceField *arg3 = (towheewrappers::TowheeForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBasicConnectivityMap **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  arg3 = *(towheewrappers::TowheeForceField **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeBasicConnectivityMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeBasicConnectivityMap *arg1 = (towheewrappers::TowheeBasicConnectivityMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeBasicConnectivityMap **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialMaster_1addForceField(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheePotentialMaster *arg1 = (towheewrappers::TowheePotentialMaster *) 0 ;
  towheewrappers::TowheeForceField *arg2 = (towheewrappers::TowheeForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotentialMaster **)&jarg1; 
  arg2 = *(towheewrappers::TowheeForceField **)&jarg2; 
  (arg1)->addForceField(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialMaster_1getForceFieldCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheePotentialMaster *arg1 = (towheewrappers::TowheePotentialMaster *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotentialMaster **)&jarg1; 
  result = (int)(arg1)->getForceFieldCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheePotentialMaster_1getForceField(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheePotentialMaster *arg1 = (towheewrappers::TowheePotentialMaster *) 0 ;
  int arg2 ;
  towheewrappers::TowheeForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotentialMaster **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (towheewrappers::TowheeForceField *)(arg1)->getForceField(arg2);
  *(towheewrappers::TowheeForceField **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheePotentialMaster(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheePotentialMaster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheePotentialMaster *)new towheewrappers::TowheePotentialMaster();
  *(towheewrappers::TowheePotentialMaster **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheePotentialMaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheePotentialMaster *arg1 = (towheewrappers::TowheePotentialMaster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheePotentialMaster **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeSimulation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeSimulation *)new towheewrappers::TowheeSimulation();
  *(towheewrappers::TowheeSimulation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1addBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->addBox(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1removeBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  (arg1)->removeBox(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPIRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  result = (molesimAPI::IAPIRandom *)(arg1)->getRandom();
  *(molesimAPI::IAPIRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPISimulationEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  result = (molesimAPI::IAPISimulationEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPISimulationEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getBoxCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  result = (int)(arg1)->getBoxCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPIBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIBox *)(arg1)->getBox(arg2);
  *(molesimAPI::IAPIBox **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1addSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->addSpecies(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1removeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->removeSpecies(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getSpeciesCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  result = (int)(arg1)->getSpeciesCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  int arg2 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies(arg2);
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPIIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  result = (molesimAPI::IAPIIntegrator *)(arg1)->getIntegrator();
  *(molesimAPI::IAPIIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  towheewrappers::TowheePotentialMaster *arg2 = (towheewrappers::TowheePotentialMaster *) 0 ;
  molesimAPI::IAPIVector *arg3 = (molesimAPI::IAPIVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = *(towheewrappers::TowheePotentialMaster **)&jarg2; 
  arg3 = *(molesimAPI::IAPIVector **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getState(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)towheewrappers::TowheeSimulation::getState();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getAtomIDMgr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  IndexManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  result = (IndexManager *)(arg1)->getAtomIDMgr();
  *(IndexManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getMoleculeIDMgr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  IndexManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  result = (IndexManager *)(arg1)->getMoleculeIDMgr();
  *(IndexManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1resetCOM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  (arg1)->resetCOM();
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getTemp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  result = (double)(arg1)->getTemp();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1getTotalEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPIBox *arg2 = (molesimAPI::IAPIBox *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIBox **)&jarg2; 
  result = (double)(arg1)->getTotalEnergy(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1setIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPIIntegrator *arg2 = (molesimAPI::IAPIIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegrator **)&jarg2; 
  (arg1)->setIntegrator(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1UNINITIALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)towheewrappers::TowheeSimulation::UNINITIALIZED;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSimulation_1INITIALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)towheewrappers::TowheeSimulation::INITIALIZED;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  JNIEnv *arg1 = (JNIEnv *) 0 ;
  jobject arg2 ;
  towheewrappers::TowheeIntegratorListenerNative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNIEnv **)&jarg1; 
  arg2 = jarg2; 
  result = (towheewrappers::TowheeIntegratorListenerNative *)new towheewrappers::TowheeIntegratorListenerNative(arg1,arg2);
  *(towheewrappers::TowheeIntegratorListenerNative **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorListenerNative_1integratorInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeIntegratorListenerNative *arg1 = (towheewrappers::TowheeIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorInitialized(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorListenerNative_1integratorStepStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeIntegratorListenerNative *arg1 = (towheewrappers::TowheeIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepStarted(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorListenerNative_1integratorStepFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeIntegratorListenerNative *arg1 = (towheewrappers::TowheeIntegratorListenerNative *) 0 ;
  molesimAPI::IAPIIntegratorEvent *arg2 = (molesimAPI::IAPIIntegratorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorListenerNative **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorEvent **)&jarg2; 
  (arg1)->integratorStepFinished(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorListenerNative *arg1 = (towheewrappers::TowheeIntegratorListenerNative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorListenerNative **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeIntegratorEventManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeIntegratorEventManager *)new towheewrappers::TowheeIntegratorEventManager();
  *(towheewrappers::TowheeIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorEventManager_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeIntegratorEventManager *arg1 = (towheewrappers::TowheeIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorEventManager_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeIntegratorEventManager *arg1 = (towheewrappers::TowheeIntegratorEventManager *) 0 ;
  molesimAPI::IAPIIntegratorListener *arg2 = (molesimAPI::IAPIIntegratorListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorEventManager **)&jarg1; 
  arg2 = *(molesimAPI::IAPIIntegratorListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorEventManager_1stepStartedNotify(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorEventManager *arg1 = (towheewrappers::TowheeIntegratorEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorEventManager **)&jarg1; 
  (arg1)->stepStartedNotify();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorEventManager_1stepCompletedNotify(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorEventManager *arg1 = (towheewrappers::TowheeIntegratorEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorEventManager **)&jarg1; 
  (arg1)->stepCompletedNotify();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeIntegratorEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorEventManager *arg1 = (towheewrappers::TowheeIntegratorEventManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorEventManager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeIntegrator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeIntegrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeIntegrator *)new towheewrappers::TowheeIntegrator();
  *(towheewrappers::TowheeIntegrator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegrator_1doStep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegrator *arg1 = (towheewrappers::TowheeIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegrator **)&jarg1; 
  (arg1)->doStep();
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegrator_1getStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeIntegrator *arg1 = (towheewrappers::TowheeIntegrator *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegrator **)&jarg1; 
  result = (long long)(arg1)->getStepCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegrator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegrator *arg1 = (towheewrappers::TowheeIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegrator **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegrator_1resetStepCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegrator *arg1 = (towheewrappers::TowheeIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegrator **)&jarg1; 
  (arg1)->resetStepCount();
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegrator_1getEventManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeIntegrator *arg1 = (towheewrappers::TowheeIntegrator *) 0 ;
  molesimAPI::IAPIIntegratorEventManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegrator **)&jarg1; 
  result = (molesimAPI::IAPIIntegratorEventManager *)(arg1)->getEventManager();
  *(molesimAPI::IAPIIntegratorEventManager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegrator *arg1 = (towheewrappers::TowheeIntegrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegrator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeMCMove_1getProbability(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeMCMove *arg1 = (towheewrappers::TowheeMCMove *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMCMove **)&jarg1; 
  result = (double)(arg1)->getProbability();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMCMove_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeMCMove *arg1 = (towheewrappers::TowheeMCMove *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMCMove **)&jarg1; 
  (arg1)->setup();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeMCMove(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeMCMove *arg1 = (towheewrappers::TowheeMCMove *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMCMove **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeMCMoveCOMTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPISimulation *arg1 = (molesimAPI::IAPISimulation *) 0 ;
  double arg2 ;
  towheewrappers::TowheeMCMoveCOMTranslation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPISimulation **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (towheewrappers::TowheeMCMoveCOMTranslation *)new towheewrappers::TowheeMCMoveCOMTranslation(arg1,arg2);
  *(towheewrappers::TowheeMCMoveCOMTranslation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMCMoveCOMTranslation_1setPmtcmt(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  towheewrappers::TowheeMCMoveCOMTranslation *arg1 = (towheewrappers::TowheeMCMoveCOMTranslation *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMCMoveCOMTranslation **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPmtcmt(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMCMoveCOMTranslation_1setRmtrac(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeMCMoveCOMTranslation *arg1 = (towheewrappers::TowheeMCMoveCOMTranslation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMCMoveCOMTranslation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRmtrac(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMCMoveCOMTranslation_1setTatrac(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeMCMoveCOMTranslation *arg1 = (towheewrappers::TowheeMCMoveCOMTranslation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMCMoveCOMTranslation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTatrac(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeMCMoveCOMTranslation_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeMCMoveCOMTranslation *arg1 = (towheewrappers::TowheeMCMoveCOMTranslation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMCMoveCOMTranslation **)&jarg1; 
  (arg1)->setup();
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeMCMoveCOMTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeMCMoveCOMTranslation *arg1 = (towheewrappers::TowheeMCMoveCOMTranslation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeMCMoveCOMTranslation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorMC_1addMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeIntegratorMC *arg1 = (towheewrappers::TowheeIntegratorMC *) 0 ;
  towheewrappers::TowheeMCMove *arg2 = (towheewrappers::TowheeMCMove *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorMC **)&jarg1; 
  arg2 = *(towheewrappers::TowheeMCMove **)&jarg2; 
  (arg1)->addMove(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorMC_1getMoveCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeIntegratorMC *arg1 = (towheewrappers::TowheeIntegratorMC *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorMC **)&jarg1; 
  result = (int)(arg1)->getMoveCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegratorMC_1getMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeIntegratorMC *arg1 = (towheewrappers::TowheeIntegratorMC *) 0 ;
  int arg2 ;
  towheewrappers::TowheeMCMove *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorMC **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (towheewrappers::TowheeMCMove *)(arg1)->getMove(arg2);
  *(towheewrappers::TowheeMCMove **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeIntegratorMC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  towheewrappers::TowheeIntegratorMC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (towheewrappers::TowheeIntegratorMC *)new towheewrappers::TowheeIntegratorMC();
  *(towheewrappers::TowheeIntegratorMC **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeIntegratorMC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorMC *arg1 = (towheewrappers::TowheeIntegratorMC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorMC **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeIntegratorNPT(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  towheewrappers::TowheeIntegratorNPT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (towheewrappers::TowheeIntegratorNPT *)new towheewrappers::TowheeIntegratorNPT(arg1,arg2);
  *(towheewrappers::TowheeIntegratorNPT **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeIntegratorNPT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorNPT *arg1 = (towheewrappers::TowheeIntegratorNPT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorNPT **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeIntegratorNVT(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  towheewrappers::TowheeIntegratorNVT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (towheewrappers::TowheeIntegratorNVT *)new towheewrappers::TowheeIntegratorNVT(arg1);
  *(towheewrappers::TowheeIntegratorNVT **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeIntegratorNVT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorNVT *arg1 = (towheewrappers::TowheeIntegratorNVT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorNVT **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeIntegratorPseudoBubble(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  towheewrappers::TowheeIntegratorPseudoBubble *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (towheewrappers::TowheeIntegratorPseudoBubble *)new towheewrappers::TowheeIntegratorPseudoBubble(arg1);
  *(towheewrappers::TowheeIntegratorPseudoBubble **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeIntegratorPseudoBubble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorPseudoBubble *arg1 = (towheewrappers::TowheeIntegratorPseudoBubble *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorPseudoBubble **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeIntegratorUVT(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  bool arg2 ;
  towheewrappers::TowheeIntegratorUVT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (towheewrappers::TowheeIntegratorUVT *)new towheewrappers::TowheeIntegratorUVT(arg1,arg2);
  *(towheewrappers::TowheeIntegratorUVT **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeIntegratorUVT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeIntegratorUVT *arg1 = (towheewrappers::TowheeIntegratorUVT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeIntegratorUVT **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0 ;
  int arg2 ;
  towheewrappers::TowheeAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (towheewrappers::TowheeAtom *)new towheewrappers::TowheeAtom(arg1,arg2);
  *(towheewrappers::TowheeAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1setLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeafIndex(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1getLeafIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  result = (int)(arg1)->getLeafIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getPosition();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  molesimAPI::IAPIVectorMutable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  result = (molesimAPI::IAPIVectorMutable *)(arg1)->getVelocity();
  *(molesimAPI::IAPIVectorMutable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->setParent(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1getParentGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->getParentGroup();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtom_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getType();
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeAtom *arg1 = (towheewrappers::TowheeAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeAtomType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  towheewrappers::TowheeAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (towheewrappers::TowheeAtomType *)new towheewrappers::TowheeAtomType(arg1);
  *(towheewrappers::TowheeAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeAtomType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  towheewrappers::TowheeAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (towheewrappers::TowheeAtomType *)new towheewrappers::TowheeAtomType(arg1,arg2);
  *(towheewrappers::TowheeAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1setSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  molesimAPI::IAPISpecies *arg2 = (molesimAPI::IAPISpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  arg2 = *(molesimAPI::IAPISpecies **)&jarg2; 
  (arg1)->setSpecies(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1getSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  molesimAPI::IAPISpecies *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  result = (molesimAPI::IAPISpecies *)(arg1)->getSpecies();
  *(molesimAPI::IAPISpecies **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1setChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChildIndex(arg2);
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1getChildIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  result = (int)(arg1)->getChildIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  result = (double)(arg1)->rm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1getElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  molesimAPI::IAPIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  result = (molesimAPI::IAPIElement *)(arg1)->getElement();
  *(molesimAPI::IAPIElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeAtomType *arg1 = (towheewrappers::TowheeAtomType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomType **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeAtomTypeSphere(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  towheewrappers::TowheeAtomTypeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (towheewrappers::TowheeAtomTypeSphere *)new towheewrappers::TowheeAtomTypeSphere(arg1);
  *(towheewrappers::TowheeAtomTypeSphere **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomTypeSphere_1setDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  towheewrappers::TowheeAtomTypeSphere *arg1 = (towheewrappers::TowheeAtomTypeSphere *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomTypeSphere **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDiameter(arg2);
}


JNIEXPORT jdouble JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomTypeSphere_1getDiameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  towheewrappers::TowheeAtomTypeSphere *arg1 = (towheewrappers::TowheeAtomTypeSphere *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomTypeSphere **)&jarg1; 
  result = (double)(arg1)->getDiameter();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeAtomTypeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeAtomTypeSphere *arg1 = (towheewrappers::TowheeAtomTypeSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeAtomTypeSphere **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpecies_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeSpecies *arg1 = (towheewrappers::TowheeSpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpecies **)&jarg1; 
  result = (int)(arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpecies_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  towheewrappers::TowheeSpecies *arg1 = (towheewrappers::TowheeSpecies *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndex(arg2);
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpecies_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSpecies *arg1 = (towheewrappers::TowheeSpecies *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpecies **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpecies_1getAtomTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  towheewrappers::TowheeSpecies *arg1 = (towheewrappers::TowheeSpecies *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpecies **)&jarg1; 
  result = (int)(arg1)->getAtomTypeCount();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpecies_1getAtomType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSpecies *arg1 = (towheewrappers::TowheeSpecies *) 0 ;
  int arg2 ;
  molesimAPI::IAPIAtomType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpecies **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (molesimAPI::IAPIAtomType *)(arg1)->getAtomType(arg2);
  *(molesimAPI::IAPIAtomType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpecies_1initializeConformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  towheewrappers::TowheeSpecies *arg1 = (towheewrappers::TowheeSpecies *) 0 ;
  molesimAPI::IAPIMolecule *arg2 = (molesimAPI::IAPIMolecule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpecies **)&jarg1; 
  arg2 = *(molesimAPI::IAPIMolecule **)&jarg2; 
  (arg1)->initializeConformation(arg2);
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeSpecies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeSpecies *arg1 = (towheewrappers::TowheeSpecies *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpecies **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_new_1TowheeSpeciesSpheresMono(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSimulation *arg1 = (towheewrappers::TowheeSimulation *) 0 ;
  molesimAPI::IAPIAtomType *arg2 = (molesimAPI::IAPIAtomType *) 0 ;
  molesimAPI::IAPIBoundary *arg3 = (molesimAPI::IAPIBoundary *) 0 ;
  towheewrappers::TowheeSpeciesSpheresMono *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSimulation **)&jarg1; 
  arg2 = *(molesimAPI::IAPIAtomType **)&jarg2; 
  arg3 = *(molesimAPI::IAPIBoundary **)&jarg3; 
  result = (towheewrappers::TowheeSpeciesSpheresMono *)new towheewrappers::TowheeSpeciesSpheresMono(arg1,arg2,arg3);
  *(towheewrappers::TowheeSpeciesSpheresMono **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpeciesSpheresMono_1makeMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  towheewrappers::TowheeSpeciesSpheresMono *arg1 = (towheewrappers::TowheeSpeciesSpheresMono *) 0 ;
  molesimAPI::IAPIMolecule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpeciesSpheresMono **)&jarg1; 
  result = (molesimAPI::IAPIMolecule *)(arg1)->makeMolecule();
  *(molesimAPI::IAPIMolecule **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_towhee_wrapper_towheeJNI_delete_1TowheeSpeciesSpheresMono(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  towheewrappers::TowheeSpeciesSpheresMono *arg1 = (towheewrappers::TowheeSpeciesSpheresMono *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(towheewrappers::TowheeSpeciesSpheresMono **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIVectorMutableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIVector **)&baseptr = *(molesimAPI::IAPIVectorMutable **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIAtomTypeSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomType **)&baseptr = *(molesimAPI::IAPIAtomTypeSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIBoxAtomEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxAtomEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIBoxAtomIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxAtomEvent **)&baseptr = *(molesimAPI::IAPIBoxAtomIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIBoxIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIBoxMoleculeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIBoxMoleculeCountEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeCountEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIBoxMoleculeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxMoleculeEvent **)&baseptr = *(molesimAPI::IAPIBoxMoleculeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPIPotentialAtomicUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotential **)&baseptr = *(molesimAPI::IAPIPotentialAtomic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPISimulationAtomTypeEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationAtomTypeEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPISimulationSpeciesEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationSpeciesEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPISimulationAtomTypeIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationAtomTypeEvent **)&baseptr = *(molesimAPI::IAPISimulationAtomTypeIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPISimulationSpeciesIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationSpeciesEvent **)&baseptr = *(molesimAPI::IAPISimulationSpeciesIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPISimulationBoxEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationBoxEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGIAPISimulationIndexEventUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEvent **)&baseptr = *(molesimAPI::IAPISimulationIndexEvent **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeAtomPositionDefinitionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeInterfaceAtomPositionDefinition **)&baseptr = *(towheewrappers::TowheeAtomPositionDefinition **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeRandomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIRandom **)&baseptr = *(towheewrappers::TowheeRandom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeVectorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIVectorMutable **)&baseptr = *(towheewrappers::TowheeVector **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeVector2DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeVector **)&baseptr = *(towheewrappers::TowheeVector2D **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeVector3DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeVector **)&baseptr = *(towheewrappers::TowheeVector3D **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeVector3DAtomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeVector3D **)&baseptr = *(towheewrappers::TowheeVector3DAtom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeAtomPositionDefinitionNativeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeAtomPositionDefinition **)&baseptr = *(towheewrappers::TowheeAtomPositionDefinitionNative **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeAtomListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomList **)&baseptr = *(towheewrappers::TowheeAtomList **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeMoleculeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIMolecule **)&baseptr = *(towheewrappers::TowheeMolecule **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeMonatomicMoleculeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeMolecule **)&baseptr = *(towheewrappers::TowheeMonatomicMolecule **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeMoleculeListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIMoleculeList **)&baseptr = *(towheewrappers::TowheeMoleculeList **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeBoundaryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoundary **)&baseptr = *(towheewrappers::TowheeBoundary **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeBoundaryRectangularPeriodicUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeBoundary **)&baseptr = *(towheewrappers::TowheeBoundaryRectangularPeriodic **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeBoxEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBoxEventManager **)&baseptr = *(towheewrappers::TowheeBoxEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeBoxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIBox **)&baseptr = *(towheewrappers::TowheeBox **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeSimulationEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulationEventManager **)&baseptr = *(towheewrappers::TowheeSimulationEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheePotentialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIPotentialAtomic **)&baseptr = *(towheewrappers::TowheePotential **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheePotentialLennardJonesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheePotential **)&baseptr = *(towheewrappers::TowheePotentialLennardJones **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeSimulationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISimulation **)&baseptr = *(towheewrappers::TowheeSimulation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeIntegratorListenerNativeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegratorListener **)&baseptr = *(towheewrappers::TowheeIntegratorListenerNative **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeIntegratorEventManagerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegratorEventManager **)&baseptr = *(towheewrappers::TowheeIntegratorEventManager **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeIntegratorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIIntegrator **)&baseptr = *(towheewrappers::TowheeIntegrator **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeMCMoveCOMTranslationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeMCMove **)&baseptr = *(towheewrappers::TowheeMCMoveCOMTranslation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeIntegratorMCUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeIntegrator **)&baseptr = *(towheewrappers::TowheeIntegratorMC **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeIntegratorNPTUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeIntegratorMC **)&baseptr = *(towheewrappers::TowheeIntegratorNPT **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeIntegratorNVTUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeIntegratorMC **)&baseptr = *(towheewrappers::TowheeIntegratorNVT **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeIntegratorPseudoBubbleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeIntegratorMC **)&baseptr = *(towheewrappers::TowheeIntegratorPseudoBubble **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeIntegratorUVTUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeIntegratorMC **)&baseptr = *(towheewrappers::TowheeIntegratorUVT **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeAtomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtom **)&baseptr = *(towheewrappers::TowheeAtom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeAtomTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPIAtomType **)&baseptr = *(towheewrappers::TowheeAtomType **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeAtomTypeSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeAtomType **)&baseptr = *(towheewrappers::TowheeAtomTypeSphere **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeSpeciesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(molesimAPI::IAPISpecies **)&baseptr = *(towheewrappers::TowheeSpecies **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_SWIGTowheeSpeciesSpheresMonoUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(towheewrappers::TowheeSpecies **)&baseptr = *(towheewrappers::TowheeSpeciesSpheresMono **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_create_1TowheeAtomPositionDefinitionNative(JNIEnv *jenv, jclass jcls, jobject jobj,TowheeSpace *space) {


  jlong jresult = 0;
  towheewrappers::TowheeAtomPositionDefinitionNative *result = 0 ;

  result = (towheewrappers::TowheeAtomPositionDefinitionNative *)new towheewrappers::TowheeAtomPositionDefinitionNative(jenv, jobj, space);
  *(towheewrappers::TowheeAtomPositionDefinitionNative **)&jresult = result;

  return jresult;
}

JNIEXPORT jlong JNICALL Java_towhee_wrapper_towheeJNI_create_1TowheeIntegratorListenerNative(JNIEnv *jenv, jclass jcls, jobject jobj) {


  jlong jresult = 0;
  towheewrappers::TowheeIntegratorListenerNative *result = 0 ;

  result = (towheewrappers::TowheeIntegratorListenerNative *)new towheewrappers::TowheeIntegratorListenerNative(jenv, jobj);
  *(towheewrappers::TowheeIntegratorListenerNative **)&jresult = result;

  return jresult;
}

JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomPositionDefinition_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  towheewrappers::TowheeInterfaceAtomPositionDefinition *arg1 = (towheewrappers::TowheeInterfaceAtomPositionDefinition *) 0;
  int instanceType;

  arg1 = *(towheewrappers::TowheeInterfaceAtomPositionDefinition **)&jarg1;

  if(typeid(*arg1) == typeid(TowheeAtomPositionDefinition)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(TowheeAtomPositionDefinitionNative)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeAtomType_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIAtomType *arg1 = (molesimAPI::IAPIAtomType *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIAtomType **)&jarg1;

  if(typeid(*arg1) == typeid(TowheeAtomType)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(TowheeAtomTypeSphere)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeBoundary_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIBoundary *arg1 = (molesimAPI::IAPIBoundary *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIBoundary **)&jarg1;

  if(typeid(*arg1) == typeid(TowheeBoundary)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(TowheeBoundaryRectangularPeriodic)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeIntegrator_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIIntegrator *arg1 = (molesimAPI::IAPIIntegrator *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIIntegrator **)&jarg1;

  if(typeid(*arg1) == typeid(TowheeIntegrator)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(TowheeIntegratorMC)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(TowheeIntegratorNPT)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(TowheeIntegratorNVT)) {
    instanceType = 3;
  }
  else if(typeid(*arg1) == typeid(TowheeIntegratorPseudoBubble)) {
    instanceType = 4;
  }
  else if(typeid(*arg1) == typeid(TowheeIntegratorUVT)) {
    instanceType = 5;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeMolecule_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIMolecule *arg1 = (molesimAPI::IAPIMolecule *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIMolecule **)&jarg1;

  if(typeid(*arg1) == typeid(TowheeMolecule)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(TowheeMonatomicMolecule)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheePotential_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIPotential *arg1 = (molesimAPI::IAPIPotential *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIPotential **)&jarg1;

  if(typeid(*arg1) == typeid(TowheePotential)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(TowheePotentialLennardJones)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeSpecies_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPISpecies *arg1 = (molesimAPI::IAPISpecies *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPISpecies **)&jarg1;

  if(typeid(*arg1) == typeid(TowheeSpecies)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(TowheeSpeciesSpheresMono)) {
    instanceType = 1;
  }

  jresult = (jint)instanceType;
  return jresult;
}

JNIEXPORT jint JNICALL Java_towhee_wrapper_towheeJNI_TowheeVector_1instanceType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0;
  molesimAPI::IAPIVector *arg1 = (molesimAPI::IAPIVector *) 0;
  int instanceType;

  arg1 = *(molesimAPI::IAPIVector **)&jarg1;

  if(typeid(*arg1) == typeid(TowheeVector2D)) {
    instanceType = 0;
  }
  else if(typeid(*arg1) == typeid(TowheeVector3DAtom)) {
    instanceType = 1;
  }
  else if(typeid(*arg1) == typeid(TowheeVector3D)) {
    instanceType = 2;
  }
  else if(typeid(*arg1) == typeid(TowheeVector)) {
    instanceType = 3;
  }

  jresult = (jint)instanceType;
  return jresult;
}

#ifdef __cplusplus
}
#endif

