#!/usr/bin/perl

require "cl_parser";
require "file_list";

@import_list = ();
$num_imports = 0;

$index = 0;

$show_steps = 1;
$debug_import = 0;

#
#
#  CHANGE SWIG PROXY CLASSES TO IMPLEMENT INTERFACE
#
#

&atom_type_leaf; # getElement method
&potential_master;

#
#
# Place changes that "are hooked up in a fashion that they should
# never be implemented" after this comment.
#
#

sub atom_type_leaf() {

#
# Add :
#    public Element getElement();
#

@file_list=("$NATIVE_PREFIX\AtomType", "$API_PREFIX\AtomType");
$file_list_len = 2;

$file_list_index = 0;
while($file_list_index < $file_list_len) {

  $in_filename = "@file_list[$file_list_index].java";
  $out_filename = $in_filename . ".tmp";

  open(JAVA_FILE, $in_filename);
  open(OUT_FILE, ">$out_filename") || "Cannot open $out_filename for writing";

  while(<JAVA_FILE>) {

    if(m/^}/) {
      print OUT_FILE "  public etomica.chem.elements.Element getElement() {\n";
      print OUT_FILE "    System.out.println(\"@file_list[$file_list_index].getElement() should NEVER be called!\");\n";
      print OUT_FILE "    return null;\n";
      print OUT_FILE "  }\n\n";
    }

    print OUT_FILE $_;

  }

  close(JAVA_FILE);
  close(OUT_FILE);
  system("mv $out_filename $in_filename");

  $file_list_index++;

}
} # END sub atom_type_leaf()

sub potential_master() {

#
# Add :
#     public PotentialMasterLrc lrcMaster();
#     public PotentialGroup makePotentialGroup(int nBody);
#     public void calculate(IBox box, IteratorDirective id,
#                     PotentialCalculation pc);
#     public void addModel(Model newModel);
#     public void addPotential(IPotential potential, ISpecies[] species);
#     public void addPotential(IPotential potential,
#                     IAtomType[] atomTypes);
#     public void potentialAddedNotify(IPotential subPotential,
#                     PotentialGroup pGroup);
#     public PotentialGroup getPotential(IAtomType[] types);
#     public IAtomType[] getAtomTypes(IPotential potential);
#     public void removePotential(IPotential potential);
#     public boolean isEnabled();
#     public void setEnabled(boolean enabled);
#     public void setEnabled(IPotential potential, boolean enabled);
#     public abstract boolean isEnabled(IPotential potential);
#     public IPotential[] getPotentials();
#

@file_list=("$NATIVE_PREFIX\PotentialMaster", "$API_PREFIX\PotentialMaster");
$file_list_len = 2;

$file_list_index = 0;
while($file_list_index < $file_list_len) {

  $in_filename = "@file_list[$file_list_index].java";
  $out_filename = $in_filename . ".tmp";

  open(JAVA_FILE, $in_filename);
  open(OUT_FILE, ">$out_filename") || "Cannot open $out_filename for writing";

  while(<JAVA_FILE>) {

    if(m/^public class/) {
      print OUT_FILE "import etomica.api.IBox;\n";
      print OUT_FILE "import etomica.api.ISpecies;\n";
      print OUT_FILE "import etomica.api.IPotentialAtomic;\n";
      print OUT_FILE "import etomica.api.IPotentialMolecular;\n";
    }
    if(m/^}/) {
      print OUT_FILE "  public etomica.potential.PotentialMasterLrc lrcMaster() {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].lrcMaster() has been called!\");\n";
      print OUT_FILE "    return null;\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public etomica.potential.PotentialGroup makePotentialGroup(int nBody) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].makePotential() has been called!\");\n";
      print OUT_FILE "    return null;\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void calculate(IBox box, etomica.atom.iterator.IteratorDirective id, etomica.potential.PotentialCalculation pc) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].addModel() has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void addModel(etomica.chem.models.Model newModel) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].addModel() has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void addPotential(IPotentialMolecular potential, ISpecies[] species) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].addPotential(IPotential, ISpecies[]) has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void addPotential(IPotentialAtomic potential, IAtomType[] atomTypes) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].addPotential(IPotential, IAtomType[]) has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void potentialAddedNotify(IPotentialAtomic subPotential, etomica.potential.PotentialGroup pGroup) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].potentialAddedNotify() has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public etomica.potential.PotentialGroup getPotential(ISpecies[] types) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].getPotential(ISpecies[]) has been called!\");\n";
      print OUT_FILE "    return null;\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void removePotential(IPotentialMolecular potential) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].removePotential() has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void removePotential(IPotentialAtomic potential) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].removePotential() has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public boolean isEnabled() {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].isEnabled() has been called!\");\n";
      print OUT_FILE "    return false;\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void setEnabled(boolean enabled) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].setEnabled(boolean) has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void setEnabled(IPotentialAtomic potential, boolean enabled) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].setEnabled(IPotential, boolean) has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public void setEnabled(IPotentialMolecular potential, boolean enabled) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].setEnabled(IPotential, boolean) has been called!\");\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public boolean isEnabled(IPotentialAtomic potential) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].isEnabled(IPotential) has been called!\");\n";
      print OUT_FILE "    return false;\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public boolean isEnabled(IPotentialMolecular potential) {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].isEnabled(IPotential) has been called!\");\n";
      print OUT_FILE "    return false;\n";
      print OUT_FILE "  }\n\n";
      print OUT_FILE "  public IPotentialMolecular[] getPotentials() {\n";
      print OUT_FILE "    System.out.println(\"BAD, VERY BAD : @file_list[$file_list_index].getPotentials() has been called!\");\n";
      print OUT_FILE "    return null;\n";
      print OUT_FILE "  }\n\n";
    }

    print OUT_FILE $_

  }
  close(JAVA_FILE);
  close(OUT_FILE);
  system("mv $out_filename $in_filename");

  $file_list_index++;
}
} # END sub potential_master() {


